<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java成神之路</title>
      <link href="/2019/02/20/Java%E6%88%90%E7%A5%9E%E4%B9%8B%E8%B7%AF/"/>
      <url>/2019/02/20/Java%E6%88%90%E7%A5%9E%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="一、基础篇"><a href="#一、基础篇" class="headerlink" title="一、基础篇"></a>一、基础篇</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>→ 什么是面向对象<br>面向对象、面向过程</p><p>面向对象的三大基本特征和五大基本原则</p><p>→ 平台无关性<br>Java 如何实现的平台无关</p><p>JVM 还支持哪些语言（Kotlin、Groovy、JRuby、Jython、Scala）</p><p>→ 值传递<br>值传递、引用传递</p><p>为什么说 Java 中只有值传递</p><h2 id="Java-基础知识"><a href="#Java-基础知识" class="headerlink" title="Java 基础知识"></a>Java 基础知识</h2><h4 id="→-基本数据类型"><a href="#→-基本数据类型" class="headerlink" title="→ 基本数据类型"></a>→ 基本数据类型</h4><p>8 种基本数据类型：整型、浮点型、布尔型、字符型</p><p>整型中 byte、short、int、long 的取值范围</p><p>什么是浮点型？什么是单精度和双精度？为什么不能用浮点型表示金额？</p><h4 id="→-自动拆装箱"><a href="#→-自动拆装箱" class="headerlink" title="→ 自动拆装箱"></a>→ 自动拆装箱</h4><p>什么是包装类型、什么是基本类型、什么是自动拆装箱</p><p>Integer 的缓存机制</p><h4 id="→-String"><a href="#→-String" class="headerlink" title="→ String"></a>→ String</h4><p>字符串的不可变性</p><p>JDK 6 和 JDK 7 中 substring 的原理及区别、</p><p>replaceFirst、replaceAll、replace 区别、</p><p>String 对“+”的重载、字符串拼接的几种方式和区别</p><p>String.valueOf 和 Integer.toString 的区别、</p><p>switch 对 String 的支持</p><p>字符串池、常量池（运行时常量池、Class 常量池）、intern</p><h4 id="→-熟悉-Java-中各种关键字"><a href="#→-熟悉-Java-中各种关键字" class="headerlink" title="→ 熟悉 Java 中各种关键字"></a>→ 熟悉 Java 中各种关键字</h4><p>transient、instanceof、final、static、volatile、synchronized、const 原理及用法</p><h4 id="→-集合类"><a href="#→-集合类" class="headerlink" title="→ 集合类"></a>→ 集合类</h4><p>常用集合类的使用、ArrayList 和 LinkedList 和 Vector 的区别 、SynchronizedList 和 Vector 的区别、HashMap、HashTable、ConcurrentHashMap 区别、</p><p>Set 和 List 区别？Set 如何保证元素不重复？</p><p>Java 8 中 stream 相关用法、apache 集合处理工具类的使用、不同版本的 JDK 中 HashMap 的实现的区别以及原因</p><p>Collection 和 Collections 区别</p><p>Arrays.asList 获得的 List 使用时需要注意什么</p><p>Enumeration 和 Iterator 区别</p><p>fail-fast 和 fail-safe</p><p>CopyOnWriteArrayList、ConcurrentSkipListMap</p><h4 id="→-枚举"><a href="#→-枚举" class="headerlink" title="→ 枚举"></a>→ 枚举</h4><p>枚举的用法、枚举的实现、枚举与单例、Enum 类</p><p>Java 枚举如何比较</p><p>switch 对枚举的支持</p><p>枚举的序列化如何实现</p><p>枚举的线程安全性问题</p><h4 id="→-IO"><a href="#→-IO" class="headerlink" title="→ IO"></a>→ IO</h4><p>字符流、字节流、输入流、输出流、</p><p>同步、异步、阻塞、非阻塞、Linux 5 种 IO 模型</p><p>BIO、NIO 和 AIO 的区别、三种 IO 的用法与原理、netty</p><h4 id="→-反射"><a href="#→-反射" class="headerlink" title="→ 反射"></a>→ 反射</h4><p>反射与工厂模式、反射有什么用</p><p>Class 类、java.lang.reflect.*</p><h4 id="→-动态代理"><a href="#→-动态代理" class="headerlink" title="→ 动态代理"></a>→ 动态代理</h4><p>静态代理、动态代理</p><p>动态代理和反射的关系</p><p>动态代理的几种实现方式</p><p>AOP</p><h4 id="→-序列化"><a href="#→-序列化" class="headerlink" title="→ 序列化"></a>→ 序列化</h4><p>什么是序列化与反序列化、为什么序列化、序列化底层原理、序列化与单例模式、protobuf、为什么说序列化并不安全</p><p>#### </p><h4 id="→-注解"><a href="#→-注解" class="headerlink" title="→ 注解"></a><strong>→ 注解</strong></h4><p>元注解、自定义注解、Java 中常用注解使用、注解与反射的结合</p><p>Spring 常用注解</p><h4 id="→-JMS"><a href="#→-JMS" class="headerlink" title="→ JMS"></a>→ JMS</h4><p>什么是 Java 消息服务、JMS 消息传送模型</p><h4 id="→-JMX"><a href="#→-JMX" class="headerlink" title="→ JMX"></a>→ JMX</h4><p>java.lang.management.<em>、 javax.management.</em></p><h4 id="→-泛型"><a href="#→-泛型" class="headerlink" title="→ 泛型"></a>→ 泛型</h4><p>泛型与继承、类型擦除、泛型中 KTVE? object 等的含义、泛型各种用法</p><p>限定通配符和非限定通配符、上下界限定符 extends 和 super</p><p>List<object> 和原始类型 List 之间的区别? </object></p><p>List&lt;?&gt; 和 List<object> 之间的区别是什么?</object></p><h4 id="→-单元测试"><a href="#→-单元测试" class="headerlink" title="→ 单元测试"></a>→ 单元测试</h4><p>junit、mock、mockito、内存数据库（h2）</p><h4 id="→-正则表达式"><a href="#→-正则表达式" class="headerlink" title="→ 正则表达式"></a>→ 正则表达式</h4><p>java.lang.util.regex.*</p><h4 id="→-常用的-Java-工具库"><a href="#→-常用的-Java-工具库" class="headerlink" title="→ 常用的 Java 工具库"></a>→ 常用的 Java 工具库</h4><p>commons.lang、commons.*…、 guava-libraries、 netty</p><h4 id="→-API-amp-SPI"><a href="#→-API-amp-SPI" class="headerlink" title="→ API &amp; SPI"></a>→ API &amp; SPI</h4><p>API、API 和 SPI 的关系和区别</p><p>如何定义 SPI、SPI 的实现原理</p><h4 id="→-异常"><a href="#→-异常" class="headerlink" title="→ 异常"></a>→ 异常</h4><p>异常类型、正确处理异常、自定义异常</p><p>Error 和 Exception</p><p>异常链、try-with-resources</p><p>finally 和 return 的执行顺序</p><h4 id="→-时间处理"><a href="#→-时间处理" class="headerlink" title="→ 时间处理"></a>→ 时间处理</h4><p>时区、冬令时和夏令时、时间戳、Java 中时间 API</p><p>格林威治时间、CET,UTC,GMT,CST 几种常见时间的含义和关系</p><p>SimpleDateFormat 的线程安全性问题</p><p>Java 8 中的时间处理</p><p>如何在东八区的计算机上获取美国时间</p><h4 id="→-编码方式"><a href="#→-编码方式" class="headerlink" title="→ 编码方式"></a>→ 编码方式</h4><p>Unicode、有了 Unicode 为啥还需要 UTF-8</p><p>GBK、GB2312、GB18030 之间的区别</p><p>UTF8、UTF16、UTF32 区别</p><p>URL 编解码、Big Endian 和 Little Endian</p><p>如何解决乱码问题</p><h4 id="→-语法糖"><a href="#→-语法糖" class="headerlink" title="→ 语法糖"></a>→ 语法糖</h4><p>Java 中语法糖原理、解语法糖</p><p>语法糖：switch 支持 String 与枚举、泛型、自动装箱与拆箱、方法变长参数、枚举、内部类、条件编译、 断言、数值字面量、for-each、try-with-resource、Lambda 表达式</p><h2 id="阅读源代码"><a href="#阅读源代码" class="headerlink" title="阅读源代码"></a>阅读源代码</h2><p>String、Integer、Long、Enum、</p><p>BigDecimal、ThreadLocal、ClassLoader &amp; URLClassLoader、</p><p>ArrayList &amp; LinkedList、 </p><p>HashMap &amp; LinkedHashMap &amp; TreeMap &amp; CouncurrentHashMap、HashSet &amp; LinkedHashSet &amp; TreeSet</p><h2 id="Java-并发编程"><a href="#Java-并发编程" class="headerlink" title="Java 并发编程"></a>Java 并发编程</h2><h4 id="→-并发与并行"><a href="#→-并发与并行" class="headerlink" title="→ 并发与并行"></a><strong>→ 并发与并行</strong></h4><p>什么是并发、什么是并行</p><p>并发与并行的区别</p><h4 id="→-什么是线程，与进程的区别"><a href="#→-什么是线程，与进程的区别" class="headerlink" title="→ 什么是线程，与进程的区别"></a><strong>→ 什么是线程，与进程的区别</strong></h4><p>线程的实现、线程的状态、优先级、线程调度、创建线程的多种方式、守护线程</p><p>线程与进程的区别</p><h4 id="→-线程池"><a href="#→-线程池" class="headerlink" title="→ 线程池"></a>→ 线程池</h4><p>自己设计线程池、submit() 和 execute()、线程池原理</p><p>为什么不允许使用 Executors 创建线程池</p><h4 id="→-线程安全"><a href="#→-线程安全" class="headerlink" title="→ 线程安全"></a>→ 线程安全</h4><p>死锁、死锁如何排查、线程安全和内存模型的关系</p><h4 id="→-锁"><a href="#→-锁" class="headerlink" title="→ 锁"></a>→ 锁</h4><p>CAS、乐观锁与悲观锁、数据库相关锁机制、分布式锁、偏向锁、轻量级锁、重量级锁、monitor、</p><p>锁优化、锁消除、锁粗化、自旋锁、可重入锁、阻塞锁、死锁</p><h4 id="→-死锁"><a href="#→-死锁" class="headerlink" title="→ 死锁"></a>→ 死锁</h4><p>什么是死锁</p><p>死锁如何解决</p><h4 id="→-synchronized"><a href="#→-synchronized" class="headerlink" title="→ synchronized"></a>→ synchronized</h4><p>synchronized 是如何实现的？</p><p>synchronized 和 lock 之间关系、不使用 synchronized 如何实现一个线程安全的单例</p><p>synchronized 和原子性、可见性和有序性之间的关系</p><h4 id="→-volatile"><a href="#→-volatile" class="headerlink" title="→ volatile"></a>→ volatile</h4><p>happens-before、内存屏障、编译器指令重排和 CPU 指令重</p><p>volatile 的实现原理</p><p>volatile 和原子性、可见性和有序性之间的关系</p><p>有了 symchronized 为什么还需要 volatile</p><h4 id="→-sleep-和-wait"><a href="#→-sleep-和-wait" class="headerlink" title="→ sleep 和 wait"></a><strong>→ sleep 和 wait</strong></h4><h4 id="→-wait-和-notify"><a href="#→-wait-和-notify" class="headerlink" title="→ wait 和 notify"></a><strong>→ wait 和 notify</strong></h4><h4 id="→-notify-和-notifyAll"><a href="#→-notify-和-notifyAll" class="headerlink" title="→ notify 和 notifyAll"></a><strong>→ notify 和 notifyAll</strong></h4><h4 id="→-ThreadLocal"><a href="#→-ThreadLocal" class="headerlink" title="→ ThreadLocal"></a><strong>→ ThreadLocal</strong></h4><h4 id="→-写一个死锁的程序"><a href="#→-写一个死锁的程序" class="headerlink" title="→ 写一个死锁的程序"></a><strong>→ 写一个死锁的程序</strong></h4><h4 id="→-写代码来解决生产者消费者问题"><a href="#→-写代码来解决生产者消费者问题" class="headerlink" title="→ 写代码来解决生产者消费者问题"></a><strong>→ 写代码来解决生产者消费者问题</strong></h4><h4 id="→-并方包"><a href="#→-并方包" class="headerlink" title="→ 并方包"></a><strong>→ 并方包</strong></h4><p>Thread、Runnable、Callable、ReentrantLock、ReentrantReadWriteLock、Atomic*、Semaphore、CountDownLatch、ConcurrentHashMap、Executors</p><h1 id="二、底层篇"><a href="#二、底层篇" class="headerlink" title="二、底层篇"></a>二、底层篇</h1><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><h4 id="→-JVM-内存结构"><a href="#→-JVM-内存结构" class="headerlink" title="→ JVM 内存结构"></a>→ JVM 内存结构</h4><p>class 文件格式、运行时数据区：堆、栈、方法区、直接内存、运行时常量池、</p><p>堆和栈区别</p><p>Java 中的对象一定在堆上分配吗？</p><h4 id="→-Java-内存模型"><a href="#→-Java-内存模型" class="headerlink" title="→ Java 内存模型"></a><strong>→ Java 内存模型</strong></h4><p>计算机内存模型、缓存一致性、MESI 协议</p><p>可见性、原子性、顺序性、happens-before、</p><p>内存屏障、synchronized、volatile、final、锁</p><h4 id="→-垃圾回收"><a href="#→-垃圾回收" class="headerlink" title="→ 垃圾回收"></a>→ 垃圾回收</h4><p>GC 算法：标记清除、引用计数、复制、标记压缩、分代回收、增量式回收</p><p>GC 参数、对象存活的判定、垃圾收集器（CMS、G1、ZGC、Epsilon）</p><h4 id="→-JVM-参数及调优"><a href="#→-JVM-参数及调优" class="headerlink" title="→ JVM 参数及调优"></a>→ JVM 参数及调优</h4><p>-Xmx、-Xmn、-Xms、Xss、-XX:SurvivorRatio、</p><p>-XX:PermSize、-XX:MaxPermSize、-XX:MaxTenuringThreshold</p><h4 id="→-Java-对象模型"><a href="#→-Java-对象模型" class="headerlink" title="→ Java 对象模型"></a>→ Java 对象模型</h4><p>oop-klass、对象头</p><h4 id="→-HotSpot"><a href="#→-HotSpot" class="headerlink" title="→ HotSpot"></a>→ HotSpot</h4><p>即时编译器、编译优化</p><h4 id="→-虚拟机性能监控与故障处理工具"><a href="#→-虚拟机性能监控与故障处理工具" class="headerlink" title="→ 虚拟机性能监控与故障处理工具"></a>→ 虚拟机性能监控与故障处理工具</h4><p>jps, jstack, jmap, jstat, jconsole, jinfo, jhat, javap, btrace, TProfiler</p><p>Arthas</p><h2 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h2><p>classLoader、类加载过程、双亲委派（破坏双亲委派）、模块化（jboss modules、osgi、jigsaw）</p><h2 id="编译与反编译"><a href="#编译与反编译" class="headerlink" title="编译与反编译"></a>编译与反编译</h2><p>什么是编译（前端编译、后端编译）、什么是反编译</p><p>JIT、JIT 优化（逃逸分析、栈上分配、标量替换、锁优化）</p><p>编译工具：javac</p><p>反编译工具：javap 、jad 、CRF</p><h1 id="三、进阶篇"><a href="#三、进阶篇" class="headerlink" title="三、进阶篇"></a>三、进阶篇</h1><h2 id="Java-底层知识"><a href="#Java-底层知识" class="headerlink" title="Java 底层知识"></a>Java 底层知识</h2><h4 id="→-字节码、class-文件格式"><a href="#→-字节码、class-文件格式" class="headerlink" title="→ 字节码、class 文件格式"></a><strong>→ 字节码、class 文件格式</strong></h4><h4 id="→-CPU-缓存，L1，L2，L3-和伪共享"><a href="#→-CPU-缓存，L1，L2，L3-和伪共享" class="headerlink" title="→ CPU 缓存，L1，L2，L3 和伪共享"></a><strong>→ CPU 缓存，L1，L2，L3 和伪共享</strong></h4><h4 id="→-尾递归"><a href="#→-尾递归" class="headerlink" title="→ 尾递归"></a><strong>→ 尾递归</strong></h4><h4 id="→-位运算"><a href="#→-位运算" class="headerlink" title="→ 位运算"></a><strong>→ 位运算</strong></h4><p>用位运算实现加、减、乘、除、取余</p><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>设计模式的六大原则：</p><p>开闭原则（Open Close Principle）、里氏代换原则（Liskov Substitution Principle）、依赖倒转原则（Dependence Inversion Principle）</p><p>接口隔离原则（Interface Segregation Principle）、迪米特法则（最少知道原则）（Demeter Principle）、合成复用原则（Composite Reuse Principle）</p><p><strong>→ 了解 23 种设计模式</strong></p><p>创建型模式：单例模式、抽象工厂模式、建造者模式、工厂模式、原型模式。</p><p>结构型模式：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。</p><p>行为型模式：模版方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式（Interpreter 模式）、状态模式、策略模式、职责链模式(责任链模式)、访问者模式。</p><h4 id="→-会使用常用设计模式"><a href="#→-会使用常用设计模式" class="headerlink" title="→ 会使用常用设计模式"></a><strong>→ 会使用常用设计模式</strong></h4><p>单例的七种写法：懒汉——线程不安全、懒汉——线程安全、饿汉、饿汉——变种、静态内部类、枚举、双重校验锁</p><p>工厂模式、适配器模式、策略模式、模板方法模式、观察者模式、外观模式、代理模式等必会</p><h4 id="→-不用-synchronized-和-lock，实现线程安全的单例模式"><a href="#→-不用-synchronized-和-lock，实现线程安全的单例模式" class="headerlink" title="→ 不用 synchronized 和 lock，实现线程安全的单例模式"></a><strong>→</strong> <strong>不用 synchronized 和 lock，实现线程安全的单例模式</strong></h4><h4 id="→-实现-AOP"><a href="#→-实现-AOP" class="headerlink" title="→ 实现 AOP"></a><strong>→ 实现 AOP</strong></h4><h4 id="→-实现-IOC"><a href="#→-实现-IOC" class="headerlink" title="→ 实现 IOC"></a><strong>→ 实现 IOC</strong></h4><h4 id="→-nio-和-reactor-设计模式"><a href="#→-nio-和-reactor-设计模式" class="headerlink" title="→ nio 和 reactor 设计模式"></a><strong>→ nio 和 reactor 设计模式</strong></h4><h2 id="网络编程知识"><a href="#网络编程知识" class="headerlink" title="网络编程知识"></a>网络编程知识</h2><p><strong>→ tcp、udp、http、https 等常用协议</strong></p><p>三次握手与四次关闭、流量控制和拥塞控制、OSI 七层模型、tcp 粘包与拆包</p><h4 id="→-http-1-0-http-1-1-http-2-之前的区别"><a href="#→-http-1-0-http-1-1-http-2-之前的区别" class="headerlink" title="→ http/1.0 http/1.1 http/2 之前的区别"></a><strong>→ http/1.0 http/1.1 http/2 之前的区别</strong></h4><p>http 中 get 和 post 区别</p><p>常见的 web 请求返回的状态码</p><p>404、302、301、500分别代表什么</p><h4 id="→-http-3"><a href="#→-http-3" class="headerlink" title="→ http/3"></a><strong>→ http/3</strong></h4><h4 id="→-Java-RMI，Socket，HttpClient"><a href="#→-Java-RMI，Socket，HttpClient" class="headerlink" title="→ Java RMI，Socket，HttpClient"></a><strong>→ Java RMI，Socket，HttpClient</strong></h4><h4 id="→-cookie-与-session"><a href="#→-cookie-与-session" class="headerlink" title="→ cookie 与 session"></a><strong>→ cookie 与 session</strong></h4><p>cookie 被禁用，如何实现 session</p><h4 id="→-用-Java-写一个简单的静态文件的-HTTP-服务器"><a href="#→-用-Java-写一个简单的静态文件的-HTTP-服务器" class="headerlink" title="→ 用 Java 写一个简单的静态文件的 HTTP 服务器"></a><strong>→ 用 Java 写一个简单的静态文件的 HTTP 服务器</strong></h4><h4 id="→-了解-nginx-和-apache-服务器的特性并搭建一个对应的服务器"><a href="#→-了解-nginx-和-apache-服务器的特性并搭建一个对应的服务器" class="headerlink" title="→ 了解 nginx 和 apache 服务器的特性并搭建一个对应的服务器"></a><strong>→ 了解 nginx 和 apache 服务器的特性并搭建一个对应的服务器</strong></h4><h4 id="→-用-Java-实现-FTP、SMTP-协议"><a href="#→-用-Java-实现-FTP、SMTP-协议" class="headerlink" title="→ 用 Java 实现 FTP、SMTP 协议"></a><strong>→ 用 Java 实现 FTP、SMTP 协议</strong></h4><h4 id="→-进程间通讯的方式"><a href="#→-进程间通讯的方式" class="headerlink" title="→ 进程间通讯的方式"></a><strong>→ 进程间通讯的方式</strong></h4><h4 id="→-什么是-CDN？如果实现？"><a href="#→-什么是-CDN？如果实现？" class="headerlink" title="→ 什么是 CDN？如果实现？"></a><strong>→ 什么是 CDN？如果实现？</strong></h4><h4 id="→-DNS"><a href="#→-DNS" class="headerlink" title="→ DNS"></a><strong>→ DNS</strong></h4><h4 id="什么是-DNS-、记录类型-A-记录、CNAME-记录、AAAA-记录等"><a href="#什么是-DNS-、记录类型-A-记录、CNAME-记录、AAAA-记录等" class="headerlink" title="什么是 DNS 、记录类型: A 记录、CNAME 记录、AAAA 记录等"></a>什么是 DNS 、记录类型: A 记录、CNAME 记录、AAAA 记录等</h4><p>域名解析、根域名服务器</p><p>DNS 污染、DNS 劫持、公共 DNS：114 DNS、Google DNS、OpenDNS</p><h4 id="→-反向代理"><a href="#→-反向代理" class="headerlink" title="→ 反向代理"></a><strong>→ 反向代理</strong></h4><p>正向代理、反向代理</p><p>反向代理服务器</p><h2 id="框架知识"><a href="#框架知识" class="headerlink" title="框架知识"></a>框架知识</h2><p><strong>→ Servlet</strong></p><p>生命周期</p><p>线程安全问题</p><p>filter 和 listener</p><p>web.xml 中常用配置及作用</p><h4 id="→-Hibernate"><a href="#→-Hibernate" class="headerlink" title="→ Hibernate"></a><strong>→ Hibernate</strong></h4><p>什么是 OR Mapping</p><h4 id="Hibernate-的懒加载"><a href="#Hibernate-的懒加载" class="headerlink" title="Hibernate 的懒加载"></a>Hibernate 的懒加载</h4><p>Hibernate 的缓存机制</p><p>Hibernate / Ibatis / MyBatis 之间的区别</p><h4 id="→-Spring"><a href="#→-Spring" class="headerlink" title="→ Spring"></a><strong>→ Spring</strong></h4><h4 id="Bean-的初始化"><a href="#Bean-的初始化" class="headerlink" title="Bean 的初始化"></a>Bean 的初始化</h4><h4 id="AOP-原理"><a href="#AOP-原理" class="headerlink" title="AOP 原理"></a>AOP 原理</h4><h4 id="实现-Spring-的IOC"><a href="#实现-Spring-的IOC" class="headerlink" title="实现 Spring 的IOC"></a>实现 Spring 的IOC</h4><h4 id="Spring-四种依赖注入方式"><a href="#Spring-四种依赖注入方式" class="headerlink" title="Spring 四种依赖注入方式"></a>Spring 四种依赖注入方式</h4><h4 id="→-Spring-MVC"><a href="#→-Spring-MVC" class="headerlink" title="→ Spring MVC"></a><strong>→ Spring MVC</strong></h4><p>什么是 MVC</p><p>Spring mvc 与 Struts mvc 的区别</p><h4 id="→-Spring-Boot"><a href="#→-Spring-Boot" class="headerlink" title="→ Spring Boot"></a><strong>→ Spring Boot</strong></h4><p>Spring Boot 2.0、起步依赖、自动配置、</p><p>Spring Boot 的 starter 原理，自己实现一个 starter</p><h4 id="→-Spring-Security"><a href="#→-Spring-Security" class="headerlink" title="→ Spring Security"></a><strong>→ Spring Security</strong></h4><h3 id="→-Spring-Cloud"><a href="#→-Spring-Cloud" class="headerlink" title="→ Spring Cloud"></a><strong>→ Spring Cloud</strong></h3><p>服务发现与注册：Eureka、Zookeeper、Consul</p><p>负载均衡：Feign、Spring Cloud Loadbalance</p><p>服务配置：Spring Cloud Config</p><p>服务限流与熔断：Hystrix</p><p>服务链路追踪：Dapper</p><p>服务网关、安全、消息</p><h2 id="应用服务器知识"><a href="#应用服务器知识" class="headerlink" title="应用服务器知识"></a>应用服务器知识</h2><p><strong>→ JBoss</strong></p><h4 id="→-tomcat"><a href="#→-tomcat" class="headerlink" title="→ tomcat"></a><strong>→ tomcat</strong></h4><h4 id="→-jetty"><a href="#→-jetty" class="headerlink" title="→ jetty"></a><strong>→ jetty</strong></h4><h4 id="→-Weblogic"><a href="#→-Weblogic" class="headerlink" title="→ Weblogic"></a><strong>→ Weblogic</strong></h4><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong>→ git &amp; svn</strong></p><h4 id="→-maven-amp-gradle"><a href="#→-maven-amp-gradle" class="headerlink" title="→ maven &amp; gradle"></a><strong>→ maven &amp; gradle</strong></h4><h4 id="→-Intellij-IDEA"><a href="#→-Intellij-IDEA" class="headerlink" title="→ Intellij IDEA"></a><strong>→ Intellij IDEA</strong></h4><p>常用插件：Maven Helper 、FindBugs-IDEA、阿里巴巴代码规约检测、GsonFormat</p><p>Lombok plugin、.ignore、Mybatis plugin  </p><h1 id="四、高级篇"><a href="#四、高级篇" class="headerlink" title="四、高级篇"></a>四、高级篇</h1><h2 id="新技术"><a href="#新技术" class="headerlink" title="新技术"></a>新技术</h2><p><strong>→ Java 8</strong></p><p>lambda 表达式、Stream API、时间 API</p><h4 id="→-Java-9"><a href="#→-Java-9" class="headerlink" title="→ Java 9"></a><strong>→ Java 9</strong></h4><p>Jigsaw、Jshell、Reactive Streams</p><h4 id="→-Java-10"><a href="#→-Java-10" class="headerlink" title="→ Java 10"></a><strong>→ Java 10</strong></h4><p>局部变量类型推断、G1 的并行 Full GC、ThreadLocal 握手机制</p><h4 id="→-Java-11"><a href="#→-Java-11" class="headerlink" title="→ Java 11"></a><strong>→ Java 11</strong></h4><p>ZGC、Epsilon、增强 var</p><h4 id="→-Spring-5"><a href="#→-Spring-5" class="headerlink" title="→ Spring 5"></a><strong>→ Spring 5</strong></h4><p>响应式编程</p><h4 id="→-Spring-Boot-2-0"><a href="#→-Spring-Boot-2-0" class="headerlink" title="→ Spring Boot 2.0"></a><strong>→ Spring Boot 2.0</strong></h4><h4 id="→-HTTP-2"><a href="#→-HTTP-2" class="headerlink" title="→ HTTP/2"></a><strong>→ HTTP/2</strong></h4><h4 id="→-HTTP-3"><a href="#→-HTTP-3" class="headerlink" title="→ HTTP/3"></a><strong>→ HTTP/3</strong></h4><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><p>使用单例、使用 Future 模式、使用线程池</p><p>选择就绪、减少上下文切换、减少锁粒度、数据压缩、结果缓存</p><h2 id="线上问题分析"><a href="#线上问题分析" class="headerlink" title="线上问题分析"></a>线上问题分析</h2><p><strong>→ dump 获取</strong></p><p>线程 Dump、内存 Dump、gc 情况</p><h4 id="→-dump-分析"><a href="#→-dump-分析" class="headerlink" title="→ dump 分析"></a><strong>→ dump 分析</strong></h4><p>分析死锁、分析内存泄露</p><h4 id="→-dump-分析及获取工具"><a href="#→-dump-分析及获取工具" class="headerlink" title="→ dump 分析及获取工具"></a><strong>→ dump 分析及获取工具</strong></h4><p>jstack、jstat、jmap、jhat、Arthas</p><h4 id="→-自己编写各种-outofmemory，stackoverflow-程序"><a href="#→-自己编写各种-outofmemory，stackoverflow-程序" class="headerlink" title="→ 自己编写各种 outofmemory，stackoverflow 程序"></a><strong>→ 自己编写各种 outofmemory，stackoverflow 程序</strong></h4><p>HeapOutOfMemory、 Young OutOfMemory、</p><p>MethodArea OutOfMemory、ConstantPool OutOfMemory、</p><p>DirectMemory OutOfMemory、Stack OutOfMemory Stack OverFlow</p><h4 id="→-Arthas"><a href="#→-Arthas" class="headerlink" title="→ Arthas"></a><strong>→ Arthas</strong></h4><p>jvm 相关、class/classloader 相关、monitor/watch/trace 相关、</p><p>options、管道、后台异步任务</p><p>文档：<a href="https://alibaba.github.io/arthas/advanced-use.html" target="_blank" rel="noopener">https://alibaba.github.io/arthas/advanced-use.html</a></p><h4 id="→-常见问题解决思路"><a href="#→-常见问题解决思路" class="headerlink" title="→ 常见问题解决思路"></a><strong>→ 常见问题解决思路</strong></h4><p>内存溢出、线程死锁、类加载冲突</p><h4 id="→-使用工具尝试解决以下问题，并写下总结"><a href="#→-使用工具尝试解决以下问题，并写下总结" class="headerlink" title="→ 使用工具尝试解决以下问题，并写下总结"></a><strong>→ 使用工具尝试解决以下问题，并写下总结</strong></h4><p>当一个 Java 程序响应很慢时如何查找问题</p><p>当一个 Java 程序频繁 FullGC 时如何解决问题</p><p>如何查看垃圾回收日志</p><p>当一个 Java 应用发生 OutOfMemory 时该如何解决</p><p>如何判断是否出现死锁</p><p>如何判断是否存在内存泄露</p><p>使用 Arthas 快速排查 Spring Boot 应用404/401问题</p><p>使用 Arthas 排查线上应用日志打满问题</p><p>利用 Arthas 排查 Spring Boot 应用 NoSuchMethodError</p><h2 id="编译原理知识"><a href="#编译原理知识" class="headerlink" title="编译原理知识"></a>编译原理知识</h2><p><strong>→ 编译与反编译</strong></p><h4 id="→-Java-代码的编译与反编译"><a href="#→-Java-代码的编译与反编译" class="headerlink" title="→ Java 代码的编译与反编译"></a><strong>→ Java 代码的编译与反编译</strong></h4><h4 id="→-Java-的反编译工具"><a href="#→-Java-的反编译工具" class="headerlink" title="→ Java 的反编译工具"></a><strong>→ Java 的反编译工具</strong></h4><p>javap 、jad 、CRF</p><h4 id="→-即时编译器"><a href="#→-即时编译器" class="headerlink" title="→ 即时编译器"></a><strong>→ 即时编译器</strong></h4><h4 id="→-编译过程"><a href="#→-编译过程" class="headerlink" title="→ 编译过程"></a><strong>→ 编译过程</strong></h4><h4 id="词法分析，语法分析（LL-算法，递归下降算法，LR-算法）"><a href="#词法分析，语法分析（LL-算法，递归下降算法，LR-算法）" class="headerlink" title="词法分析，语法分析（LL 算法，递归下降算法，LR 算法）"></a>词法分析，语法分析（LL 算法，递归下降算法，LR 算法）</h4><h4 id="语义分析，运行时环境，中间代码，代码生成，代码优化"><a href="#语义分析，运行时环境，中间代码，代码生成，代码优化" class="headerlink" title="语义分析，运行时环境，中间代码，代码生成，代码优化"></a>语义分析，运行时环境，中间代码，代码生成，代码优化</h4><h2 id="操作系统知识"><a href="#操作系统知识" class="headerlink" title="操作系统知识"></a>操作系统知识</h2><h4 id="→-Linux-的常用命令"><a href="#→-Linux-的常用命令" class="headerlink" title="→ Linux 的常用命令"></a><strong>→ Linux 的常用命令</strong></h4><h4 id="→-进程间通信"><a href="#→-进程间通信" class="headerlink" title="→ 进程间通信"></a><strong>→ 进程间通信</strong></h4><h4 id="→-进程同步"><a href="#→-进程同步" class="headerlink" title="→ 进程同步"></a><strong>→ 进程同步</strong></h4><p>生产者消费者问题、哲学家就餐问题、读者写者问题</p><h4 id="→-缓冲区溢出"><a href="#→-缓冲区溢出" class="headerlink" title="→ 缓冲区溢出"></a><strong>→ 缓冲区溢出</strong></h4><h4 id="→-分段和分页"><a href="#→-分段和分页" class="headerlink" title="→ 分段和分页"></a><strong>→ 分段和分页</strong></h4><h4 id="→-虚拟内存与主存"><a href="#→-虚拟内存与主存" class="headerlink" title="→ 虚拟内存与主存"></a><strong>→ 虚拟内存与主存</strong></h4><h4 id="→-虚拟内存管理"><a href="#→-虚拟内存管理" class="headerlink" title="→ 虚拟内存管理"></a><strong>→ 虚拟内存管理</strong></h4><h4 id="→-换页算法"><a href="#→-换页算法" class="headerlink" title="→ 换页算法"></a><strong>→ 换页算法</strong></h4><h2 id="数据库知识"><a href="#数据库知识" class="headerlink" title="数据库知识"></a>数据库知识</h2><p><strong>→ MySQL 执行引擎</strong></p><h4 id="→-MySQL-执行计划"><a href="#→-MySQL-执行计划" class="headerlink" title="→ MySQL 执行计划"></a><strong>→ MySQL 执行计划</strong></h4><p>如何查看执行计划，如何根据执行计划进行 SQL 优化</p><h4 id="→-索引"><a href="#→-索引" class="headerlink" title="→ 索引"></a><strong>→ 索引</strong></h4><p>Hash 索引、B 树索引（B+树、和B树、R树）</p><p>普通索引、唯一索引</p><p>覆盖索引、最左前缀原则、索引下推</p><h4 id="→-SQL-优化"><a href="#→-SQL-优化" class="headerlink" title="→ SQL 优化"></a><strong>→ SQL 优化</strong></h4><h4 id="→-数据库事务和隔离级别"><a href="#→-数据库事务和隔离级别" class="headerlink" title="→ 数据库事务和隔离级别"></a><strong>→ 数据库事务和隔离级别</strong></h4><p>事务的隔离级别、事务能不能实现锁的功能</p><h4 id="→-数据库锁"><a href="#→-数据库锁" class="headerlink" title="→ 数据库锁"></a><strong>→ 数据库锁</strong></h4><p>行锁、表锁、使用数据库锁实现乐观锁、</p><h4 id="→-连接"><a href="#→-连接" class="headerlink" title="→ 连接"></a><strong>→ 连接</strong></h4><p>内连接，左连接，右连接</p><h4 id="→-数据库主备搭建"><a href="#→-数据库主备搭建" class="headerlink" title="→ 数据库主备搭建"></a><strong>→ 数据库主备搭建</strong></h4><h4 id="→-binlog"><a href="#→-binlog" class="headerlink" title="→ binlog"></a><strong>→ binlog</strong></h4><h4 id="→-redolog"><a href="#→-redolog" class="headerlink" title="→ redolog"></a><strong>→ redolog</strong></h4><h4 id="→-内存数据库"><a href="#→-内存数据库" class="headerlink" title="→ 内存数据库"></a><strong>→ 内存数据库</strong></h4><p>h2</p><h4 id="→-分库分表"><a href="#→-分库分表" class="headerlink" title="→ 分库分表"></a><strong>→ 分库分表</strong></h4><h4 id="→-读写分离"><a href="#→-读写分离" class="headerlink" title="→ 读写分离"></a><strong>→ 读写分离</strong></h4><h4 id="→-常用的-NoSql-数据库"><a href="#→-常用的-NoSql-数据库" class="headerlink" title="→ 常用的 NoSql 数据库"></a><strong>→ 常用的 NoSql 数据库</strong></h4><p>redis、memcached</p><h4 id="→-分别使用数据库锁、NoSql-实现分布式锁"><a href="#→-分别使用数据库锁、NoSql-实现分布式锁" class="headerlink" title="→ 分别使用数据库锁、NoSql 实现分布式锁"></a><strong>→ 分别使用数据库锁、NoSql 实现分布式锁</strong></h4><h4 id="→-性能调优"><a href="#→-性能调优" class="headerlink" title="→ 性能调优"></a><strong>→ 性能调优</strong></h4><h4 id="→-数据库连接池"><a href="#→-数据库连接池" class="headerlink" title="→ 数据库连接池"></a><strong>→ 数据库连接池</strong></h4><h2 id="数据结构与算法知识"><a href="#数据结构与算法知识" class="headerlink" title="数据结构与算法知识"></a>数据结构与算法知识</h2><p><strong>→ 简单的数据结构</strong></p><p>栈、队列、链表、数组、哈希表、</p><p>栈和队列的相同和不同之处</p><p>栈通常采用的两种存储结构</p><h4 id="→-树"><a href="#→-树" class="headerlink" title="→ 树"></a><strong>→ 树</strong></h4><p>二叉树、字典树、平衡树、排序树、</p><p>B 树、B+ 树、R 树、多路树、红黑树</p><h4 id="→-堆"><a href="#→-堆" class="headerlink" title="→ 堆"></a><strong>→ 堆</strong></h4><p>大根堆、小根堆</p><h4 id="→-图"><a href="#→-图" class="headerlink" title="→ 图"></a><strong>→ 图</strong></h4><p>有向图、无向图、拓扑</p><h4 id="→-排序算法"><a href="#→-排序算法" class="headerlink" title="→ 排序算法"></a><strong>→ 排序算法</strong></h4><p>稳定的排序：冒泡排序、插入排序、鸡尾酒排序、桶排序、计数排序、归并排序、原地归并排序、二叉排序树排序、鸽巢排序、基数排序、侏儒排序、图书馆排序、块排序</p><p>不稳定的排序：选择排序、希尔排序、Clover 排序算法、梳排序、堆排序、平滑排序、快速排序、内省排序、耐心排序</p><p>各种排序算法和时间复杂度 </p><h4 id="→-两个栈实现队列，和两个队列实现栈"><a href="#→-两个栈实现队列，和两个队列实现栈" class="headerlink" title="→ 两个栈实现队列，和两个队列实现栈"></a><strong>→ 两个栈实现队列，和两个队列实现栈</strong></h4><h4 id="→-深度优先和广度优先搜索"><a href="#→-深度优先和广度优先搜索" class="headerlink" title="→ 深度优先和广度优先搜索"></a><strong>→ 深度优先和广度优先搜索</strong></h4><h4 id="→-全排列、贪心算法、KMP-算法、hash-算法"><a href="#→-全排列、贪心算法、KMP-算法、hash-算法" class="headerlink" title="→ 全排列、贪心算法、KMP 算法、hash 算法"></a><strong>→</strong> <strong>全排列、贪心算法、KMP 算法、hash 算法</strong></h4><h4 id="→-海量数据处理"><a href="#→-海量数据处理" class="headerlink" title="→ 海量数据处理"></a><strong>→</strong> <strong>海量数据处理</strong></h4><p>分治，hash 映射，堆排序，双层桶划分，Bloom Filter，bitmap，数据库索引，mapreduce 等。</p><h2 id="大数据知识"><a href="#大数据知识" class="headerlink" title="大数据知识"></a>大数据知识</h2><p><strong>→ Zookeeper</strong></p><p>基本概念、常见用法</p><h4 id="→-Solr，Lucene，ElasticSearch"><a href="#→-Solr，Lucene，ElasticSearch" class="headerlink" title="→ Solr，Lucene，ElasticSearch"></a><strong>→ Solr，Lucene，ElasticSearch</strong></h4><p>在 linux 上部署 solr，solrcloud，新增、删除、查询索引</p><h4 id="→-Storm，流式计算，了解-Spark，S4"><a href="#→-Storm，流式计算，了解-Spark，S4" class="headerlink" title="→ Storm，流式计算，了解 Spark，S4"></a><strong>→ Storm，流式计算，了解 Spark，S4</strong></h4><p>在 linux 上部署 storm，用 zookeeper 做协调，运行 storm hello world，local 和 remote 模式运行调试 storm topology。</p><h4 id="→-Hadoop，离线计算"><a href="#→-Hadoop，离线计算" class="headerlink" title="→ Hadoop，离线计算"></a><strong>→ Hadoop，离线计算</strong></h4><p>HDFS、MapReduce</p><h4 id="→-分布式日志收集-flume，kafka，logstash"><a href="#→-分布式日志收集-flume，kafka，logstash" class="headerlink" title="→ 分布式日志收集 flume，kafka，logstash"></a><strong>→ 分布式日志收集 flume，kafka，logstash</strong></h4><h4 id="→-数据挖掘，mahout"><a href="#→-数据挖掘，mahout" class="headerlink" title="→ 数据挖掘，mahout"></a><strong>→ 数据挖掘，mahout</strong></h4><h2 id="网络安全知识"><a href="#网络安全知识" class="headerlink" title="网络安全知识"></a>网络安全知识</h2><p><strong>→ XSS</strong></p><p>XSS 的防御</p><h4 id="→-CSRF"><a href="#→-CSRF" class="headerlink" title="→ CSRF"></a><strong>→ CSRF</strong></h4><h4 id="→-注入攻击"><a href="#→-注入攻击" class="headerlink" title="→ 注入攻击"></a><strong>→ 注入攻击</strong></h4><p>SQL 注入、XML 注入、CRLF 注入</p><h4 id="→-文件上传漏洞"><a href="#→-文件上传漏洞" class="headerlink" title="→ 文件上传漏洞"></a><strong>→ 文件上传漏洞</strong></h4><h4 id="→-加密与解密"><a href="#→-加密与解密" class="headerlink" title="→ 加密与解密"></a><strong>→ 加密与解密</strong></h4><p>对称加密、非对称加密、哈希算法、加盐哈希算法</p><p>MD5，SHA1、DES、AES、RSA、DSA</p><p>彩虹表</p><h4 id="→-DDOS攻击"><a href="#→-DDOS攻击" class="headerlink" title="→ DDOS攻击"></a><strong>→ DDOS攻击</strong></h4><p>DOS 攻击、DDOS 攻击</p><p>memcached 为什么可以导致 DDos 攻击、什么是反射型 DDoS</p><p>如何通过 Hash 碰撞进行 DOS 攻击</p><h4 id="→-SSL、TLS，HTTPS"><a href="#→-SSL、TLS，HTTPS" class="headerlink" title="→ SSL、TLS，HTTPS"></a><strong>→</strong> <strong>SSL、TLS，HTTPS</strong></h4><h4 id="→-用-openssl-签一个证书部署到-apache-或-nginx"><a href="#→-用-openssl-签一个证书部署到-apache-或-nginx" class="headerlink" title="→ 用 openssl 签一个证书部署到 apache 或 nginx"></a><strong>→ 用 openssl 签一个证书部署到 apache 或 nginx</strong></h4><h1 id="五、架构篇"><a href="#五、架构篇" class="headerlink" title="五、架构篇"></a>五、架构篇</h1><h2 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h2><p>数据一致性、服务治理、服务降级</p><h4 id="→-分布式事务"><a href="#→-分布式事务" class="headerlink" title="→ 分布式事务"></a><strong>→ 分布式事务</strong></h4><p>2PC、3PC、CAP、BASE、 可靠消息最终一致性、最大努力通知、TCC</p><h4 id="→-Dubbo"><a href="#→-Dubbo" class="headerlink" title="→ Dubbo"></a><strong>→ Dubbo</strong></h4><p>服务注册、服务发现，服务治理</p><p><a href="http://dubbo.apache.org/zh-cn/" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/</a></p><h4 id="→-分布式数据库"><a href="#→-分布式数据库" class="headerlink" title="→ 分布式数据库"></a><strong>→ 分布式数据库</strong></h4><p>怎样打造一个分布式数据库、什么时候需要分布式数据库、</p><p>mycat、otter、HBase</p><h4 id="→-分布式文件系统"><a href="#→-分布式文件系统" class="headerlink" title="→ 分布式文件系统"></a><strong>→ 分布式文件系统</strong></h4><p>mfs、fastdfs</p><h4 id="→-分布式缓存"><a href="#→-分布式缓存" class="headerlink" title="→ 分布式缓存"></a><strong>→ 分布式缓存</strong></h4><p>缓存一致性、缓存命中率、缓存冗余</p><h4 id="→-限流降级"><a href="#→-限流降级" class="headerlink" title="→ 限流降级"></a><strong>→ 限流降级</strong></h4><p>Hystrix、Sentinal</p><h4 id="→-算法"><a href="#→-算法" class="headerlink" title="→ 算法"></a><strong>→ 算法</strong></h4><p>共识算法、Raft 协议、Paxos 算法与 Raft 算法、</p><p>拜占庭问题与算法、2PC、3PC</p><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><p>SOA、康威定律</p><h4 id="→-ServiceMesh"><a href="#→-ServiceMesh" class="headerlink" title="→ ServiceMesh"></a><strong>→ ServiceMesh</strong></h4><p>sidecar</p><h4 id="→-Docker-amp-Kubernets"><a href="#→-Docker-amp-Kubernets" class="headerlink" title="→ Docker &amp; Kubernets"></a><strong>→ Docker &amp; Kubernets</strong></h4><h4 id="→-Spring-Boot-1"><a href="#→-Spring-Boot-1" class="headerlink" title="→ Spring Boot"></a><strong>→ Spring Boot</strong></h4><h4 id="→-Spring-Cloud-1"><a href="#→-Spring-Cloud-1" class="headerlink" title="→ Spring Cloud"></a><strong>→ Spring Cloud</strong></h4><h2 id="高并发"><a href="#高并发" class="headerlink" title="高并发"></a>高并发</h2><p><strong>→ 分库分表</strong></p><h4 id="→-CDN-技术"><a href="#→-CDN-技术" class="headerlink" title="→ CDN 技术"></a><strong>→ CDN 技术</strong></h4><h4 id="→-消息队列"><a href="#→-消息队列" class="headerlink" title="→ 消息队列"></a><strong>→ 消息队列</strong></h4><p>ActiveMQ</p><h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><p><strong>→ 监控什么</strong></p><p>CPU、内存、磁盘 I/O、网络 I/O 等</p><h4 id="→-监控手段"><a href="#→-监控手段" class="headerlink" title="→ 监控手段"></a><strong>→ 监控手段</strong></h4><p>进程监控、语义监控、机器资源监控、数据波动</p><h4 id="→-监控数据采集"><a href="#→-监控数据采集" class="headerlink" title="→ 监控数据采集"></a><strong>→ 监控数据采集</strong></h4><p>日志、埋点</p><h4 id="→-Dapper"><a href="#→-Dapper" class="headerlink" title="→ Dapper"></a><strong>→ Dapper</strong></h4><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>tomcat 负载均衡、Nginx 负载均衡</p><p>四层负载均衡、七层负载均衡</p><h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><p>DNS 原理、DNS 的设计</p><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><p>数据一致性</p><h1 id="六、扩展篇"><a href="#六、扩展篇" class="headerlink" title="六、扩展篇"></a>六、扩展篇</h1><h2 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a>云计算</h2><p>IaaS、SaaS、PaaS、虚拟化技术、openstack、Serverlsess</p><h2 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h2><p>Solr、Lucene、Nutch、Elasticsearch</p><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><p>Shiro</p><h2 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h2><p>哈希算法、Merkle 树、公钥密码算法、共识算法、</p><p>Raft 协议、Paxos 算法与 Raft 算法、拜占庭问题与算法、消息认证码与数字签名</p><h4 id="→-比特币"><a href="#→-比特币" class="headerlink" title="→ 比特币"></a><strong>→ 比特币</strong></h4><p>挖矿、共识机制、闪电网络、侧链、热点问题、分叉</p><h4 id="→-以太坊"><a href="#→-以太坊" class="headerlink" title="→ 以太坊"></a><strong>→ 以太坊</strong></h4><h4 id="→-超级账本"><a href="#→-超级账本" class="headerlink" title="→ 超级账本"></a><strong>→ 超级账本</strong></h4><h2 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h2><p>数学基础、机器学习、人工神经网络、深度学习、应用场景。</p><h4 id="→-常用框架"><a href="#→-常用框架" class="headerlink" title="→ 常用框架"></a><strong>→ 常用框架</strong></h4><p>TensorFlow、DeepLearning4J</p><h2 id="其他语言"><a href="#其他语言" class="headerlink" title="其他语言"></a>其他语言</h2><p>Groovy、Python、Go、NodeJs、Swift、Rust</p><h1 id="七、推荐书籍"><a href="#七、推荐书籍" class="headerlink" title="七、推荐书籍"></a>七、推荐书籍</h1><p>《深入理解 Java 虚拟机》<br>《Effective Java》<br>《深入分析 Java Web 技术内幕》<br>《大型网站技术架构》<br>《代码整洁之道》<br>《架构整洁之道》<br>《Head First 设计模式》<br>《maven 实战》<br>《区块链原理、设计与应用》<br>《Java 并发编程实战》<br>《鸟哥的 Linux 私房菜》<br>《从Paxos 到 Zookeeper》<br>《架构即未来》</p>]]></content>
      
      
      <categories>
          
          <category> Java成神之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM内存模型</title>
      <link href="/2019/02/16/JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
      <url>/2019/02/16/JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java 开发有个很基础的问题，虽然我们平时接触的不多，但是了解它却成为 Java 开发的必备基础——这就是 JVM。在 C++ 中我们需要手动申请内存然后释放内存，否则就会出现对象已经不再使用内存却仍被占用的情况。在 Java 中 JVM 内置了垃圾回收的机制，帮助开发者承担对象的创建和释放的工作，极大的减轻了开发的负担。那是不是我们就不需要了解 JVM 了，显然在做一些优化或者深入研究应用性能的时候，JVM 还是起了很关键的作用的。因此本篇就总结性的描述下 JVM 的内存模型与垃圾回收相关的知识。</p></blockquote><p>本文的主要内容如下：</p><ul><li>内存模型</li><li>垃圾回收</li><li>参考文章</li></ul><h1 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h1><p><img src="/images/道/20150720152805765.png" alt></p><h2 id="模型详解"><a href="#模型详解" class="headerlink" title="模型详解"></a>模型详解</h2><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。由于Java 虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储，我们称这类内存区域为<strong>线程私有</strong>的内存。</p><h3 id="Java-虚拟机栈"><a href="#Java-虚拟机栈" class="headerlink" title="Java 虚拟机栈"></a>Java 虚拟机栈</h3><p>Java 虚拟机栈（Java Virtual Machine Stacks）也是<strong>线程私有</strong>的，它的生命周期与线程相同。虚拟机栈描述的是Java 方法执行的内存模型：<strong>每个方法被执行的时候都会同时创建一个栈帧用于存储局部变量表、操作栈、动态链接、方法出口等信息。</strong>每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</p><p>局部变量表存放了编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference 类型，它不等同于对象本身，根据不同的虚拟机实现，它可能是一个指向对象起始地址的引用指针，也可能指向一个代表对象的句柄或者其他与此对象相关的位置）和returnAddress 类型（指向了一条字节码指令的地址）。其中64 位长度的long 和double 类型的数据会占用2 个局部变量空间（Slot），其余的数据类型只占用1 个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。</p><p>在Java 虚拟机规范中，对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError 异常；如果虚拟机栈可以动态扩展（当前大部分的Java 虚拟机都可动态扩展，只不过Java 虚拟机规范中也允许固定长度的虚拟机栈），当扩展时无法申请到足够的内存时会抛出OutOfMemoryError 异常。</p><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java 方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native 方法服务。虚拟机规范中对本地方法栈中的方法使用的语言、使用方式与数据结构并没有强制规定，因此具体的虚拟机可以自由实现它。甚至有的虚拟机（譬如Sun HotSpot 虚拟机）直接就把本地方法栈和虚拟机栈合二为一。与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError 和OutOfMemoryError异常。</p><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>对于大多数应用来说，Java 堆（Java Heap）是Java 虚拟机所管理的内存中最大的一块。Java 堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。如果从内存回收的角度看，由于现在收集器基本都是采用的分代收集算法，所以Java 堆中还可以细分为：新生代和老年代；再细致一点的有Eden 空间、From Survivor 空间、To Survivor 空间等。如果从内存分配的角度看，线程共享的Java 堆中可能划分出多个线程私有的分配缓冲区（Thread LocalAllocation Buffer，TLAB）。不过，无论如何划分，都与存放内容无关，无论哪个区域，存储的都仍然是对象实例，进一步划分的目的是为了更好地回收内存，或者更快地分配内存。</p><p>根据Java 虚拟机规范的规定，Java 堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，既可以实现成固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx和-Xms 控制）。如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError 异常。</p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区（Method Area）与Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机<strong>加载的类信息、常量、静态变量、即时编译器编译后的代码</strong>等数据。虽然Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是与Java 堆区分开来。对于习惯在HotSpot 虚拟机上开发和部署程序的开发者来说，很多人愿意把方法区称为“永久代”（Permanent Generation），本质上两者并不等价，仅仅是因为HotSpot 虚拟机的设计团队选择把GC 分代收集扩展至方法区，或者说使用永久代来实现方法区而已。对于其他虚拟机（如BEA JRockit、IBM J9 等）来说是不存在永久代的概念的。</p><p>Java 虚拟机规范对这个区域的限制非常宽松，除了和Java 堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入了方法区就如永久代的名字一样“永久”存在了。这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载，一般来说这个区域的回收“成绩”比较难以令人满意，尤其是类型的卸载，条件相当苛刻，但是这部分区域的回收确实是有必要的。在Sun 公司的BUG 列表中，曾出现过的若干个严重的BUG 就是由于低版本的HotSpot 虚拟机对此区域未完全回收而导致内存泄漏。根据Java 虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出OutOfMemoryError 异常。</p><h2 id="各部分的功能"><a href="#各部分的功能" class="headerlink" title="各部分的功能"></a>各部分的功能</h2><p>这几个存储区最主要的就是栈区和堆区，那么什么是栈什么是堆呢？说的简单点，栈里面存放的是基本的数据类型和引用，而堆里面则是存放各种对象实例的。<br><img src="/images/道/wh_651x-s_286560225.png" alt></p><p>堆与栈分开设计是为什么呢？</p><ul><li>栈存储了处理逻辑、堆存储了具体的数据，这样隔离设计更为清晰</li><li>堆与栈分离，使得堆可以被多个栈共享。</li><li>栈保存了上下文的信息，因此只能向上增长；而堆是动态分配</li></ul><p>栈的大小可以通过 - XSs 设置，如果不足的话，会引起 java.lang.StackOverflowError 的异常</p><h4 id="栈区"><a href="#栈区" class="headerlink" title="栈区"></a>栈区</h4><p>线程私有，生命周期与线程相同。每个方法执行的时候都会创建一个栈帧（stack frame）用于存放 局部变量表、操作栈、动态链接、方法出口。</p><h4 id="堆-1"><a href="#堆-1" class="headerlink" title="堆"></a>堆</h4><p>存放对象实例，所有的对象的内存都在这里分配。垃圾回收主要就是作用于这里的。</p><ul><li>堆得内存由 - Xms 指定，默认是物理内存的 1/64；最大的内存由 - Xmx 指定，默认是物理内存的 1/4。</li><li>默认空余的堆内存小于 40% 时，就会增大，直到 - Xmx 设置的内存。具体的比例可以由 - XX:MinHeapFreeRatio 指定</li><li>空余的内存大于 70% 时，就会减少内存，直到 - Xms 设置的大小。具体由 - XX:MaxHeapFreeRatio 指定。</li></ul><p>因此一般都建议把这两个参数设置成一样大，可以避免 JVM 在不断调整大小。</p><h4 id="程序计数器-1"><a href="#程序计数器-1" class="headerlink" title="程序计数器"></a>程序计数器</h4><p>这里记录了线程执行的字节码的行号，在分支、循环、跳转、异常、线程恢复等都依赖这个计数器。</p><h4 id="方法区-1"><a href="#方法区-1" class="headerlink" title="方法区"></a>方法区</h4><p>类型信息、字段信息、方法信息、其他信息</p><p>总结</p><table><thead><tr><th>名称</th><th>特征</th><th>作用</th><th>配置</th><th>异常</th></tr></thead><tbody><tr><td>栈区</td><td>线程私有，使用一段连续的内存空间</td><td>存放局部变量表、操作栈、动态链接、方法出口</td><td>-XSs</td><td>StackOverflowError OutOfMemoryError</td></tr><tr><td>堆</td><td>线程共享，生命周期与虚拟机相同</td><td>保存对象实例</td><td>-Xms -Xmx -Xmn</td><td>OutOfMemoryError</td></tr><tr><td>程序计数器</td><td>线程私有、占用内存小</td><td>字节码行号</td><td>无</td><td>无</td></tr><tr><td>方法区</td><td>线程共享</td><td>存储类加载信息、常量、静态变量等</td><td>-XX:PermSize -XX:MaxPermSize</td><td>OutOfMemoryError</td></tr></tbody></table><h1 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h1><h2 id="如何定义垃圾"><a href="#如何定义垃圾" class="headerlink" title="如何定义垃圾"></a>如何定义垃圾</h2><p>有两种方式，一种是引用计数（但是无法解决循环引用的问题）；另一种就是可达性分析。</p><p>判断对象可以回收的情况：</p><ul><li>显示的把某个引用置位 NULL 或者指向别的对象</li><li>局部引用指向的对象</li><li>弱引用关联的对象</li></ul><h2 id="垃圾回收的方法"><a href="#垃圾回收的方法" class="headerlink" title="垃圾回收的方法"></a>垃圾回收的方法</h2><h4 id="Mark-Sweep-标记-清除算法"><a href="#Mark-Sweep-标记-清除算法" class="headerlink" title="Mark-Sweep 标记 - 清除算法"></a>Mark-Sweep 标记 - 清除算法</h4><p><img src="/images/道/341412-20170310115901922-1449104761.png" alt></p><p>这种方法优点就是减少停顿时间，但是缺点是会造成内存碎片。</p><h4 id="Copying-复制算法"><a href="#Copying-复制算法" class="headerlink" title="Copying 复制算法"></a>Copying 复制算法</h4><p><img src="/images/道/341412-20170310115901922-1449104762.png" alt></p><p>这种方法不涉及到对象的删除，只是把<strong>标记为可用</strong>的对象从一个地方拷贝到另一个地方，因此适合大量对象回收的场景，比如新生代的回收。</p><h4 id="Mark-Compact-标记-整理算法"><a href="#Mark-Compact-标记-整理算法" class="headerlink" title="Mark-Compact 标记 - 整理算法"></a>Mark-Compact 标记 - 整理算法</h4><p><img src="/images/道/341412-20170310115901922-1449104763.png" alt></p><p>这种方法可以解决内存碎片问题，但是会增加停顿时间。</p><h4 id="Generational-Collection-分代收集"><a href="#Generational-Collection-分代收集" class="headerlink" title="Generational Collection 分代收集"></a>Generational Collection 分代收集</h4><p>最后的这种方法是前面几种的合体，即目前 JVM 主要采取的一种方法，思想就是把 JVM 分成不同的区域。每种区域使用不同的垃圾回收方法。</p><p><img src="/images/道/341412-20170310115901922-1449104764.png" alt></p><p>上面可以看到堆分成两个个区域：</p><ul><li>新生代 (Young Generation)：用于存放新创建的对象，采用复制回收方法，如果在 s0 和 s1 之间复制一定次数后，转移到年老代中。这里的垃圾回收叫做 minor GC;</li><li>年老代 (Old Generation)：这些对象垃圾回收的频率较低，采用的标记整理方法，这里的垃圾回收叫做 major GC。</li></ul><p>这里可以详细的说一下新生代复制回收的算法流程：</p><p>在新生代中，分为三个区：Eden, from survivor, to survior。</p><ul><li>当触发 minor GC 时，会先把 Eden 中存活的对象复制到 to Survivor 中；</li><li>然后再看 from survivor，如果次数达到年老代的标准，就复制到年老代中；如果没有达到则复制到 to survivor 中，如果 to survivor 满了，则复制到年老代中。</li><li>然后调换 from survivor 和 to survivor 的名字，保证每次 to survivor 都是空的等待对象复制到那里的。</li></ul><h2 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h2><p><img src="/images/道/341412-20170310115901922-1449104765.png" alt></p><h4 id="串行收集器-Serial"><a href="#串行收集器-Serial" class="headerlink" title="串行收集器 Serial"></a>串行收集器 Serial</h4><p>这种收集器就是以单线程的方式收集，垃圾回收的时候其他线程也不能工作。<br><img src="/images/道/341412-20170310115901922-1449104766.png" alt></p><h4 id="并行收集器-Parallel"><a href="#并行收集器-Parallel" class="headerlink" title="并行收集器 Parallel"></a>并行收集器 Parallel</h4><p>以多线程的方式进行收集<br><img src="/images/道/341412-20170310115901922-1449104767.png" alt></p><h4 id="并发标记清除收集器-Concurrent-Mark-Sweep-Collector-CMS"><a href="#并发标记清除收集器-Concurrent-Mark-Sweep-Collector-CMS" class="headerlink" title="并发标记清除收集器 Concurrent Mark Sweep Collector, CMS"></a>并发标记清除收集器 Concurrent Mark Sweep Collector, CMS</h4><p>大致的流程为：初始标记 – 并发标记 – 重新标记 – 并发清除</p><p><img src="/images/道/341412-20170310115901922-1449104768.png" alt></p><h4 id="G1-收集器-Garbage-First-Collector"><a href="#G1-收集器-Garbage-First-Collector" class="headerlink" title="G1 收集器 Garbage First Collector"></a>G1 收集器 Garbage First Collector</h4><p>大致的流程为：初始标记 – 并发标记 – 最终标记 – 筛选回收</p><p><img src="/images/道/341412-20170310115901922-1449104769.png" alt></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>JVM 内存模型：<a href="http://developer.51cto.com/art/200911/165015.htm" target="_blank" rel="noopener">http://developer.51cto.com/art/200911/165015.htm</a></li><li>垃圾回收：<a href="http://www.importnew.com/19085.html" target="_blank" rel="noopener">http://www.importnew.com/19085.html</a></li><li>JVM 垃圾回收器：<a href="http://www.cnblogs.com/chengxuyuanzhilu/p/7088316.html" target="_blank" rel="noopener">http://www.cnblogs.com/chengxuyuanzhilu/p/7088316.html</a></li><li>内存模型： <a href="http://blog.csdn.net/u012152619/article/details/46968883" target="_blank" rel="noopener">http://blog.csdn.net/u012152619/article/details/46968883</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM内存模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ详解</title>
      <link href="/2019/02/16/RabbitMQ%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/02/16/RabbitMQ%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>RabbitMQ 即一个消息队列，主要是用来实现应用程序的异步和解耦，同时也能起到消息缓冲，消息分发的作用。</p><p>消息中间件在互联网公司的使用中越来越多，刚才还看到新闻阿里将 RocketMQ 捐献给了 apache，当然了今天的主角还是讲 RabbitMQ。消息中间件最主要的作用是解耦，中间件最标准的用法是生产者生产消息传送到队列，消费者从队列中拿取消息并处理，生产者不用关心是谁来消费，消费者不用关心谁在生产消息，从而达到解耦的目的。在分布式的系统中，消息队列也会被用在很多其它的方面，比如：分布式事务的支持，RPC 的调用等等。</p><p>以前一直使用的是 ActiveMQ，在实际的生产使用中也出现了一些小问题，在网络查阅了很多的资料后，决定尝试使用 RabbitMQ 来替换 ActiveMQ，RabbitMQ 的高可用性、高性能、灵活性等一些特点吸引了我们，查阅了一些资料整理出此文。</p><h2 id="RabbitMQ-介绍"><a href="#RabbitMQ-介绍" class="headerlink" title="RabbitMQ 介绍"></a>RabbitMQ 介绍</h2><p>RabbitMQ 是实现 AMQP（高级消息队列协议）的消息中间件的一种，最初起源于金融系统，用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。RabbitMQ 主要是为了实现系统之间的双向解耦而实现的。当生产者大量产生数据时，消费者无法快速消费，那么需要一个中间层。保存这个数据。</p><p>AMQP，即 Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP 的主要特征是面向消息、队列、路由（包括点对点和发布 / 订阅）、可靠性、安全。</p><p>RabbitMQ 是一个开源的 AMQP 实现，服务器端用 Erlang 语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP 等，支持 AJAX。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。</p><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><p>通常我们谈到队列服务, 会有三个概念： 发消息者、队列、收消息者，RabbitMQ 在这个基本概念之上, 多做了一层抽象, 在发消息者和 队列之间, 加入了交换器 (Exchange). 这样发消息者和队列就没有直接联系, 转而变成发消息者把消息给交换器, 交换器根据调度策略再把消息再给队列。</p><p><img src="/images/消息队列/RabbitMQ01.png" alt></p><ul><li>左侧 P 代表 生产者，也就是往 RabbitMQ 发消息的程序。</li><li>中间即是 RabbitMQ，<em>其中包括了 交换机 和 队列。</em></li><li>右侧 C 代表 消费者，也就是往 RabbitMQ 拿消息的程序。</li></ul><p>那么，<em>其中比较重要的概念有 4 个，分别为：虚拟主机，交换机，队列，和绑定。</em></p><ul><li>虚拟主机：一个虚拟主机持有一组交换机、队列和绑定。为什么需要多个虚拟主机呢？很简单，RabbitMQ 当中，<em>用户只能在虚拟主机的粒度进行权限控制。</em> 因此，如果需要禁止 A 组访问 B 组的交换机 / 队列 / 绑定，必须为 A 和 B 分别创建一个虚拟主机。每一个 RabbitMQ 服务器都有一个默认的虚拟主机 “/”。</li><li>交换机：<em>Exchange 用于转发消息，但是它不会做存储</em> ，如果没有 Queue bind 到 Exchange 的话，它会直接丢弃掉 Producer 发送过来的消息。 这里有一个比较重要的概念：<strong>路由键</strong> 。消息到交换机的时候，交互机会转发到对应的队列中，那么究竟转发到哪个队列，就要根据该路由键。</li><li>绑定：也就是交换机需要和队列相绑定，这其中如上图所示，是多对多的关系。</li></ul><h3 id="交换机-Exchange"><a href="#交换机-Exchange" class="headerlink" title="交换机 (Exchange)"></a>交换机 (Exchange)</h3><p>交换机的功能主要是接收消息并且转发到绑定的队列，交换机不存储消息，在启用 ack 模式后，交换机找不到队列会返回错误。交换机有四种类型：Direct, topic, Headers and Fanout</p><ul><li>Direct：direct 类型的行为是” 先匹配, 再投送”. 即在绑定时设定一个 <strong>routing_key</strong>, 消息的 <strong>routing_key</strong> 匹配时, 才会被交换器投送到绑定的队列中去.</li><li>Topic：按规则转发消息（最灵活）</li><li>Headers：设置 header attribute 参数类型的交换机</li><li>Fanout：转发消息到所有绑定队列</li></ul><p><strong>Direct Exchange</strong><br>Direct Exchange 是 RabbitMQ 默认的交换机模式，也是最简单的模式，根据 key 全文匹配去寻找队列。<br><img src="/images/消息队列/rabbitMq_direct.png" alt></p><p>第一个 X - Q1 就有一个 binding key，名字为 orange； X - Q2 就有 2 个 binding key，名字为 black 和 green。<em>当消息中的 路由键 和 这个 binding key 对应上的时候，那么就知道了该消息去到哪一个队列中。</em></p><p>Ps：为什么 X 到 Q2 要有 black，green，2 个 binding key 呢，一个不就行了吗？ - 这个主要是因为可能又有 Q3，而 Q3 只接受 black 的信息，而 Q2 不仅接受 black 的信息，还接受 green 的信息。</p><p><strong>Topic Exchange</strong></p><p><em>Topic Exchange 转发消息主要是根据通配符。</em> 在这种交换机下，队列和交换机的绑定会定义一种路由模式，那么，通配符就要在这种路由模式和路由键之间匹配后交换机才能转发消息。</p><p>在这种交换机模式下：</p><ul><li>路由键必须是一串字符，用句号（<code>.</code>） 隔开，比如说 agreements.us，或者 agreements.eu.stockholm 等。</li><li>路由模式必须包含一个 星号（<code>*</code>），主要用于匹配路由键指定位置的一个单词，比如说，一个路由模式是这样子：agreements..b.*，那么就只能匹配路由键是这样子的：第一个单词是 agreements，第四个单词是 b。 井号（#）就表示相当于一个或者多个单词，例如一个匹配模式是 agreements.eu.berlin.#，那么，以 agreements.eu.berlin 开头的路由键都是可以的。</li></ul><p>具体代码发送的时候还是一样，第一个参数表示交换机，第二个参数表示 routing key，第三个参数即消息。如下：</p><pre class="line-numbers language-java"><code class="language-java">rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"testTopicExchange"</span><span class="token punctuation">,</span><span class="token string">"key1.a.c.key2"</span><span class="token punctuation">,</span> <span class="token string">" this is  RabbitMQ!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>topic 和 direct 类似, 只是匹配上支持了” 模式”, 在” 点分” 的 routing_key 形式中, 可以使用两个通配符:</p><ul><li><code>*</code>表示一个词.</li><li><code>#</code>表示零个或多个词.</li></ul><p><strong>Headers Exchange</strong></p><p>headers 也是根据规则匹配, 相较于 direct 和 topic 固定地使用 routing_key , headers 则是一个自定义匹配规则的类型. 在队列与交换器绑定时, 会设定一组键值对规则, 消息中也包括一组键值对 (headers 属性), 当这些键值对有一对, 或全部匹配时, 消息被投送到对应队列.</p><p><strong>Fanout Exchange</strong></p><p>Fanout Exchange 消息广播的模式，不管路由键或者是路由模式，<em>会把消息发给绑定给它的全部队列</em>，如果配置了 routing_key 会被忽略。</p><h2 id="springboot-集成-RabbitMQ"><a href="#springboot-集成-RabbitMQ" class="headerlink" title="springboot 集成 RabbitMQ"></a>springboot 集成 RabbitMQ</h2><p>springboot 集成 RabbitMQ 非常简单，如果只是简单的使用配置非常少，springboot 提供了 spring-boot-starter-amqp 项目对消息各种支持。</p><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p>1、配置 pom 包，主要是添加 spring-boot-starter-amqp 的支持</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、配置文件</p><p>配置 rabbitmq 的安装地址、端口以及账户信息</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">Spring-boot-rabbitmq</span><span class="token attr-name">spring.rabbitmq.host</span><span class="token punctuation">=</span><span class="token attr-value">192.168.0.86</span><span class="token attr-name">spring.rabbitmq.port</span><span class="token punctuation">=</span><span class="token attr-value">5672</span><span class="token attr-name">spring.rabbitmq.username</span><span class="token punctuation">=</span><span class="token attr-value">admin</span><span class="token attr-name">spring.rabbitmq.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、队列配置</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、发送者</p><p>rabbitTemplate 是 springboot 提供的默认实现</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloSender</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> AmqpTemplate rabbitTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String context <span class="token operator">=</span> <span class="token string">"hello "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sender : "</span> <span class="token operator">+</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、接收者</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloReceiver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RabbitHandler</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>String hello<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Receiver  : "</span> <span class="token operator">+</span> hello<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、测试</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMqHelloTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> HelloSender helloSender<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        helloSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意，发送者和接收者的 queue name 必须一致，不然不能接收</p></blockquote><h3 id="多对多使用"><a href="#多对多使用" class="headerlink" title="多对多使用"></a>多对多使用</h3><p>一个发送者，N 个接收者或者 N 个发送者和 N 个接收者会出现什么情况呢？</p><p><strong>一对多发送</strong><br>对上面的代码进行了小改造, 接收端注册了两个 Receiver,Receiver1 和 Receiver2，发送端加入参数计数，接收端打印接收到的参数，下面是测试代码，发送一百条消息，来观察两个接收端的执行效果</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">oneToMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        neoSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><pre class="line-numbers language-basic"><code class="language-basic">Receiver <span class="token number">1</span><span class="token punctuation">:</span> Spring boot neo queue <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">11</span>Receiver <span class="token number">2</span><span class="token punctuation">:</span> Spring boot neo queue <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">12</span>Receiver <span class="token number">2</span><span class="token punctuation">:</span> Spring boot neo queue <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">14</span>Receiver <span class="token number">1</span><span class="token punctuation">:</span> Spring boot neo queue <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">13</span>Receiver <span class="token number">2</span><span class="token punctuation">:</span> Spring boot neo queue <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">15</span>Receiver <span class="token number">1</span><span class="token punctuation">:</span> Spring boot neo queue <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">16</span>Receiver <span class="token number">1</span><span class="token punctuation">:</span> Spring boot neo queue <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">18</span>Receiver <span class="token number">2</span><span class="token punctuation">:</span> Spring boot neo queue <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">17</span>Receiver <span class="token number">2</span><span class="token punctuation">:</span> Spring boot neo queue <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">19</span>Receiver <span class="token number">1</span><span class="token punctuation">:</span> Spring boot neo queue <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据返回结果得到以下结论</p><blockquote><p>一个发送者，N 个接受者, 经过测试会均匀的将消息发送到 N 个接收者中</p></blockquote><p><strong>多对多发送</strong></p><p>复制了一份发送者，加入标记，在一百个循环中相互交替发送</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">manyToMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            neoSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            neoSender2<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><pre class="line-numbers language-basic"><code class="language-basic">Receiver <span class="token number">1</span><span class="token punctuation">:</span> Spring boot neo queue <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">20</span>Receiver <span class="token number">2</span><span class="token punctuation">:</span> Spring boot neo queue <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">20</span>Receiver <span class="token number">1</span><span class="token punctuation">:</span> Spring boot neo queue <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">21</span>Receiver <span class="token number">2</span><span class="token punctuation">:</span> Spring boot neo queue <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">21</span>Receiver <span class="token number">1</span><span class="token punctuation">:</span> Spring boot neo queue <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">22</span>Receiver <span class="token number">2</span><span class="token punctuation">:</span> Spring boot neo queue <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">22</span>Receiver <span class="token number">1</span><span class="token punctuation">:</span> Spring boot neo queue <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">23</span>Receiver <span class="token number">2</span><span class="token punctuation">:</span> Spring boot neo queue <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">23</span>Receiver <span class="token number">1</span><span class="token punctuation">:</span> Spring boot neo queue <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">24</span>Receiver <span class="token number">2</span><span class="token punctuation">:</span> Spring boot neo queue <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">24</span>Receiver <span class="token number">1</span><span class="token punctuation">:</span> Spring boot neo queue <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">25</span>Receiver <span class="token number">2</span><span class="token punctuation">:</span> Spring boot neo queue <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结论：和一对多一样，接收端仍然会均匀接收到消息</p></blockquote><h3 id="高级使用"><a href="#高级使用" class="headerlink" title="高级使用"></a>高级使用</h3><p><strong>对象的支持</strong></p><p>springboot 以及完美的支持对象的发送和接收，不需要格外的配置。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//发送者</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sender object: "</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"object"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//接收者</span><span class="token annotation punctuation">@RabbitHandler</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Receiver object : "</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><pre class="line-numbers language-basic"><code class="language-basic">Sender object<span class="token punctuation">:</span> User{<span class="token keyword">name</span><span class="token operator">=</span>'neo'<span class="token punctuation">,</span> pass<span class="token operator">=</span>'<span class="token number">123456</span>'}Receiver object <span class="token punctuation">:</span> User{<span class="token keyword">name</span><span class="token operator">=</span>'neo'<span class="token punctuation">,</span> pass<span class="token operator">=</span>'<span class="token number">123456</span>'}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Topic Exchange</strong></p><p>topic 是 RabbitMQ 中最灵活的一种方式，可以根据 routing_key 自由的绑定不同的队列</p><p>首先对 topic 规则配置，这里使用两个队列来测试</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopicRabbitConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">static</span> String message <span class="token operator">=</span> <span class="token string">"topic.message"</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">static</span> String messages <span class="token operator">=</span> <span class="token string">"topic.messages"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">queueMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>TopicRabbitConfig<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">queueMessages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>TopicRabbitConfig<span class="token punctuation">.</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    TopicExchange <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TopicExchange</span><span class="token punctuation">(</span><span class="token string">"exchange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    Binding <span class="token function">bindingExchangeMessage</span><span class="token punctuation">(</span>Queue queueMessage<span class="token punctuation">,</span> TopicExchange exchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queueMessage<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"topic.message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    Binding <span class="token function">bindingExchangeMessages</span><span class="token punctuation">(</span>Queue queueMessages<span class="token punctuation">,</span> TopicExchange exchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queueMessages<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"topic.#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 queueMessages 同时匹配两个队列，queueMessage 只匹配”topic.message” 队列</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String context <span class="token operator">=</span> <span class="token string">"hi, i am message 1"</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sender : "</span> <span class="token operator">+</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"exchange"</span><span class="token punctuation">,</span> <span class="token string">"topic.message"</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String context <span class="token operator">=</span> <span class="token string">"hi, i am messages 2"</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sender : "</span> <span class="token operator">+</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"exchange"</span><span class="token punctuation">,</span> <span class="token string">"topic.messages"</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发送 send1 会匹配到 topic.# 和 topic.message 两个 Receiver 都可以收到消息，发送 send2 只有 topic.# 可以匹配所有只有 Receiver2 监听到消息</p><p><strong>Fanout Exchange</strong></p><p>Fanout 就是我们熟悉的广播模式或者订阅模式，给 Fanout 交换机发送消息，绑定了这个交换机的所有队列都收到这个消息。</p><p>Fanout 相关配置</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FanoutRabbitConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">AMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"fanout.A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">BMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"fanout.B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">CMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"fanout.C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    FanoutExchange <span class="token function">fanoutExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FanoutExchange</span><span class="token punctuation">(</span><span class="token string">"fanoutExchange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    Binding <span class="token function">bindingExchangeA</span><span class="token punctuation">(</span>Queue AMessage<span class="token punctuation">,</span>FanoutExchange fanoutExchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>AMessage<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>fanoutExchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    Binding <span class="token function">bindingExchangeB</span><span class="token punctuation">(</span>Queue BMessage<span class="token punctuation">,</span> FanoutExchange fanoutExchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>BMessage<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>fanoutExchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    Binding <span class="token function">bindingExchangeC</span><span class="token punctuation">(</span>Queue CMessage<span class="token punctuation">,</span> FanoutExchange fanoutExchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>CMessage<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>fanoutExchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用了 A、B、C 三个队列绑定到 Fanout 交换机上面，发送端的 routing_key 写任何字符都会被忽略：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String context <span class="token operator">=</span> <span class="token string">"hi, fanout msg "</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sender : "</span> <span class="token operator">+</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"fanoutExchange"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><pre class="line-numbers language-basic"><code class="language-basic">Sender <span class="token punctuation">:</span> hi<span class="token punctuation">,</span> fanout msg ...fanout Receiver B<span class="token punctuation">:</span> hi<span class="token punctuation">,</span> fanout msg fanout Receiver A  <span class="token punctuation">:</span> hi<span class="token punctuation">,</span> fanout msg fanout Receiver C<span class="token punctuation">:</span> hi<span class="token punctuation">,</span> fanout msg <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果说明，绑定到 fanout 交换机上面的队列都收到了消息</p><p><strong><a href="https://github.com/ityouknow/spring-boot-examples" target="_blank" rel="noopener">示例代码 - github</a></strong></p><p><strong><a href="https://gitee.com/ityouknow/spring-boot-examples" target="_blank" rel="noopener">示例代码 - 码云</a></strong></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.zouyesheng.com/rabbitmq.html" target="_blank" rel="noopener">RabbitMQ 使用参考</a></p><p><a href="https://github.com/401Studio/WeekLearn/issues/2" target="_blank" rel="noopener">RabbitMQ：Spring 集成 RabbitMQ 与其概念，消息持久化，ACK 机制</a></p>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ详解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线上CPU使用率过高问题排查</title>
      <link href="/2019/02/13/%E7%BA%BF%E4%B8%8ACPU%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
      <url>/2019/02/13/%E7%BA%BF%E4%B8%8ACPU%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="1、故障现象"><a href="#1、故障现象" class="headerlink" title="1、故障现象"></a>1、故障现象</h2><p>客服同事反馈平台系统运行缓慢，网页卡顿严重，多次重启系统后问题依然存在，使用 top 命令查看<a href="https://www.baidu.com/s?wd=%E6%9C%8D%E5%8A%A1%E5%99%A8&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="noopener">服务器</a>情况，发现 CPU 占用率过高。</p><h2 id="2、CPU-占用过高问题定位"><a href="#2、CPU-占用过高问题定位" class="headerlink" title="2、CPU 占用过高问题定位"></a>2、CPU 占用过高问题定位</h2><h3 id="2-1、定位问题进程"><a href="#2-1、定位问题进程" class="headerlink" title="2.1、定位问题进程"></a>2.1、定位问题进程</h3><p>使用<code>top</code> 命令查看资源占用情况，发现 pid 为 14063 的进程占用了大量的 CPU 资源，CPU 占用率高达 776.1%，内存占用率也达到了 29.8%</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>ylp@ylp-web-01 ~<span class="token punctuation">]</span>$ <span class="token function">top</span><span class="token function">top</span> - 14:51:10 up 233 days, 11:40,  7 users,  load average: 6.85, 5.62, 3.97Tasks: 192 total,   2 running, 190 sleeping,   0 stopped,   0 zombie%Cpu<span class="token punctuation">(</span>s<span class="token punctuation">)</span>: 97.3 us,  0.3 sy,  0.0 ni,  2.5 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 stKiB Mem <span class="token keyword">:</span> 16268652 total,  5114392 free,  6907028 used,  4247232 buff/cacheKiB Swap:  4063228 total,  3989708 free,    73520 used.  8751512 avail Mem   PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                               14063 ylp       20   0 9260488 4.627g  11976 S 776.1 29.8 117:41.66 java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2、定位问题线程"><a href="#2-2、定位问题线程" class="headerlink" title="2.2、定位问题线程"></a>2.2、定位问题线程</h3><p>使用 <code>ps -mp pid -o THREAD,tid,time</code> 命令查看该进程的线程情况，发现该进程的多个线程占用率很高</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>ylp@ylp-web-01 ~<span class="token punctuation">]</span>$ <span class="token function">ps</span> -mp 14063 -o THREAD,tid,timeUSER     %CPU PRI SCNT WCHAN  USER SYSTEM   TID     TIMEylp       361   -    - -         -      -     - 02:05:58ylp       0.0  19    - futex_    -      - 14063 00:00:00ylp       0.0  19    - poll_s    -      - 14064 00:00:00ylp      44.5  19    - -         -      - 14065 00:15:30ylp      44.5  19    - -         -      - 14066 00:15:30ylp      44.4  19    - -         -      - 14067 00:15:29ylp      44.5  19    - -         -      - 14068 00:15:30ylp      44.5  19    - -         -      - 14069 00:15:30ylp      44.5  19    - -         -      - 14070 00:15:30ylp      44.5  19    - -         -      - 14071 00:15:30ylp      44.6  19    - -         -      - 14072 00:15:32ylp       2.2  19    - futex_    -      - 14073 00:00:46ylp       0.0  19    - futex_    -      - 14074 00:00:00ylp       0.0  19    - futex_    -      - 14075 00:00:00ylp       0.0  19    - futex_    -      - 14076 00:00:00ylp       0.7  19    - futex_    -      - 14077 00:00:15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>TIME 列就是各个 Java 线程耗费的 CPU 时间，</p><p>从输出信息可以看出，CPU 时间最长的是线程 ID 为 14065~14072 之间的线程 CPU 占用率都很高</p><h3 id="2-3、查看问题线程堆栈"><a href="#2-3、查看问题线程堆栈" class="headerlink" title="2.3、查看问题线程堆栈"></a>2.3、查看问题线程堆栈</h3><p>挑选 TID 为 14065 的线程，查看该线程的堆栈情况，先将线程 id 转为 16 进制，使用 <code>printf &quot;%x\n&quot; tid</code> 命令进行转换</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>ylp@ylp-web-01 ~<span class="token punctuation">]</span>$ <span class="token function">printf</span> <span class="token string">"%x\n"</span> 1406536f1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>OK，下一步终于轮到 jstack 上场了，它用来输出进程 14065 的堆栈信息，然后根据线程 ID 的十六进制值 grep，如下：</p><p>再使用 jstack 命令打印线程堆栈信息，命令格式：<code>jstack pid |grep tid -A 30</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>ylp@ylp-web-01 ~<span class="token punctuation">]</span>$ jstack 14063 <span class="token operator">|</span><span class="token function">grep</span> 36f1 -A 30<span class="token string">"GC task thread#0 (ParallelGC)"</span> prio<span class="token operator">=</span>10 tid<span class="token operator">=</span>0x00007fa35001e800 nid<span class="token operator">=</span>0x36f1 runnable <span class="token string">"GC task thread#1 (ParallelGC)"</span> prio<span class="token operator">=</span>10 tid<span class="token operator">=</span>0x00007fa350020800 nid<span class="token operator">=</span>0x36f2 runnable <span class="token string">"GC task thread#2 (ParallelGC)"</span> prio<span class="token operator">=</span>10 tid<span class="token operator">=</span>0x00007fa350022800 nid<span class="token operator">=</span>0x36f3 runnable <span class="token string">"GC task thread#3 (ParallelGC)"</span> prio<span class="token operator">=</span>10 tid<span class="token operator">=</span>0x00007fa350024000 nid<span class="token operator">=</span>0x36f4 runnable <span class="token string">"GC task thread#4 (ParallelGC)"</span> prio<span class="token operator">=</span>10 tid<span class="token operator">=</span>0x00007fa350026000 nid<span class="token operator">=</span>0x36f5 runnable <span class="token string">"GC task thread#5 (ParallelGC)"</span> prio<span class="token operator">=</span>10 tid<span class="token operator">=</span>0x00007fa350028000 nid<span class="token operator">=</span>0x36f6 runnable <span class="token string">"GC task thread#6 (ParallelGC)"</span> prio<span class="token operator">=</span>10 tid<span class="token operator">=</span>0x00007fa350029800 nid<span class="token operator">=</span>0x36f7 runnable <span class="token string">"GC task thread#7 (ParallelGC)"</span> prio<span class="token operator">=</span>10 tid<span class="token operator">=</span>0x00007fa35002b800 nid<span class="token operator">=</span>0x36f8 runnable <span class="token string">"VM Periodic Task Thread"</span> prio<span class="token operator">=</span>10 tid<span class="token operator">=</span>0x00007fa3500a8800 nid<span class="token operator">=</span>0x3700 waiting on condition JNI global references: 392<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从输出信息可以看出，此线程是 JVM 的 gc 线程。此时可以基本确定是内存不足或内存泄露导致 gc 线程持续运行，导致 CPU 占用过高。<br>所以接下来我们要找的内存方面的问题</p><h2 id="3、内存问题定位"><a href="#3、内存问题定位" class="headerlink" title="3、内存问题定位"></a>3、内存问题定位</h2><h3 id="3-1、使用-jstat-gcutil命令查看进程的内存情况"><a href="#3-1、使用-jstat-gcutil命令查看进程的内存情况" class="headerlink" title="3.1、使用 jstat -gcutil命令查看进程的内存情况"></a>3.1、使用 <code>jstat -gcutil</code>命令查看进程的内存情况</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>ylp@ylp-web-01 ~<span class="token punctuation">]</span>$ jstat -gcutil 14063 2000 10  S0     S1     E      O      P     YGC     YGCT    FGC    FGCT     GCT     0.00   0.00 100.00  99.99  26.31     42   21.917   218 1484.830 1506.747  0.00   0.00 100.00  99.99  26.31     42   21.917   218 1484.830 1506.747  0.00   0.00 100.00  99.99  26.31     42   21.917   219 1496.567 1518.484  0.00   0.00 100.00  99.99  26.31     42   21.917   219 1496.567 1518.484  0.00   0.00 100.00  99.99  26.31     42   21.917   219 1496.567 1518.484  0.00   0.00 100.00  99.99  26.31     42   21.917   219 1496.567 1518.484  0.00   0.00 100.00  99.99  26.31     42   21.917   219 1496.567 1518.484  0.00   0.00 100.00  99.99  26.31     42   21.917   220 1505.439 1527.355  0.00   0.00 100.00  99.99  26.31     42   21.917   220 1505.439 1527.355  0.00   0.00 100.00  99.99  26.31     42   21.917   220 1505.439 1527.355<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>jstat -gcutil <pid>: 统计 gc 信息:</pid></p><p><img src="/images/其它/20181027222436315.png" alt></p><p>从输出信息可以看出，Eden 区内存占用 100%，Old 区内存占用 99.99%，Full GC 的次数高达 220 次，并且频繁 Full GC，Full GC 的持续时间也特别长，平均每次 Full GC 耗时 6.8 秒（1505.439/220）。根据这些信息，基本可以确定是程序代码上出现了问题，可能存在不合理创建对象的地方</p><h3 id="3-2、分析堆栈"><a href="#3-2、分析堆栈" class="headerlink" title="3.2、分析堆栈"></a>3.2、分析堆栈</h3><p>使用 <code>jstack</code> 命令查看进程的堆栈情况</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>ylp@ylp-web-01 ~<span class="token punctuation">]</span>$ jstack 14063 <span class="token operator">>></span>jstack.out<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把 jstack.out 文件从服务器拿到本地后，用编辑器查找带有项目目录并且线程状态是 RUNABLE 的相关信息，从图中可以看出 ActivityUtil.java 类的 447 行正在使用 HashMap.put() 方法</p><p><img src="/images/其它/2591074-4e124f0397f14970.png" alt></p><h3 id="3-3、代码定位"><a href="#3-3、代码定位" class="headerlink" title="3.3、代码定位"></a>3.3、代码定位</h3><p>打开项目工程，找到 ActivityUtil 类的 477 行，代码如下：</p><p><img src="/images/其它/2591074-c6cea99c8d1d7f85.png" alt></p><p>找到相关同事了解后，这段代码会从数据库中获取配置，并根据数据库中 remain 的值进行循环，在循环中会一直对 HashMap 进行 put 操作。</p><p>查询数据库中的配置，发现 remain 的数量巨大</p><p><img src="/images/其它/2591074-df3d3331f85e6247.png" alt></p><p>至此，问题定位完毕。</p>]]></content>
      
      
      <categories>
          
          <category> 线上CPU使用率过高问题排查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eureka配置大全</title>
      <link href="/2019/01/28/Eureka%E9%85%8D%E7%BD%AE%E5%A4%A7%E5%85%A8/"/>
      <url>/2019/01/28/Eureka%E9%85%8D%E7%BD%AE%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Eureka客户端配置"><a href="#Eureka客户端配置" class="headerlink" title="Eureka客户端配置"></a>Eureka客户端配置</h2><p>1、RegistryFetchIntervalSeconds</p><p>从 eureka 服务器注册表中获取注册信息的时间间隔（s），默认为 30 秒</p><p>2、InstanceInfoReplicationIntervalSeconds</p><p>复制实例变化信息到 eureka 服务器所需要的时间间隔（s），默认为 30 秒</p><p>3、InitialInstanceInfoReplicationIntervalSeconds</p><p>最初复制实例信息到 eureka 服务器所需的时间（s），默认为 40 秒</p><p>4、EurekaServiceUrlPollIntervalSeconds</p><p>询问 Eureka 服务 url 信息变化的时间间隔（s），默认为 300 秒</p><p>5、ProxyHost</p><p>获取 eureka 服务的代理主机，默认为 null</p><p>6、ProxyProxyPort</p><p>获取 eureka 服务的代理端口, 默认为 null </p><p> 7、ProxyUserName</p><p>获取 eureka 服务的代理用户名，默认为 null</p><p> 8、ProxyPassword</p><p>获取 eureka 服务的代理密码，默认为 null </p><p> 9、GZipContent</p><p> eureka 注册表的内容是否被压缩，默认为 true，并且是在最好的网络流量下被压缩</p><p>10、EurekaServerReadTimeoutSeconds</p><p>eureka 需要超时读取之前需要等待的时间，默认为 8 秒</p><p>11、EurekaServerConnectTimeoutSeconds</p><p>eureka 需要超时连接之前需要等待的时间，默认为 5 秒</p><p>12、BackupRegistryImpl</p><p>获取实现了 eureka 客户端在第一次启动时读取注册表的信息作为回退选项的实现名称</p><p>13、EurekaServerTotalConnections</p><p> eureka 客户端允许所有 eureka 服务器连接的总数目，默认是 200</p><p> 14、EurekaServerTotalConnectionsPerHost</p><p> eureka 客户端允许 eureka 服务器主机连接的总数目，默认是 50</p><p> 15、EurekaServerURLContext</p><p>表示 eureka 注册中心的路径，如果配置为 eureka，则为 <a href="http://x.x.x.x:x/eureka/，在" target="_blank" rel="noopener">http://x.x.x.x:x/eureka/，在</a> eureka 的配置文件中加入此配置表示 eureka 作为客户端向注册中心注册，从而构成 eureka 集群。此配置只有在 eureka 服务器 ip 地址列表是在 DNS 中才会用到，默认为 null</p><p>16、EurekaServerPort</p><p>获取 eureka 服务器的端口，此配置只有在 eureka 服务器 ip 地址列表是在 DNS 中才会用到。默认为 null</p><p>17、EurekaServerDNSName</p><p>获取要查询的 DNS 名称来获得 eureka 服务器，此配置只有在 eureka 服务器 ip 地址列表是在 DNS 中才会用到。默认为 null</p><p>18、UseDnsForFetchingServiceUrls</p><p>eureka 客户端是否应该使用 DNS 机制来获取 eureka 服务器的地址列表，默认为 false</p><p>19、RegisterWithEureka</p><p>实例是否在 eureka 服务器上注册自己的信息以供其他服务发现，默认为 true</p><p>20、PreferSameZoneEureka</p><p>实例是否使用同一 zone 里的 eureka 服务器，默认为 true，理想状态下，eureka 客户端与服务端是在同一 zone 下</p><p>21、AllowRedirects</p><p>服务器是否能够重定向客户端请求到备份服务器。 如果设置为 false，服务器将直接处理请求，如果设置为 true，它可能发送 HTTP 重定向到客户端。默认为 false</p><p>22、LogDeltaDiff</p><p>是否记录 eureka 服务器和客户端之间在注册表的信息方面的差异，默认为 false</p><p>23、DisableDelta(*)</p><p>默认为 false</p><p>24、fetchRegistryForRemoteRegions</p><p>eureka服务注册表信息里的以逗号隔开的地区名单，如果不这样返回这些地区名单，则客户端启动将会出错。默认为 null</p><p>25、Region</p><p>获取实例所在的地区。默认为 us-east-1</p><p>26、AvailabilityZones</p><p>获取实例所在的地区下可用性的区域列表，用逗号隔开。</p><p>27、EurekaServerServiceUrls</p><p>Eureka 服务器的连接，默认为 http：//XXXX：X/eureka/, 但是如果采用 DNS方式获取服务地址，则不需要配置此设置。</p><p>28、FilterOnlyUpInstances（*）</p><p>是否获得处于开启状态的实例的应用程序过滤之后的应用程序。默认为 true</p><p>29、EurekaConnectionIdleTimeoutSeconds</p><p>Eureka 服务的 http 请求关闭之前其响应的时间，默认为 30 秒</p><p>30、FetchRegistry</p><p>此客户端是否获取 eureka 服务器注册表上的注册信息，默认为 true</p><p>31、RegistryRefreshSingleVipAddress</p><p>此客户端只对一个单一的 VIP 注册表的信息感兴趣。默认为 null</p><p>32、HeartbeatExecutorThreadPoolSize(*)</p><p>心跳执行程序线程池的大小, 默认为 5</p><p>33、HeartbeatExecutorExponentialBackOffBound(*)</p><p>心跳执行程序回退相关的属性，是重试延迟的最大倍数值，默认为 10</p><p>34、CacheRefreshExecutorThreadPoolSize(*)</p><p>执行程序缓存刷新线程池的大小，默认为 5</p><p>35、CacheRefreshExecutorExponentialBackOffBound</p><p>执行程序指数回退刷新的相关属性，是重试延迟的最大倍数值，默认为 10</p><p>36、DollarReplacement</p><p>eureka 服务器序列化 / 反序列化的信息中获取 “$” 符号的的替换字符串。默认为 “_-”</p><p>37、EscapeCharReplacement</p><p>eureka 服务器序列化 / 反序列化的信息中获取 “_” 符号的的替换字符串。默认为 “__”</p><p>38、OnDemandUpdateStatusChange（*）</p><p>如果设置为 true, 客户端的状态更新将会点播更新到远程服务器上，默认为 true</p><p>39、EncoderName</p><p>这是一个短暂的编码器的配置，如果最新的编码器是稳定的，则可以去除，默认为 null</p><p>40、DecoderName</p><p>这是一个短暂的解码器的配置，如果最新的解码器是稳定的，则可以去除，默认为 null</p><p>41、ClientDataAccept（*）</p><p>客户端数据接收</p><p>42、Experimental（*）</p><p>当尝试新功能迁移过程时，为了避免配置 API 污染，相应的配置即可投入实验配置部分，默认为 null</p><h2 id="Eureka微服务端配置"><a href="#Eureka微服务端配置" class="headerlink" title="Eureka微服务端配置"></a>Eureka微服务端配置</h2><p>1、InstanceId</p><p>此实例注册到 eureka 服务端的唯一的实例 ID, 其组成为 、<code>${spring.application.name}:${spring.application.instance_id:${random.value}}</code></p><p>2、Appname</p><p>获得在 eureka 服务上注册的应用程序的名字，默认为 unknow</p><p>3、AppGroupName</p><p>获得在 eureka 服务上注册的应用程序组的名字，默认为 unknow</p><p>4、InstanceEnabledOnit（*）</p><p>实例注册到 eureka 服务器时，是否开启通讯，默认为 false</p><p>5、NonSecurePort</p><p>获取该实例应该接收通信的非安全端口。默认为 80</p><p>6、SecurePort</p><p>获取该实例应该接收通信的安全端口，默认为 443</p><p>7、NonSecurePortEnabled</p><p>该实例应该接收通信的非安全端口是否启用，默认为 true</p><p>8、SecurePortEnabled</p><p>该实例应该接收通信的安全端口是否启用，默认为 false</p><p>9、LeaseRenewalIntervalInSeconds</p><p>eureka 客户需要多长时间发送心跳给 eureka 服务器，表明它仍然活着, 默认为 30 秒</p><p>10、LeaseExpirationDurationInSeconds</p><p>Eureka 服务器在接收到实例的最后一次发出的心跳后，需要等待多久才可以将此实例删除，默认为 90 秒</p><p>11、VirtualHostName</p><p>此实例定义的虚拟主机名，其他实例将通过使用虚拟主机名找到该实例。</p><p>12、SecureVirtualHostName</p><p>此实例定义的安全虚拟主机名</p><p>13、ASGName（*）</p><p>与此实例相关联 AWS 自动缩放组名称。此项配置是在 AWS环境专门使用的实例启动，它已被用于流量停用后自动把一个实例退出服务。</p><p>14、HostName</p><p>与此实例相关联的主机名，是其他实例可以用来进行请求的准确名称</p><p>15、MetadataMap(*)</p><p>获取与此实例相关联的元数据 (key,value)。这个信息被发送到 eureka 服务器，其他实例可以使用。</p><p>16、DataCenterInfo（*）</p><p>该实例被部署在数据中心</p><p>17、IpAddress</p><p>获取实例的 ip 地址</p><p>18、StatusPageUrlPath（*）</p><p>获取此实例状态页的 URL 路径，然后构造出主机名，安全端口等，默认为 /info</p><p>19、StatusPageUrl(*)</p><p>获取此实例绝对状态页的 URL 路径，为其他服务提供信息时来找到这个实例的状态的路径，默认为 null</p><p>20、HomePageUrlPath（*）</p><p>获取此实例的相关主页 URL 路径，然后构造出主机名，安全端口等，默认为 /</p><p>21、HomePageUrl(*)</p><p>获取此实例的绝对主页 URL 路径，为其他服务提供信息时使用的路径, 默认为 null</p><p>22、HealthCheckUrlPath</p><p>获取此实例的相对健康检查 URL 路径，默认为 /health</p><p>23、HealthCheckUrl</p><p>获取此实例的绝对健康检查 URL 路径, 默认为 null</p><p>24、SecureHealthCheckUrl</p><p>获取此实例的绝对安全健康检查网页的 URL 路径，默认为 null</p><p>25、DefaultAddressResolutionOrder</p><p>获取实例的网络地址，默认为 []</p><p>26、Namespace</p><p>获取用于查找属性的命名空间，默认为 eureka</p><p>Eureka服务端配置</p><p>1、AWSAccessId</p><p>获取 aws 访问的 id，主要用于弹性 ip 绑定，此配置是用于 aws 上的，默认为 null</p><p>2、AWSSecretKey</p><p>获取 aws 私有秘钥，主要用于弹性 ip 绑定，此配置是用于 aws 上的，默认为 null</p><p>3、EIPBindRebindRetries</p><p>获取服务器尝试绑定到候选的 EIP 的次数，默认为 3</p><p>4、EIPBindingRetryIntervalMsWhenUnbound(*)</p><p>服务器检查 ip 绑定的时间间隔，单位为毫秒，默认为 1 <em> 60 </em> 1000</p><p>5、EIPBindingRetryIntervalMs</p><p>与上面的是同一作用，仅仅是稳定状态检查，默认为 5 <em> 60 </em> 1000</p><p>6、EnableSelfPreservation</p><p>自我保护模式，当出现出现网络分区、eureka 在短时间内丢失过多客户端时，会进入自我保护模式，即一个服务长时间没有发送心跳，eureka 也不会将其删除，默认为 true</p><p>7、RenewalPercentThreshold(*)</p><p><img src="/images/微服务/952935-20170623150643570-1733575926.png" alt></p><p>阈值因子，默认是 0.85，如果阈值比最小值大，则自我保护模式开启</p><p>8、RenewalThresholdUpdateIntervalMs</p><p>阈值更新的时间间隔，单位为毫秒，默认为 15 <em> 60 </em> 1000</p><p>9、PeerEurekaNodesUpdateIntervalMs(*)</p><p>集群里 eureka 节点的变化信息更新的时间间隔，单位为毫秒，默认为 10 <em> 60 </em> 1000</p><p>10、EnableReplicatedRequestCompression</p><p>复制的数据在发送请求时是否被压缩，默认为 false</p><p>11、NumberOfReplicationRetries</p><p>获取集群里服务器尝试复制数据的次数，默认为 5</p><p>12、PeerEurekaStatusRefreshTimeIntervalMs</p><p>服务器节点的状态信息被更新的时间间隔，单位为毫秒，默认为 30 * 1000</p><p>13、WaitTimeInMsWhenSyncEmpty(*)</p><p>在 Eureka 服务器获取不到集群里对等服务器上的实例时，需要等待的时间，单位为毫秒，默认为 1000 <em> 60 </em> 5</p><p>14、PeerNodeConnectTimeoutMs</p><p>连接对等节点服务器复制的超时的时间，单位为毫秒，默认为 200</p><p>15、PeerNodeReadTimeoutMs</p><p>读取对等节点服务器复制的超时的时间，单位为毫秒，默认为 200</p><p>16、PeerNodeTotalConnections</p><p>获取对等节点上 http 连接的总数，默认为 1000</p><p>17、PeerNodeTotalConnectionsPerHost(*)</p><p>获取特定的对等节点上 http 连接的总数，默认为 500</p><p>18、PeerNodeConnectionIdleTimeoutSeconds(*)</p><p>http 连接被清理之后服务器的空闲时间，默认为 30 秒</p><p>19、RetentionTimeInMSInDeltaQueue(*)</p><p>客户端保持增量信息缓存的时间，从而保证不会丢失这些信息，单位为毫秒，默认为 3 <em> 60 </em> 1000</p><p>20、DeltaRetentionTimerIntervalInMs</p><p>清理任务程序被唤醒的时间间隔，清理过期的增量信息，单位为毫秒，默认为 30 * 1000</p><p>21、EvictionIntervalTimerInMs</p><p>过期实例应该启动并运行的时间间隔，单位为毫秒，默认为 60 * 1000</p><p>22、ASGQueryTimeoutMs（*）</p><p>查询 AWS 上 ASG（自动缩放组）信息的超时值，单位为毫秒，默认为 300</p><p>23、ASGUpdateIntervalMs</p><p>从 AWS 上更新 ASG 信息的时间间隔，单位为毫秒，默认为 5 <em> 60 </em> 1000</p><p>24、ASGCacheExpiryTimeoutMs(*)</p><p>缓存 ASG 信息的到期时间，单位为毫秒，默认为 10 <em> 60 </em> 1000</p><p>25、ResponseCacheAutoExpirationInSeconds（*）</p><p>当注册表信息被改变时，则其被保存在缓存中不失效的时间，默认为 180 秒</p><p>26、ResponseCacheUpdateIntervalMs（*）</p><p>客户端的有效负载缓存应该更新的时间间隔，默认为 30 * 1000 毫秒</p><p>27、UseReadOnlyResponseCache（*）</p><p>目前采用的是二级缓存策略，一个是读写高速缓存过期策略，另一个没有过期只有只读缓存，默认为 true，表示只读缓存</p><p>28、DisableDelta（*）</p><p>增量信息是否可以提供给客户端看，默认为 false</p><p>29、MaxIdleThreadInMinutesAgeForStatusReplication（*）</p><p>状态复制线程可以保持存活的空闲时间，默认为 10 分钟</p><p>30、MinThreadsForStatusReplication</p><p>被用于状态复制的线程的最小数目，默认为 1</p><p>31、MaxThreadsForStatusReplication</p><p>被用于状态复制的线程的最大数目，默认为 1</p><p>32、MaxElementsInStatusReplicationPool</p><p>可允许的状态复制池备份复制事件的最大数量，默认为 10000</p><p>33、SyncWhenTimestampDiffers</p><p>当时间变化实例是否跟着同步，默认为 true</p><p>34、RegistrySyncRetries</p><p>当 eureka 服务器启动时尝试去获取集群里其他服务器上的注册信息的次数，默认为 5</p><p>35、RegistrySyncRetryWaitMs</p><p>当 eureka 服务器启动时获取其他服务器的注册信息失败时，会再次尝试获取，期间需要等待的时间，默认为 30 * 1000 毫秒</p><p>36、MaxElementsInPeerReplicationPool（*）</p><p>复制池备份复制事件的最大数量，默认为 10000</p><p>37、MaxIdleThreadAgeInMinutesForPeerReplication（*）</p><p>复制线程可以保持存活的空闲时间，默认为 15 分钟</p><p>38、MinThreadsForPeerReplication（*）</p><p>获取将被用于复制线程的最小数目，默认为 5</p><p>39、MaxThreadsForPeerReplication</p><p>获取将被用于复制线程的最大数目，默认为 20</p><p>40、MaxTimeForReplication（*）</p><p>尝试在丢弃复制事件之前进行复制的时间，默认为 30000 毫秒</p><p>41、PrimeAwsReplicaConnections（*）</p><p>对集群中服务器节点的连接是否应该准备，默认为 true</p><p>42、DisableDeltaForRemoteRegions（*）</p><p>增量信息是否可以提供给客户端或一些远程地区，默认为 false</p><p>43、RemoteRegionConnectTimeoutMs（*）</p><p>连接到对等远程地 eureka 节点的超时时间，默认为 1000 毫秒</p><p>44、RemoteRegionReadTimeoutMs（*）</p><p>获取从远程地区 eureka 节点读取信息的超时时间，默认为 1000 毫秒</p><p>45、RemoteRegionTotalConnections</p><p>获取远程地区对等节点上 http 连接的总数，默认为 1000</p><p>46、RemoteRegionTotalConnectionsPerHost</p><p>获取远程地区特定的对等节点上 http 连接的总数，默认为 500</p><p>47、RemoteRegionConnectionIdleTimeoutSeconds</p><p>http 连接被清理之后远程地区服务器的空闲时间，默认为 30 秒</p><p>48、GZipContentFromRemoteRegion（*）</p><p>eureka 服务器中获取的内容是否在远程地区被压缩，默认为 true</p><p>49、RemoteRegionUrlsWithName</p><p>针对远程地区发现的网址域名的 map</p><p>50、RemoteRegionUrls</p><p>远程地区的 URL 列表</p><p>51、RemoteRegionAppWhitelist（*）</p><p>必须通过远程区域中检索的应用程序的列表</p><p>52、RemoteRegionRegistryFetchInterval</p><p>从远程区域取出该注册表的信息的时间间隔，默认为 30 秒</p><p>53、RemoteRegionFetchThreadPoolSize</p><p>用于执行远程区域注册表请求的线程池的大小，默认为 20</p><p>54、RemoteRegionTrustStore</p><p>用来合格请求远程区域注册表的信任存储文件，默认为空</p><p>55、RemoteRegionTrustStorePassword</p><p>获取偏远地区信任存储文件的密码，默认为 “changeit”</p><p>56、disableTransparentFallbackToOtherRegion(*)</p><p>如果在远程区域本地没有实例运行，对于应用程序回退的旧行为是否被禁用， 默认为 false</p><p>57、BatchReplication(*)</p><p>表示集群节点之间的复制是否为了网络效率而进行批处理，默认为 false</p><p>58、LogIdentityHeaders(*)</p><p>Eureka 服务器是否应该登录 clientAuthHeaders，默认为 true</p><p>59、RateLimiterEnabled</p><p>限流是否应启用或禁用，默认为 false</p><p>60、RateLimiterThrottleStandardClients</p><p>是否对标准客户端进行限流，默认 false</p><p>61、RateLimiterPrivilegedClients（*）</p><p>认证的客户端列表，这里是除了标准的 eureka Java 客户端。</p><p>62、RateLimiterBurstSize（*）</p><p>速率限制的 burst size ，默认为 10，这里用的是令牌桶算法</p><p>63、RateLimiterRegistryFetchAverageRate(*)</p><p>速率限制器用的是令牌桶算法，此配置指定平均执行注册请求速率，默认为 500</p><p>64、RateLimiterFullFetchAverageRate（*）</p><p>速率限制器用的是令牌桶算法，此配置指定平均执行请求速率，默认为 100</p><p>65、ListAutoScalingGroupsRoleName（*）</p><p>用来描述从 AWS 第三账户的自动缩放组中的角色名称，默认为 “ListAutoScalingGroups”</p><p>66、JsonCodecName（*）</p><p>如果没有设置默认的编解码器将使用全 JSON 编解码器，获取的是编码器的类名称</p><p>67、XmlCodecName(*)</p><p>如果没有设置默认的编解码器将使用 xml 编解码器，获取的是编码器的类名称</p><p>68、BindingStrategy(*)</p><p>获取配置绑定 EIP 或 Route53 的策略。</p><p>69、Route53DomainTTL（*）</p><p>用于建立 route53 域的 ttl，默认为 301</p><p>70、Route53BindRebindRetries（*）</p><p>服务器尝试绑定到候选 Route53 域的次数，默认为 3</p><p>71、Route53BindingRetryIntervalMs（*）</p><p>服务器应该检查是否和 Route53 域绑定的时间间隔，默认为 5 <em> 60 </em> 1000 毫秒</p><p>72、Experimental(*)</p><p>当尝试新功能迁移过程时，为了避免配置 API 污染，相应的配置即可投入实验配置部分，默认为 null</p><p>以上是 Eureka 配置项的详细说明，分为 Eureka 客户端配置、Eureka 服务端配置和微服务端配置，一共 100 多项，其中有很多配置参数并不需要我们去修改，使用默认的就好，有些跟我们业务相关的配置参数可根据需要自行设置。</p><h2 id="Eureka配置案例"><a href="#Eureka配置案例" class="headerlink" title="Eureka配置案例"></a>Eureka配置案例</h2><h3 id="开发环境服务实例及时下线"><a href="#开发环境服务实例及时下线" class="headerlink" title="开发环境服务实例及时下线"></a>开发环境服务实例及时下线</h3><h5 id="Eureka自我保护机制"><a href="#Eureka自我保护机制" class="headerlink" title="Eureka自我保护机制"></a><a href="https://www.cnblogs.com/xishuai/p/spring-cloud-eureka-safe.html" target="_blank" rel="noopener">Eureka自我保护机制</a></h5><p>Eureka Server 在运行期间会去统计心跳失败比例在 15 分钟之内是否低于 85%，如果低于 85%，Eureka Server 会将这些实例保护起来，让这些实例不会过期，但是在保护期内如果服务刚好这个服务提供者非正常下线了，此时服务消费者就会拿到一个无效的服务实例，此时会调用失败，对于这个问题需要服务消费者端要有一些容错机制，如重试，断路器等。</p><p>我们在单机测试的时候很容易满足心跳失败比例在 15 分钟之内低于 85%，这个时候就会触发 Eureka 的保护机制，一旦开启了保护机制，则服务注册中心维护的服务实例就不是那么准确了，此时我们可以使用<code>eureka.server.enable-self-preservation=false</code>来关闭保护机制，这样可以确保注册中心中不可用的实例被及时的剔除（<strong>不推荐</strong>）。</p><p>自我保护模式被激活的条件是：在 1 分钟后，<code>Renews (last min) &lt; Renews threshold</code>。</p><p>这两个参数的意思：</p><ul><li><code>Renews threshold</code>：<strong>Eureka Server 期望每分钟收到客户端实例续约的总数</strong>。</li><li><code>Renews (last min)</code>：<strong>Eureka Server 最后 1 分钟收到客户端实例续约的总数</strong>。</li></ul><p>具体的值，我们可以在 Eureka Server 界面可以看到。</p><p>Renews threshold 计算代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">this</span><span class="token punctuation">.</span>expectedNumberOfRenewsPerMin <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>numberOfRenewsPerMinThreshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>expectedNumberOfRenewsPerMin <span class="token operator">*</span> serverConfig<span class="token punctuation">.</span><span class="token function">getRenewalPercentThreshold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解决方式有三种：</p><ul><li>关闭自我保护模式（<code>eureka.server.enable-self-preservation</code>设为<code>false</code>），<strong>不推荐</strong>。</li><li>降低<code>renewalPercentThreshold</code>的比例（<code>eureka.server.renewal-percent-threshold</code>设置为<code>0.5</code>以下，比如<code>0.49</code>），<strong>不推荐</strong>。</li><li>部署多个 Eureka Server 并开启其客户端行为（<code>eureka.client.register-with-eureka</code>不要设为<code>false</code>，默认为<code>true</code>），<strong>推荐</strong>。</li></ul><p>Eureka 的自我保护模式是有意义的，该模式被激活后，它不会从注册列表中剔除因长时间没收到心跳导致租期过期的服务，而是等待修复，直到心跳恢复正常之后，它自动退出自我保护模式。这种模式旨在避免因网络分区故障导致服务不可用的问题。例如，两个客户端实例 C1 和 C2 的连通性是良好的，但是由于网络故障，C2 未能及时向 Eureka 发送心跳续约，这时候 Eureka 不能简单的将 C2 从注册表中剔除。因为如果剔除了，C1 就无法从 Eureka 服务器中获取 C2 注册的服务，但是这时候 C2 服务是可用的。</p><p>所以，Eureka 的自我保护模式最好还是开启它。</p><h5 id="开发环境需要及时快速下线配置"><a href="#开发环境需要及时快速下线配置" class="headerlink" title="开发环境需要及时快速下线配置"></a>开发环境需要及时快速下线配置</h5><ul><li><p>服务端配置</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#心跳时间间隔（秒）</span>    <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">5</span>  <span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#eureka自我保护机制</span>    <span class="token key atrule">enable-self-preservation</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment" spellcheck="true">#删除失效或下线服务间隔 （毫秒），具体删除时间还要加上心跳时间间隔和等待时间间隔</span>    <span class="token key atrule">eviction-interval-timer-in-ms</span><span class="token punctuation">:</span> <span class="token number">1000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>客户端配置</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true">#Eureka客户端向服务端发送心跳的时间间隔（秒）（客户端告诉服务端自己会按照该规则）</span>    <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">3</span>    <span class="token comment" spellcheck="true">##Eureka服务端在收到最后一次心跳之后等待的时间上限（秒），超过则剔除（客户端告诉服务端按照此规则等待自己）</span>    <span class="token key atrule">lease-expiration-duration-in-seconds</span><span class="token punctuation">:</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Eureka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot Starts汇总详解</title>
      <link href="/2019/01/28/Spring-Boot-Starts%E6%A8%A1%E5%9D%97%E4%BE%9D%E8%B5%96%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/01/28/Spring-Boot-Starts%E6%A8%A1%E5%9D%97%E4%BE%9D%E8%B5%96%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Boot-Starters-列表"><a href="#Spring-Boot-Starters-列表" class="headerlink" title="Spring Boot Starters 列表"></a>Spring Boot Starters 列表</h2><p><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters" target="_blank" rel="noopener">spring-boot-starters 模块列表</a></p><table><thead><tr><th>名称</th><th style="text-align:left">描述</th><th style="text-align:left">Pom</th></tr></thead><tbody><tr><td>spring-boot-starter</td><td style="text-align:left">核心 starter，包括自动配置支持，日志和 YAML</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-activemq</td><td style="text-align:left">用于使用 Apache ActiveMQ 实现 JMS 消息</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-activemq/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-amqp</td><td style="text-align:left">用于使用 Spring AMQP 和 Rabbit MQ</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-amqp/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-aop</td><td style="text-align:left">用于使用 Spring AOP 和 AspectJ 实现面向切面编程</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-aop/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-artemis</td><td style="text-align:left">使用 Apache Artemis 实现 JMS 消息</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-artemis/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-batch</td><td style="text-align:left">对 Spring Batch 的支持</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-batch/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-cache</td><td style="text-align:left">用于使用 Spring 框架的缓存支持</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-cache/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-cloud-connectors</td><td style="text-align:left">对 Spring Cloud Connectors 的支持，用于简化云平台下（例如 Cloud Foundry 和 Heroku）服务的连接</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-cloud-connectors/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-data-cassandra</td><td style="text-align:left">用于使用分布式数据库 Cassandra 和 Spring Data Cassandra</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-data-cassandra/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-data-cassandra-reactive</td><td style="text-align:left">用于使用分布式数据库 Cassandra 和 Spring Data Cassandra 的响应式支持</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-starters/spring-boot-starter-data-cassandra-reactive/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-data-couchbase</td><td style="text-align:left">用于使用基于文档的数据库 Couchbase 和 Spring Data Couchbase</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-data-couchbase/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-data-couchbase-reactive</td><td style="text-align:left">用于使用基于文档的数据库 Couchbase 和 Spring Data Couchbase 的响应式支持</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-data-couchbase-reactive/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-data-elasticsearch</td><td style="text-align:left">用于使用 Elasticsearch 搜索，分析引擎和 Spring Data Elasticsearch</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-data-elasticsearch/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-data-jpa</td><td style="text-align:left">用于使用 Hibernate 实现 Spring Data JPA</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-data-jpa/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-data-ldap</td><td style="text-align:left">Spring Boot 对 Spring Data LDAP（轻量级目录访问协议）的支持</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-data-ldap/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-data-mongodb</td><td style="text-align:left">用于使用基于文档的数据库 MongoDB 和 Spring Data MongoDB</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-data-mongodb/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-data-mongodb-reactive</td><td style="text-align:left">用于使用基于文档的数据库 MongoDB 和 Spring Data MongoDB 的响应式支持</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-data-mongodb-reactive/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-data-neo4j</td><td style="text-align:left">用于使用图数据库 Neo4j 和 Spring Data Neo4j</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-data-neo4j/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-data-redis</td><td style="text-align:left">用于使用 Spring Data Redis 和 Jedis 客户端操作键—值数据存储 Redis</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-data-redis/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-data-redis-reactive</td><td style="text-align:left">用于使用 Spring Data Redis 和 Jedis 客户端操作键—值数据存储 Redis 的响应式支持</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-data-redis-reactive/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-data-rest</td><td style="text-align:left">用于使用 Spring Data REST 暴露基于 REST 的 Spring Data 仓库</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-data-rest/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-data-solr</td><td style="text-align:left">通过 Spring Data Solr 使用 Apache Solr 搜索平台</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-data-solr/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-freemarker</td><td style="text-align:left">用于使用 FreeMarker 模板引擎构建 MVC web 应用</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-freemarker/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-groovy-templates</td><td style="text-align:left">用于使用 Groovy 模板引擎构建 MVC web 应用</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-groovy-templates/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-hateoas</td><td style="text-align:left">用于使用 Spring MVC 和 Spring HATEOAS 实现基于超媒体的 RESTful web 应用</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-hateoas/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-integration</td><td style="text-align:left">用于使用 Spring Integration</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-integration/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-jdbc</td><td style="text-align:left">对 JDBC 的支持（使用 Tomcat JDBC 连接池）</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-jdbc/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-jersey</td><td style="text-align:left">用于使用 JAX-RS 和 Jersey 构建 RESTful web 应用，可使用 <a href="http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#spring-boot-starter-web" target="_blank" rel="noopener">spring-boot-starter-web</a> 替代</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-jersey/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-jooq</td><td style="text-align:left">用于使用 JOOQ 访问 SQL 数据库，可使用 <a href="http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#spring-boot-starter-data-jpa" target="_blank" rel="noopener">spring-boot-starter-data-jpa</a> 或 <a href="http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#spring-boot-starter-jdbc" target="_blank" rel="noopener">spring-boot-starter-jdbc</a> 替代</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-jooq/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-json</td><td style="text-align:left">Spring Boot 对 Json 读写支持的组建</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-json/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-jta-atomikos</td><td style="text-align:left">用于使用 Atomikos 实现 JTA 事务</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-jta-atomikos/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-jta-bitronix</td><td style="text-align:left">用于使用 Bitronix 实现 JTA 事务</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-jta-bitronix/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-jta-narayana</td><td style="text-align:left">Spring Boot Narayana JTA Starter</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-jta-narayana/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-mail</td><td style="text-align:left">用于使用 Java Mail 和 Spring 框架 email 发送支持</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-mail/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-mustache</td><td style="text-align:left">用于使用 Mustache 模板引擎构建 MVC web 应用</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-mustache/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-quartz</td><td style="text-align:left">用于定时任务 quartz 的支持</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-quartz/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-security</td><td style="text-align:left">对 Spring Security 的支持</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-security/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-test</td><td style="text-align:left">用于测试 Spring Boot 应用，支持常用测试类库，包括 JUnit, Hamcrest 和 Mockito</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-test/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-thymeleaf</td><td style="text-align:left">用于使用 Thymeleaf 模板引擎构建 MVC web 应用</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-thymeleaf/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-validation</td><td style="text-align:left">用于使用 Hibernate Validator 实现 Java Bean 校验</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-validation/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-web</td><td style="text-align:left">用于使用 Spring MVC 构建 web 应用，包括 RESTful。Tomcat 是默认的内嵌容器</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-web/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-web-services</td><td style="text-align:left">对 Spring Web 服务的支持</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-web-services/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-webflux</td><td style="text-align:left">对 Spring webflux 服务的支持</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-webflux/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-websocket</td><td style="text-align:left">用于使用 Spring 框架的 WebSocket 支持构建 WebSocket 应用</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-websocket/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr></tbody></table><p>Spring Boot 生产级 starters</p><table><thead><tr><th>名称</th><th style="text-align:left">描述</th><th style="text-align:left">Pom</th></tr></thead><tbody><tr><td>spring-boot-starter-actuator</td><td style="text-align:left">用于使用 Spring Boot 的 Actuator，它提供了 production ready 功能来帮助你监控和管理应用程序</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-actuator/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr></tbody></table><p>最后，Spring Boot 还包含一些用于排除或交换某些特定技术方面的 starters：</p><p>Spring Boot 技术性 Starters</p><table><thead><tr><th>名称</th><th style="text-align:left">描述</th><th style="text-align:left">Pom</th></tr></thead><tbody><tr><td>spring-boot-starter-jetty</td><td style="text-align:left">用于使用 Jetty 作为内嵌 servlet 容器，可使用 <a href="http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#spring-boot-starter-tomcat" target="_blank" rel="noopener">spring-boot-starter-tomcat</a> 替代</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-jetty/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-log4j2</td><td style="text-align:left">用于使用 Log4j2 记录日志，可使用 <a href="http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#spring-boot-starter-logging" target="_blank" rel="noopener">spring-boot-starter-logging</a> 代替</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-log4j2/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-logging</td><td style="text-align:left">用于使用 Logback 记录日志，默认的日志 starter</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-logging/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-reactor-netty</td><td style="text-align:left">用于使用 netty 作为响应式内嵌容器</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-reactor-netty/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-tomcat</td><td style="text-align:left">用于使用 Tomcat 作为内嵌 servlet 容器，<a href="http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#spring-boot-starter-web" target="_blank" rel="noopener">spring-boot-starter-web</a> 使用的默认 servlet 容器</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-tomcat/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>spring-boot-starter-undertow</td><td style="text-align:left">用于使用 Undertow 作为内嵌 servlet 容器，可使用 <a href="http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#spring-boot-starter-tomcat" target="_blank" rel="noopener">spring-boot-starter-tomcat</a> 替代</td><td style="text-align:left"><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/spring-boot-starter-undertow/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Spring Boot Starts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZooKeeper介绍</title>
      <link href="/2019/01/28/ZooKeeper%E4%BB%8B%E7%BB%8D/"/>
      <url>/2019/01/28/ZooKeeper%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="一-什么是-ZooKeeper"><a href="#一-什么是-ZooKeeper" class="headerlink" title="一 什么是 ZooKeeper"></a>一 什么是 ZooKeeper</h1><p><strong>ZooKeeper 的由来</strong></p><p><strong>下面这段内容摘自《从 Paxos 到 Zookeeper 》第四章第一节的某段内容，推荐大家阅读以下：</strong></p><blockquote><p>Zookeeper 最早起源于雅虎研究院的一个研究小组。在当时，研究人员发现，在雅虎内部很多大型系统基本都需要依赖一个类似的系统来进行分布式协调，但是这些系统往往都存在分布式单点问题。所以，<strong>雅虎的开发人员就试图开发一个通用的无单点问题的分布式协调框架，以便让开发人员将精力集中在处理业务逻辑上。</strong></p><p>关于 “ZooKeeper” 这个项目的名字，其实也有一段趣闻。在立项初期，考虑到之前内部很多项目都是使用动物的名字来命名的（例如著名的 Pig 项目), 雅虎的工程师希望给这个项目也取一个动物的名字。时任研究院的首席科学家 RaghuRamakrishnan 开玩笑地说：“在这样下去，我们这儿就变成动物园了！”此话一出，大家纷纷表示就叫动物园管理员吧一一一因为各个以动物命名的分布式组件放在一起，<strong>雅虎的整个分布式系统看上去就像一个大型的动物园了，而 Zookeeper 正好要用来进行分布式环境的协调一一于是，Zookeeper 的名字也就由此诞生了。</strong></p></blockquote><p><strong>1.1 ZooKeeper 概览</strong></p><p>ZooKeeper 是一个开源的分布式协调服务，ZooKeeper 框架最初是在 “Yahoo!” 上构建的，用于以简单而稳健的方式访问他们的应用程序。 后来，Apache ZooKeeper 成为 Hadoop，HBase 和其他分布式框架使用的有组织服务的标准。 例如，Apache HBase 使用 ZooKeeper 跟踪分布式数据的状态。<strong>ZooKeeper 的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。</strong></p><blockquote><p><strong>原语：</strong> 操作系统或计算机网络用语范畴。是由若干条指令组成的，用于完成一定功能的一个过程。具有不可分割性 · 即原语的执行必须是连续的，在执行过程中不允许被中断。</p></blockquote><p><strong>ZooKeeper 是一个典型的分布式数据一致性解决方案，分布式应用程序可以基于 ZooKeeper 实现诸如数据发布 / 订阅、负载均衡、命名服务、分布式协调 / 通知、集群管理、Master 选举、分布式锁和分布式队列等功能。</strong></p><p><strong>Zookeeper 一个最常用的使用场景就是用于担任服务生产者和服务消费者的注册中心。</strong> 服务生产者将自己提供的服务注册到 Zookeeper 中心，服务的消费者在进行服务调用的时候先到 Zookeeper 中查找服务，获取到服务生产者的详细信息之后，再去调用服务生产者的内容与数据。如下图所示，在 Dubbo 架构中 Zookeeper 就担任了注册中心这一角色。</p><p><img src="/images/zookeeper/0a3e0527ec7a4dcdbbd5597d20d77fe3.jpg" alt></p><p><strong>1.2 结合个人使用情况的讲一下 ZooKeeper</strong></p><p>在我自己做过的项目中，主要使用到了 ZooKeeper 作为 Dubbo 的注册中心 (Dubbo 官方推荐使用 ZooKeeper 注册中心)。另外在搭建 solr 集群的时候，我使用 ZooKeeper 作为 solr 集群的管理工具。这时，ZooKeeper 主要提供下面几个功能：1、集群管理：容错、负载均衡。2、配置文件的集中管理 3、集群的入口。</p><p>我个人觉得在使用 ZooKeeper 的时候，最好是使用 集群版的 ZooKeeper 而不是单机版的。官网给出的架构图就描述的是一个集群版的 ZooKeeper 。通常 3 台服务器就可以构成一个 ZooKeeper 集群了。</p><p><strong>为什么最好使用奇数台服务器构成 ZooKeeper 集群？</strong></p><p>我们知道在 Zookeeper 中 Leader 选举算法采用了 Zab 协议。Zab 核心思想是当多数 Server 写成功，则任务数据写成功。</p><p>①如果有 3 个 Server，则最多允许 1 个 Server 挂掉。</p><p>②如果有 4 个 Server，则同样最多允许 1 个 Server 挂掉。</p><p>既然 3 个或者 4 个 Server，同样最多允许 1 个 Server 挂掉，那么它们的可靠性是一样的，所以选择奇数个 ZooKeeper Server 即可，这里选择 3 个 Server。12341234</p><h1 id="二-关于-ZooKeeper-的一些重要概念"><a href="#二-关于-ZooKeeper-的一些重要概念" class="headerlink" title="二 关于 ZooKeeper 的一些重要概念"></a>二 关于 ZooKeeper 的一些重要概念</h1><p><strong>2.1 重要概念总结</strong></p><p><strong>● ZooKeeper 本身就是一个分布式程序（只要半数以上节点存活，ZooKeeper 就能正常服务）。</strong></p><p><strong>● 为了保证高可用，最好是以集群形态来部署 ZooKeeper，这样只要集群中大部分机器是可用的（能够容忍一定的机器故障），那么 ZooKeeper 本身仍然是可用的。</strong></p><p><strong>● ZooKeeper 将数据保存在内存中，这也就保证了 高吞吐量和低延迟</strong>（但是内存限制了能够存储的容量不太大，此限制也是保持 znode 中存储的数据量较小的进一步原因）。</p><p><strong>● ZooKeeper 是高性能的。 在 “读” 多于 “写” 的应用程序中尤其地高性能，因为 “写” 会导致所有的服务器间同步状态。</strong>（“读”多于 “写” 是协调服务的典型场景。）</p><p><strong>● ZooKeeper 有临时节点的概念。 当创建临时节点的客户端会话一直保持活动，瞬时节点就一直存在。而当会话终结时，瞬时节点被删除。持久节点是指一旦这个 ZNode 被创建了，除非主动进行 ZNode 的移除操作，否则这个 ZNode 将一直保存在 Zookeeper 上。</strong></p><p><strong>●</strong> ZooKeeper 底层其实只提供了两个功能：<br>​    ①管理（存储、读取）用户程序提交的数据；<br>​    ②为用户程序提交数据节点监听服务。</p><p><strong>下面关于会话（Session）、 Znode、版本、Watcher、ACL 概念的总结都在《从 Paxos 到 Zookeeper 》第四章第一节以及第七章第八节有提到，感兴趣的可以看看！</strong></p><p><strong>2.2 会话（Session）</strong></p><p>Session 指的是 ZooKeeper 服务器与客户端会话。<strong>在 ZooKeeper 中，一个客户端连接是指客户端和服务器之间的一个 TCP 长连接</strong>。客户端启动的时候，首先会与服务器建立一个 TCP 连接，从第一次连接建立开始，客户端会话的生命周期也开始了。<strong>通过这个连接，客户端能够通过心跳检测与服务器保持有效的会话，也能够向 Zookeeper 服务器发送请求并接受响应，同时还能够通过该连接接收来自服务器的 Watch 事件通知。</strong> Session 的 sessionTimeout 值用来设置一个客户端会话的超时时间。当由于服务器压力太大、网络故障或是客户端主动断开连接等各种原因导致客户端连接断开时，<strong>只要在 sessionTimeout 规定的时间内能够重新连接上集群中任意一台服务器，那么之前创建的会话仍然有效。</strong></p><p><strong>在为客户端创建会话之前，服务端首先会为每个客户端都分配一个 sessionID。由于 sessionID 是 Zookeeper 会话的一个重要标识，许多与会话相关的运行机制都是基于这个 sessionID 的，因此，无论是哪台服务器为客户端分配的 sessionID，都务必保证全局唯一。</strong></p><p><strong>2.3 Znode</strong></p><p><strong>在谈到分布式的时候，我们通常说的 “节点 “是指组成集群的每一台机器。然而，在 Zookeeper 中，“节点” 分为两类，第一类同样是指构成集群的机器，我们称之为机器节点；第二类则是指数据模型中的数据单元，我们称之为数据节点一一 ZNode。</strong></p><p>Zookeeper 将所有数据存储在内存中，数据模型是一棵树（Znode Tree)，由斜杠（/）的进行分割的路径，就是一个 Znode，例如 / foo/path1。每个上都会保存自己的数据内容，同时还会保存一系列属性信息。</p><blockquote><p>ZooKeeper有一个分层名称空间，很像分布式文件系统。和文件系统不同的是，  zookeeper的数据存储是是结构化存储，没有文件和目录的概念，文件和目录被抽象 成了节点（node），上图中的每个node称为znode， 每个znode由三个部分组成：</p><ol><li>stat: 描述该znode的版本号、权限等信息。<br></li><li>data:与该znode关联的数据。<br></li><li>children: 该znode下的子节点</li></ol></blockquote><p>每次znode的数据更改时，版本号都会增加。例如，每当客户端检索数据时，它会接收数据的版本。当客户端执行更新或删除时，它必须提供正在更改的znode的数据版本。如果它提供的版本与实际数据的版本不匹配，则更新失败。</p><p><strong>在 Zookeeper 中，node 可以分为持久节点和临时节点两类。所谓持久节点是指一旦这个 ZNode 被创建了，除非主动进行 ZNode 的移除操作，否则这个 ZNode 将一直保存在 Zookeeper 上。而临时节点就不一样了，它的生命周期和客户端会话绑定，一旦客户端会话失效，那么这个客户端创建的所有临时节点都会被移除。</strong>另外，ZooKeeper 还允许用户为每个节点添加一个特殊的属性：<strong>SEQUENTIAL</strong>. 一旦节点被标记上这个属性，那么在这个节点被创建的时候，Zookeeper 会自动在其节点名后面追加上一个整型数字，这个整型数字是一个由父节点维护的自增数字。</p><p><strong>2.4 版本</strong></p><p>在前面我们已经提到，Zookeeper 的每个 ZNode 上都会存储数据，对应于每个 ZNode，Zookeeper 都会为其维护一个叫作 <strong>Stat</strong> 的数据结构，Stat 中记录了这个 ZNode 的三个数据版本，分别是 version（当前 ZNode 的版本）、cversion（当前 ZNode 子节点的版本）和 cversion（当前 ZNode 的 ACL 版本）。</p><p><strong>2.5 Watcher</strong></p><p><strong>Watcher（事件监听器），是 Zookeeper 中的一个很重要的特性。Zookeeper 允许用户在指定节点上注册一些 Watcher，并且在一些特定事件触发的时候，ZooKeeper 服务端会将事件通知到感兴趣的客户端上去，该机制是 Zookeeper 实现分布式协调服务的重要特性。</strong></p><p><strong>2.6 ACL</strong></p><p>Zookeeper 采用 ACL（AccessControlLists）策略来进行权限控制，类似于 UNIX 文件系统的权限控制。Zookeeper 定义了如下 5 种权限。</p><p><img src="/images/zookeeper/ff857235dba54561a41ff49bbea15795.jpg" alt></p><p>其中尤其需要注意的是，CREATE 和 DELETE 这两种权限都是针对子节点的权限控制。</p><h1 id="三-ZooKeeper-特点"><a href="#三-ZooKeeper-特点" class="headerlink" title="三 ZooKeeper 特点"></a><strong>三 ZooKeeper 特点</strong></h1><p><strong>● 顺序一致性：</strong> 从同一客户端发起的事务请求，最终将会严格地按照顺序被应用到 ZooKeeper 中去。</p><p><strong>● 原子性：</strong> 所有事务请求的处理结果在整个集群中所有机器上的应用情况是一致的，也就是说，要么整个集群中所有的机器都成功应用了某一个事务，要么都没有应用。</p><p><strong>● 单一系统映像 ：</strong> 无论客户端连到哪一个 ZooKeeper 服务器上，其看到的服务端数据模型都是一致的。</p><p><strong>● 可靠性：</strong> 一旦一次更改请求被应用，更改的结果就会被持久化，直到被下一次更改覆盖。</p><h1 id="四-ZooKeeper-设计目标"><a href="#四-ZooKeeper-设计目标" class="headerlink" title="四 ZooKeeper 设计目标"></a>四 ZooKeeper 设计目标</h1><p><strong>4.1 简单的数据模型</strong></p><p>ZooKeeper 允许分布式进程通过共享的层次结构命名空间进行相互协调，这与标准文件系统类似。 名称空间由 ZooKeeper 中的数据寄存器组成 - 称为 znode，这些类似于文件和目录。 与为存储设计的典型文件系统不同，ZooKeeper 数据保存在内存中，这意味着 ZooKeeper 可以实现高吞吐量和低延迟。</p><p><img src="/images/zookeeper/13c3e24881a7471cb180590d884568ba.jpg" alt></p><p><strong>4.2 可构建集群</strong></p><p><strong>为了保证高可用，最好是以集群形态来部署 ZooKeeper，这样只要集群中大部分机器是可用的（能够容忍一定的机器故障），那么 zookeeper 本身仍然是可用的。</strong> 客户端在使用 ZooKeeper 时，需要知道集群机器列表，通过与集群中的某一台机器建立 TCP 连接来使用服务，客户端使用这个 TCP 链接来发送请求、获取结果、获取监听事件以及发送心跳包。如果这个连接异常断开了，客户端可以连接到另外的机器上。</p><p><strong>ZooKeeper 官方提供的架构图：</strong></p><p><img src="/images/zookeeper/zkservice.jpg" alt></p><p>上图中每一个 Server 代表一个安装 Zookeeper 服务的服务器。组成 ZooKeeper 服务的服务器都会在内存中维护当前的服务器状态，并且每台服务器之间都互相保持着通信。集群间通过 Zab 协议（Zookeeper Atomic Broadcast）来保持数据的一致性。</p><p><strong>4.3 顺序访问</strong></p><p><strong>对于来自客户端的每个更新请求，ZooKeeper 都会分配一个全局唯一的递增编号，这个编号反应了所有事务操作的先后顺序，应用程序可以使用 ZooKeeper 这个特性来实现更高层次的同步原语。</strong> <strong>这个编号也叫做时间戳——zxid（Zookeeper Transaction Id）</strong></p><p><strong>4.4 高性能</strong></p><p><strong>ZooKeeper 是高性能的。 在 “读” 多于 “写” 的应用程序中尤其地高性能，因为 “写” 会导致所有的服务器间同步状态。（“读”多于 “写” 是协调服务的典型场景。）</strong></p><h1 id="五-ZooKeeper-集群角色介绍"><a href="#五-ZooKeeper-集群角色介绍" class="headerlink" title="五 ZooKeeper 集群角色介绍"></a>五 ZooKeeper 集群角色介绍</h1><p><strong>最典型集群模式： Master/Slave 模式（主备模式）</strong>。在这种模式中，通常 Master 服务器作为主服务器提供写服务，其他的 Slave 服务器从服务器通过异步复制的方式获取 Master 服务器最新的数据提供读服务。</p><p>但是，<strong>在 ZooKeeper 中没有选择传统的 Master/Slave 概念，而是引入了 Leader、Follower 和 Observer 三种角色</strong>。如下图所示</p><p><img src="/images/zookeeper/6102d866d5e14718958b2a0ab193e9ea.jpg" alt></p><p><strong>ZooKeeper 集群中的所有机器通过一个 Leader 选举过程来选定一台称为 “Leader” 的机器，Leader 既可以为客户端提供写服务又能提供读服务。除了 Leader 外，Follower 和 Observer 都只能提供读服务。Follower 和 Observer 唯一的区别在于 Observer 机器不参与 Leader 的选举过程，也不参与写操作的 “过半写成功” 策略，因此 Observer 机器可以在不影响写性能的情况下提升集群的读性能。</strong></p><p><img src="/images/zookeeper/f04752a7eb974518b9221e509f14cc00.jpg" alt></p><h1 id="六-ZooKeeper-amp-ZAB-协议-amp-Paxos-算法"><a href="#六-ZooKeeper-amp-ZAB-协议-amp-Paxos-算法" class="headerlink" title="六 ZooKeeper &amp;ZAB 协议 &amp; Paxos 算法"></a>六 ZooKeeper &amp;ZAB 协议 &amp; Paxos 算法</h1><p><strong>6.1 ZAB 协议 &amp; Paxos 算法</strong></p><p>Paxos 算法应该可以说是 ZooKeeper 的灵魂了。但是，ZooKeeper 并没有完全采用 Paxos 算法 ，而是使用 ZAB 协议作为其保证数据一致性的核心算法。另外，在 ZooKeeper 的官方文档中也指出，ZAB 协议并不像 Paxos 算法那样，是一种通用的分布式一致性算法，它是一种特别为 Zookeeper 设计的崩溃可恢复的原子消息广播算法。</p><p><strong>6.2 ZAB 协议介绍</strong></p><p><strong>ZAB（ZooKeeper Atomic Broadcast 原子广播） 协议是为分布式协调服务 ZooKeeper 专门设计的一种支持崩溃恢复的原子广播协议。 在 ZooKeeper 中，主要依赖 ZAB 协议来实现分布式数据一致性，基于该协议，ZooKeeper 实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。</strong></p><p><strong>6.3 ZAB 协议两种基本的模式：崩溃恢复和消息广播</strong></p><p>ZAB 协议包括两种基本的模式，分别是 <strong>崩溃恢复和消息广播</strong>。当整个服务框架在启动过程中，或是当 Leader 服务器出现网络中断、崩溃退出与重启等异常情况时，ZAB 协议就会进人恢复模式并选举产生新的 Leader 服务器。当选举产生了新的 Leader 服务器，同时集群中已经有过半的机器与该 Leader 服务器完成了状态同步之后，ZAB 协议就会退出恢复模式。其中，<strong>所谓的状态同步是指数据同步，用来保证集群中存在过半的机器能够和 Leader 服务器的数据状态保持一致</strong>。</p><p><strong>当集群中已经有过半的 Follower 服务器完成了和 Leader 服务器的状态同步，那么整个服务框架就可以进人消息广播模式了。</strong> 当一台同样遵守 ZAB 协议的服务器启动后加人到集群中时，如果此时集群中已经存在一个 Leader 服务器在负责进行消息广播，那么新加人的服务器就会自觉地进人数据恢复模式：找到 Leader 所在的服务器，并与其进行数据同步，然后一起参与到消息广播流程中去。正如上文介绍中所说的，ZooKeeper 设计成只允许唯一的一个 Leader 服务器来进行事务请求的处理。Leader 服务器在接收到客户端的事务请求后，会生成对应的事务提案并发起一轮广播协议；而如果集群中的其他机器接收到客户端的事务请求，那么这些非 Leader 服务器会首先将这个事务请求转发给 Leader 服务器。</p><h1 id="七-总结"><a href="#七-总结" class="headerlink" title="七 总结"></a>七 总结</h1><p>通过阅读本文，想必大家已从 <strong>①ZooKeeper 的由来。</strong> -&gt; <strong>②ZooKeeper 到底是什么 。</strong>-&gt; <strong>③ ZooKeeper 的一些重要概念</strong>（会话（Session）、 Znode、版本、Watcher、ACL）-&gt; <strong>④ZooKeeper 的特点。</strong> -&gt; <strong>⑤ZooKeeper 的设计目标。</strong>-&gt; <strong>⑥ ZooKeeper 集群角色介绍</strong> （Leader、Follower 和 Observer 三种角色）-&gt; <strong>⑦ZooKeeper &amp;ZAB 协议 &amp; Paxos 算法。</strong> 这七点了解了 ZooKeeper 。</p>]]></content>
      
      
      <categories>
          
          <category> Zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger的集成和使用</title>
      <link href="/2019/01/24/Swagger%E7%9A%84%E9%9B%86%E6%88%90%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/01/24/Swagger%E7%9A%84%E9%9B%86%E6%88%90%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="手写文档存在的问题"><a href="#手写文档存在的问题" class="headerlink" title="手写文档存在的问题"></a>手写文档存在的问题</h2><ul><li>文档需要更新的时候，需要再次发送一份给前端，也就是文档更新交流不及时。</li><li>接口返回结果不明确</li><li>不能直接在线测试接口，通常需要使用工具，比如：<code>Postman</code></li><li>接口文档太多，不好管理</li></ul><h2 id="使用-Swagger-解决问题"><a href="#使用-Swagger-解决问题" class="headerlink" title="使用 Swagger 解决问题"></a>使用 Swagger 解决问题</h2><p>Swagger 也就是为了解决这个问题，当然也不能说 Swagger 就一定是完美的，当然也有缺点，最明显的就是代码植入性比较强。</p><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><p>增加 Swagger2 所需依赖，<code>pom.xml</code> 配置如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- Swagger2 Begin --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Swagger2 End --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置-Swagger2"><a href="#配置-Swagger2" class="headerlink" title="配置 Swagger2"></a>配置 Swagger2</h3><p>注意：<code>RequestHandlerSelectors.basePackage(&quot;com.funtl.itoken.service.admin.controller&quot;)</code> 为 Controller 包路径，不然生成的文档扫描不到接口</p><p>创建一个名为 <code>Swagger2Config</code> 的 Java 配置类，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>funtl<span class="token punctuation">.</span>itoken<span class="token punctuation">.</span>service<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>ApiInfoBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>PathSelectors<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>RequestHandlerSelectors<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>ApiInfo<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>DocumentationType<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>Docket<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Swagger2Config</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.funtl.itoken.service.admin.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"iToken API 文档"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"iToken API 网关接口，http://www.baidu.com"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">termsOfServiceUrl</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0.0"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启用-Swagger2"><a href="#启用-Swagger2" class="headerlink" title="启用 Swagger2"></a>启用 Swagger2</h3><p>Application 中加上注解 <code>@EnableSwagger2</code> 表示开启 Swagger</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>funtl<span class="token punctuation">.</span>itoken<span class="token punctuation">.</span>service<span class="token punctuation">.</span>admin<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>EnableEurekaClient<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>swagger2<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>EnableSwagger2<span class="token punctuation">;</span><span class="token keyword">import</span> tk<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>MapperScan<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>scanBasePackages <span class="token operator">=</span> <span class="token string">"com.funtl.itoken"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.funtl.itoken.common.mapper"</span><span class="token punctuation">,</span> <span class="token string">"com.funtl.itoken.service.admin.mapper"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceAdminApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ServiceAdminApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-Swagger2"><a href="#使用-Swagger2" class="headerlink" title="使用 Swagger2"></a>使用 Swagger2</h3><p>在 Controller 中增加 Swagger2 相关注解，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 分页查询 * * @param pageNum * @param pageSize * @param tbSysUserJson * @return */</span><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"管理员分页查询"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiImplicitParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"pageNum"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"页码"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token string">"int"</span><span class="token punctuation">,</span> paramType <span class="token operator">=</span> <span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"pageSize"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"笔数"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token string">"int"</span><span class="token punctuation">,</span> paramType <span class="token operator">=</span> <span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"tbSysUserJson"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"管理员对象 JSON 字符串"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> dataTypeClass <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> paramType <span class="token operator">=</span> <span class="token string">"json"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"page/{pageNum}/{pageSize}"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token keyword">public</span> BaseResult <span class="token function">page</span><span class="token punctuation">(</span>        <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">int</span> pageNum<span class="token punctuation">,</span>        <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">,</span>        <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> String tbSysUserJson<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    TbSysUser bSysUser <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bSysUserJson <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        bSysUser <span class="token operator">=</span> MapperUtils<span class="token punctuation">.</span><span class="token function">json2pojo</span><span class="token punctuation">(</span>bSysUserJson<span class="token punctuation">,</span> TbSysUser<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    PageInfo pageInf <span class="token operator">=</span> adminService<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>pageNum<span class="token punctuation">,</span> pageSize<span class="token punctuation">,</span> bSysUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 分页后的结果集</span>    List<span class="token operator">&lt;</span>TbSysUser<span class="token operator">></span> list <span class="token operator">=</span> pageInf<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 封装 Cursor 对象</span>    BaseResult<span class="token punctuation">.</span>Cursor cursor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseResult<span class="token punctuation">.</span>Cursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cursor<span class="token punctuation">.</span><span class="token function">setTotal</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">(</span>pageInf<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cursor<span class="token punctuation">.</span><span class="token function">setOffset</span><span class="token punctuation">(</span>pageInf<span class="token punctuation">.</span><span class="token function">getPageNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cursor<span class="token punctuation">.</span><span class="token function">setLimit</span><span class="token punctuation">(</span>pageInf<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> BaseResult<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> cursor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Swagger-注解说明"><a href="#Swagger-注解说明" class="headerlink" title="Swagger 注解说明"></a>Swagger 注解说明</h3><p>Swagger 通过注解表明该接口会生成文档，包括接口名、请求方法、参数、返回信息的等等。</p><ul><li><code>@Api</code>：修饰整个类，描述 Controller 的作用</li><li><code>@ApiOperation</code>：描述一个类的一个方法，或者说一个接口</li><li><code>@ApiParam</code>：单个参数描述</li><li><code>@ApiModel</code>：用对象来接收参数</li><li><code>@ApiProperty</code>：用对象接收参数时，描述对象的一个字段</li><li><code>@ApiResponse</code>：HTTP 响应其中 1 个描述</li><li><code>@ApiResponses</code>：HTTP 响应整体描述</li><li><code>@ApiIgnore</code>：使用该注解忽略这个 API</li><li><code>@ApiError</code>：发生错误返回的信息</li><li><code>@ApiImplicitParam</code>：一个请求参数</li><li><code>@ApiImplicitParams</code>：多个请求参数</li></ul><h3 id="访问-Swagger2"><a href="#访问-Swagger2" class="headerlink" title="访问 Swagger2"></a>访问 Swagger2</h3><p>访问地址：<a href="http://ip:port/{contentpath}/swagger-ui.html" target="_blank" rel="noopener">http://ip:port/{contentpath}/swagger-ui.html</a></p><p>注意：</p><ul><li>如果项目配置了contentpath需要加上contentpath</li><li>如果有权限控制拦截此请求，也会访问失败</li></ul><h2 id="注解的使用"><a href="#注解的使用" class="headerlink" title="注解的使用"></a>注解的使用</h2><ul><li><p>@ApiIgnore </p><p>例如想隐藏接口接收参数<code>Moedl</code>在swagger文档中不显示，需要在<code>Model</code>参数前添加<code>@ApiIgnore</code>属性，接口如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"测试接口"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> Object <span class="token function">test</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> User user<span class="token punctuation">,</span> <span class="token annotation punctuation">@ApiIgnore</span> Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>@ApiOperation</p><p>接口http请求的描述</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"获取图书信息"</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">"获取图书信息"</span><span class="token punctuation">,</span> response <span class="token operator">=</span> Book<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> responseContainer <span class="token operator">=</span> <span class="token string">"Item"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>@ApiResponses</p><p>用于方法，描述操作的可能响应。</p></li><li><p>@ApiImplicitParams</p><p>用于方法，参数，字段说明，表示对参数的添加元数据（说明或是否必填等）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ApiImplicitParams</span><span class="token annotation punctuation">@ApiImplicitParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token string">"String"</span><span class="token punctuation">,</span> paramType <span class="token operator">=</span> <span class="token string">"query"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"年龄"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token string">"String"</span><span class="token punctuation">,</span> paramType <span class="token operator">=</span> <span class="token string">"query"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作用在方法上，表示单独的请求参数<br>参数： </p></li></ul><ol><li><p>name ：参数名。 </p></li><li><p>value ： 参数的具体意义，作用。 </p></li><li><p>required ： 参数是否必填。 </p></li><li><p>dataType ：参数的数据类型。 </p></li><li><p>paramType ：查询参数类型，这里有几种形式：</p><p>| 类型   | 作用                                     |<br>| —— | —————————————- |<br>| path   | 以地址的形式提交数据(@PathVariable)      |<br>| query  | 直接跟参数完成自动映射赋值(url使用&amp;连接) |<br>| body   | 以流的形式提交 仅支持POST                |<br>| header | 参数在request headers 里边提交           |<br>| form   | 以form表单的形式提交 仅支持POST          |</p><p><strong>踩坑</strong>：当我发POST请求的时候，当时接受的整个参数，不论我用body还是query，后台都会报Body Missing错误。这个参数和SpringMvc中的@RequestBody冲突，索性我就去掉了paramType，对接口测试并没有影响。</p></li></ol><h2 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h2><p>如果参数比较多的况下，Controller接收GET请求参数时，后台代码为了方便会把所有的参数封装到一个实体类中，此时显示实体类的所有参数到swagger中，需要使用<code>@ModelAttribute</code>注解。接口注解使用如下：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"测试接口"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@ResponseBody</span>  <span class="token keyword">public</span> Object <span class="token function">test</span><span class="token punctuation">(</span> <span class="token annotation punctuation">@ModelAttribute</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> null<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实体类注解如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户实体类"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span>  <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"年龄"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String age<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Swagger </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea同步配置到Git</title>
      <link href="/2019/01/23/idea%E5%90%8C%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%88%B0Git/"/>
      <url>/2019/01/23/idea%E5%90%8C%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%88%B0Git/</url>
      
        <content type="html"><![CDATA[<h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><ul><li>IntelliJ IDEA</li><li><a href="https://www.jetbrains.com/toolbox/app/?fromMenu" target="_blank" rel="noopener">ToolBox</a></li><li>Git</li></ul><h2 id="同步步骤"><a href="#同步步骤" class="headerlink" title="同步步骤"></a>同步步骤</h2><p>同步之前，现在GitHub上创建存储配置仓库，创建完仓库设置<code>token</code>，设置步骤是GitHub的<code>Settings</code>-&gt;<code>Developer settings</code>-&gt;<code>Personal access tokens</code>-&gt;<code>Generate new token</code>，点击创建<code>token</code>，如下图所示：</p><p><img src="/images/idea/1548208510812.png" alt="1548208510812"></p><p>进入<code>idea</code>界面，点击<code>File</code>-&gt;<code>Settings Repositorys</code>，输入<code>Git</code>的<code>URL</code>，点击<code>Overwrite Remote</code>即可。</p>]]></content>
      
      
      <categories>
          
          <category> 同步配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务管理入门</title>
      <link href="/2019/01/22/%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%85%A5%E9%97%A8/"/>
      <url>/2019/01/22/%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>说起事务，大家应该多多少少用过，尤其是在一个 service 方法中调用多次 dao 操作，我们一定要用到事务 ( <code>@Transational注解</code>)，那么这个事务的默认隔离级别和传播机制是什么呢?</p></blockquote><p>先来讲讲 <code>脏读</code> <code>不可重复读</code> 和 <code>幻读</code>。</p><ol><li><p>脏读: 我们在并发编程中是很熟悉的，通俗的讲就是你读得数据已经被修改了，已经过时失去意义了。</p></li><li><p>不可重复读： 同一个事务里面多次读取同一行数据，却返回不同的结果。</p></li><li><p>幻读：同样一笔查询在整个事务过程中多次执行后，查询所得的结果集不一样。</p></li></ol><h3 id="事务四大特性-ACID"><a href="#事务四大特性-ACID" class="headerlink" title="事务四大特性 ACID"></a>事务四大特性 ACID</h3><h5 id="1-原子性-Atomicity"><a href="#1-原子性-Atomicity" class="headerlink" title="1. 原子性 (Atomicity)"></a>1. 原子性 <code>(Atomicity)</code></h5><blockquote><p>要求事务所包含的全部操作是一个不可分割的整体，如果有一步发生异常，则全部不提交。</p></blockquote><h5 id="2-一致性-（Consistency）"><a href="#2-一致性-（Consistency）" class="headerlink" title="2. 一致性 （Consistency）"></a>2. 一致性 <code>（Consistency）</code></h5><blockquote><p>A 给 B 转钱，A 减和 B 增这两个操作必须保持一致。</p></blockquote><h5 id="3-隔离性-（Isolation）"><a href="#3-隔离性-（Isolation）" class="headerlink" title="3. 隔离性 （Isolation）"></a>3. 隔离性 <code>（Isolation）</code></h5><blockquote><p>事务会将一部分数据与其他事务隔离，防止脏读等。</p></blockquote><h5 id="4-持久性-（Durability）"><a href="#4-持久性-（Durability）" class="headerlink" title="4. 持久性 （Durability）"></a>4. 持久性 <code>（Durability）</code></h5><blockquote><p>事务的结果被写到持久化存储器中。</p></blockquote><h3 id="事务四大隔离级别"><a href="#事务四大隔离级别" class="headerlink" title="事务四大隔离级别"></a>事务四大隔离级别</h3><blockquote><p>隔离级别越高，则性能相对越低，反之亦然。</p><h5 id="1-Read-Uncommitted"><a href="#1-Read-Uncommitted" class="headerlink" title="1. Read Uncommitted"></a>1. Read Uncommitted</h5><p>最低的隔离级别，跟你直译的意思一样：可以读取其它事务未完成的结果。(脏读)</p></blockquote><p>很明显， <code>脏读</code> <code>不可重复读</code> 和 <code>幻读</code>这三个问题它都有。</p><h5 id="2-Read-Committed"><a href="#2-Read-Committed" class="headerlink" title="2. Read Committed"></a>2. Read Committed</h5><blockquote><p>大部分数据库采用的<strong>默认隔离级别</strong>，比上一个隔离级别多了限定：在该事务完成后，才能读取该事务的数据更新后的结果。</p></blockquote><p>它可以避免脏读，但是也有不可重复读取和幻读的问题。</p><h5 id="3-Repeatable-Read"><a href="#3-Repeatable-Read" class="headerlink" title="3. Repeatable Read"></a>3. Repeatable Read</h5><blockquote><p>可以保证在整个事务的过程中，对同一笔数据的读取结果是相同的，不管其他事务是否同时在对同一笔数据进行更新，也不管其他事务对同一笔数 据的更新提交与否。</p></blockquote><p>Repeatable Read 隔离级别避免了脏读和不可重复读取的问题，但无法避免幻读。</p><h5 id="4-Serializable"><a href="#4-Serializable" class="headerlink" title="4. Serializable"></a>4. Serializable</h5><blockquote><p>最为严格的隔离级别，所有的事务操作都必须依次顺序执行，可以避免其他隔离级别遇到的所有问题，是最为安全的隔离级别， 但同时也是性能最差的隔离级别。</p></blockquote><p>通常情况下，我们会使用其他隔离级别加上相应的并发锁的机制来控制对数据的访问，这样既保证 了系统性能不会损失太大，也能够一定程度上保证数据的一致性。</p><h3 id="Spring-事务传播机制"><a href="#Spring-事务传播机制" class="headerlink" title="Spring 事务传播机制"></a>Spring 事务传播机制</h3><p><img src="https://mmbiz.qpic.cn/mmbiz_png/eQPyBffYbufj62v2Y8YlK6PduUGQVluDic4XXpbR4OMSmHSC4ciapicuGohqr5jCt9RcQ7ib5PRbn5LFialQ9MDlHgg/640?wx_fmt=png" alt></p><h3 id="从-JDBC-的事务说起"><a href="#从-JDBC-的事务说起" class="headerlink" title="从 JDBC 的事务说起"></a>从 JDBC 的事务说起</h3><blockquote><p>我们都知道，JDBC 给我们提供了事务。</p></blockquote><pre style="box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 8px 0px 6px;background-color: rgb(32, 32, 29);border-radius: 0px;overflow-y: auto;color: rgb(80, 97, 109);text-align: start;font-size: 10px;line-height: 12px;font-family: consolas, menlo, courier, monospace, &quot;Microsoft Yahei&quot;!important;border-width: 1px !important;border-style: solid !important;border-color: rgb(226, 226, 226) !important;">1.  `try{`2.  `con.setAutoCommit(false);//开启事务`3.  `......`4.  `con.commit();//try的最后提交事务`5.  `} catch（） {`6.  `con.rollback();//回滚事务`7.  `}`</pre><p>获取事务隔离级别</p><pre style="box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 8px 0px 6px;background-color: rgb(32, 32, 29);border-radius: 0px;overflow-y: auto;color: rgb(80, 97, 109);text-align: start;font-size: 10px;line-height: 12px;font-family: consolas, menlo, courier, monospace, &quot;Microsoft Yahei&quot;!important;border-width: 1px !important;border-style: solid !important;border-color: rgb(226, 226, 226) !important;">1.  `Connection.getTransactionIsolation()`</pre><p>设置事务隔离级别</p><pre style="box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 8px 0px 6px;background-color: rgb(32, 32, 29);border-radius: 0px;overflow-y: auto;color: rgb(80, 97, 109);text-align: start;font-size: 10px;line-height: 12px;font-family: consolas, menlo, courier, monospace, &quot;Microsoft Yahei&quot;!important;border-width: 1px !important;border-style: solid !important;border-color: rgb(226, 226, 226) !important;">1.  `con.setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);`</pre><h3 id="Spring-事务机制"><a href="#Spring-事务机制" class="headerlink" title="Spring 事务机制"></a>Spring 事务机制</h3><blockquote><p>Spring 并不会直接管理事务，而是提供了事务管理器，将事务管理的职责委托给 JPA JDBC JTA DataSourceTransaction JMSTransactionManager 等框架提供的事务来实现。</p></blockquote><p>那么，Spring 提供的事务管理器是什么呢?</p><p>是 <code>PlatformTransactionManager.java</code>接口:</p><h5 id="PlatformTransactionManager-java"><a href="#PlatformTransactionManager-java" class="headerlink" title="PlatformTransactionManager.java"></a>PlatformTransactionManager.java</h5><blockquote><p>Spring 提供的事务管理器。不同的事务遵循该事务管理器的 API，便能很轻松的交给 Spring 管理。</p></blockquote><pre style="box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 8px 0px 6px;background-color: rgb(32, 32, 29);border-radius: 0px;overflow-y: auto;color: rgb(80, 97, 109);text-align: start;font-size: 10px;line-height: 12px;font-family: consolas, menlo, courier, monospace, &quot;Microsoft Yahei&quot;!important;border-width: 1px !important;border-style: solid !important;border-color: rgb(226, 226, 226) !important;">1.  `public interface PlatformTransactionManager {`2.  `// 通过Transation定义 获取Transation`3.  `TransactionStatus getTransaction(@Nullable TransactionDefinition var1) throws TransactionException;`4.  `// 提交事务`5.  `void commit(TransactionStatus var1) throws TransactionException;`6.  `// 回滚事务`7.  `void rollback(TransactionStatus var1) throws TransactionException;`8.  `}`</pre><p>可以看到它里面引用到了 <code>TransactionDefinition</code>和 <code>TransactionStatus</code>.</p><h5 id="TransactionDefinition-java"><a href="#TransactionDefinition-java" class="headerlink" title="TransactionDefinition.java"></a>TransactionDefinition.java</h5><blockquote><p>它里面包含了事务的定义。</p></blockquote><pre style="box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 8px 0px 6px;background-color: rgb(32, 32, 29);border-radius: 0px;overflow-y: auto;color: rgb(80, 97, 109);text-align: start;font-size: 10px;line-height: 12px;font-family: consolas, menlo, courier, monospace, &quot;Microsoft Yahei&quot;!important;border-width: 1px !important;border-style: solid !important;border-color: rgb(226, 226, 226) !important;">1.  `public interface TransactionDefinition {`2.  `// 传播机制`3.  `int PROPAGATION_REQUIRED = 0;`4.  `int PROPAGATION_SUPPORTS = 1;`5.  `int PROPAGATION_MANDATORY = 2;`6.  `int PROPAGATION_REQUIRES_NEW = 3;`7.  `int PROPAGATION_NOT_SUPPORTED = 4;`8.  `int PROPAGATION_NEVER = 5;`9.  `int PROPAGATION_NESTED = 6;`10.  `// 隔离级别`11.  `int ISOLATION_DEFAULT = -1;`12.  `int ISOLATION_READ_UNCOMMITTED = 1;`13.  `int ISOLATION_READ_COMMITTED = 2;`14.  `int ISOLATION_REPEATABLE_READ = 4;`15.  `int ISOLATION_SERIALIZABLE = 8;`16.  `int TIMEOUT_DEFAULT = -1;`18.  `int getPropagationBehavior();`19.  `// 获取隔离级别`20.  `int getIsolationLevel();`22.  `int getTimeout();`24.  `boolean isReadOnly();`26.  `@Nullable`27.  `String getName();`28.  `}`</pre><h5 id="TransactionStatus-java"><a href="#TransactionStatus-java" class="headerlink" title="TransactionStatus.java"></a>TransactionStatus.java</h5><blockquote><p>事务的状态。</p></blockquote><pre style="box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 8px 0px 6px;background-color: rgb(32, 32, 29);border-radius: 0px;overflow-y: auto;color: rgb(80, 97, 109);text-align: start;font-size: 10px;line-height: 12px;font-family: consolas, menlo, courier, monospace, &quot;Microsoft Yahei&quot;!important;border-width: 1px !important;border-style: solid !important;border-color: rgb(226, 226, 226) !important;">1.  `public interface TransactionStatus extends SavepointManager, Flushable {`2.  `boolean isNewTransaction();`4.  `boolean hasSavepoint();`6.  `void setRollbackOnly();`8.  `boolean isRollbackOnly();`10.  `void flush();`12.  `boolean isCompleted();`13.  `}`</pre><h4 id="Spring-默认事务使用"><a href="#Spring-默认事务使用" class="headerlink" title="Spring 默认事务使用"></a>Spring 默认事务使用</h4><h5 id="1-代码方式使用"><a href="#1-代码方式使用" class="headerlink" title="1. 代码方式使用"></a>1. 代码方式使用</h5><pre style="box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 8px 0px 6px;background-color: rgb(32, 32, 29);border-radius: 0px;overflow-y: auto;color: rgb(80, 97, 109);text-align: start;font-size: 10px;line-height: 12px;font-family: consolas, menlo, courier, monospace, &quot;Microsoft Yahei&quot;!important;border-width: 1px !important;border-style: solid !important;border-color: rgb(226, 226, 226) !important;">1.  `@Autowired`2.  `private PlatformTransactionManager transactionManager;`3.  `public void testTX(){`4.  `DefaultTransactionDefinition definition = new DefaultTransactionDefinition();`5.  `TransactionStatus status = transactionManager.getTransaction(definition);`6.  `try {`7.  `// 业务逻辑`8.  `// ...`10.  `// 提交事务`11.  `transactionManager.commit(status);`12.  `}catch (Exception e){`13.  `// 发生异常，事务回滚`14.  `transactionManager.rollback(status);`15.  `}`16.  `}`</pre><h5 id="2-注解方式使用"><a href="#2-注解方式使用" class="headerlink" title="2. 注解方式使用"></a>2. 注解方式使用</h5><pre style="box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 8px 0px 6px;background-color: rgb(32, 32, 29);border-radius: 0px;overflow-y: auto;color: rgb(80, 97, 109);text-align: start;font-size: 10px;line-height: 12px;font-family: consolas, menlo, courier, monospace, &quot;Microsoft Yahei&quot;!important;border-width: 1px !important;border-style: solid !important;border-color: rgb(226, 226, 226) !important;">1.  `@Transactional`2.  `void testTX2(){`3.  `// 业务逻辑 ...`4.  `}`</pre><p>这不是玄学，它的底层是依靠 AOP 动态代理实现，其实重新渲染出的代码和第一个使用方式类似，不过大大减少了开发复杂度。</p><h5 id="扩展：-Transactional-注解"><a href="#扩展：-Transactional-注解" class="headerlink" title="扩展：@Transactional 注解"></a>扩展：@Transactional 注解</h5><pre style="box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 8px 0px 6px;background-color: rgb(32, 32, 29);border-radius: 0px;overflow-y: auto;color: rgb(80, 97, 109);text-align: start;font-size: 10px;line-height: 12px;font-family: consolas, menlo, courier, monospace, &quot;Microsoft Yahei&quot;!important;border-width: 1px !important;border-style: solid !important;border-color: rgb(226, 226, 226) !important;">1.  `@Target({ElementType.METHOD, ElementType.TYPE})`2.  `@Retention(RetentionPolicy.RUNTIME)`3.  `@Inherited`4.  `@Documented`5.  `public @interface Transactional {`7.  `//指定使用的事务管理器`8.  `@AliasFor("transactionManager")`9.  `String value() default "";`11.  `@AliasFor("value")`12.  `String transactionManager() default "";`13.  `// 可选的事务传播行为设置`14.  `Propagation propagation() default Propagation.REQUIRED;`15.  `// 可选的事务隔离级别设置`16.  `Isolation isolation() default Isolation.DEFAULT;`17.  `// 事务超时时间设置`18.  `int timeout() default -1;`19.  `// 读写或只读事务，默认读写`20.  `boolean readOnly() default false;`21.  `// 导致事务回滚的异常类数组` 22.  `Class<? extends Throwable>[] rollbackFor() default {};`23.  `// 导致事务回滚的异常类名字数组`24.  `String[] rollbackForClassName() default {};`25.  `// 不会导致事务回滚的异常类数组`26.  `Class<? extends Throwable>[] noRollbackFor() default {};`27.  `// 不会导致事务回滚的异常类名字数组`28.  `String[] noRollbackForClassName() default {};`29.  `}`</pre><h3 id="Spring-事务实践"><a href="#Spring-事务实践" class="headerlink" title="Spring 事务实践"></a>Spring 事务实践</h3><blockquote><p>非入门选手下面的 demo 可能会引起你的不适 (浪费时间)。 假设我要完成一个功能，当删除用户的时候，将与该用户有关的所有数据行都删除。</p></blockquote><pre style="box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 8px 0px 6px;background-color: rgb(32, 32, 29);border-radius: 0px;overflow-y: auto;color: rgb(80, 97, 109);text-align: start;font-size: 10px;line-height: 12px;font-family: consolas, menlo, courier, monospace, &quot;Microsoft Yahei&quot;!important;border-width: 1px !important;border-style: solid !important;border-color: rgb(226, 226, 226) !important;">1.  `public void delUser(Integer userId) {`2.  `// 删除和用户相关的信息`3.  `otherRepository.deleteByUserId(userId);` 4.  `// 删除用户`5.  `userRepository.deleteById(userId);`6.  `}`</pre><p>这样的写法一般来讲，会成功的完成任务。但是如果这样一段代码：</p><pre style="box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 8px 0px 6px;background-color: rgb(32, 32, 29);border-radius: 0px;overflow-y: auto;color: rgb(80, 97, 109);text-align: start;font-size: 10px;line-height: 12px;font-family: consolas, menlo, courier, monospace, &quot;Microsoft Yahei&quot;!important;border-width: 1px !important;border-style: solid !important;border-color: rgb(226, 226, 226) !important;">1.  `public void delUser(Integer userId) {`2.  `// 删除和用户相关的信息`3.  `otherRepository.deleteByUserId();`4.  `if (true) {`5.  `throw new RuntimeException("xxx");`6.  `}`7.  `// 删除用户`8.  `userRepository.deleteById(userId);`9.  `}`</pre><p>结果会是： <code>deleteByUserId()</code>执行成功， <code>deleteById()</code>执行失败，不满足数据的一致性。</p><p>所以我们需要事务来限制：要么全部执行，要么全部不执行 (方法中有异常就自动回滚)。那怎么实现呢，只需要在方法上加一个注解： <code>@Transactional</code></p><pre style="box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 8px 0px 6px;background-color: rgb(32, 32, 29);border-radius: 0px;overflow-y: auto;color: rgb(80, 97, 109);text-align: start;font-size: 10px;line-height: 12px;font-family: consolas, menlo, courier, monospace, &quot;Microsoft Yahei&quot;!important;border-width: 1px !important;border-style: solid !important;border-color: rgb(226, 226, 226) !important;">1.  `@Transactional`2.  `public void delUser(Integer userId) {`3.  `// 删除和用户相关的信息`4.  `otherRepository.deleteByUserId();`5.  `if (true) {`6.  `throw new RuntimeException("xxx");`7.  `}`8.  `// 删除用户`9.  `userRepository.deleteById(userId);`10.  `}`</pre><h3 id="Spring-加载第三方事务管理"><a href="#Spring-加载第三方事务管理" class="headerlink" title="Spring 加载第三方事务管理"></a>Spring 加载第三方事务管理</h3><blockquote><p>比如我有个需求 (接着上次的强票系统 II)，要求信息不能丢失，要用到 RabbitMQ 的事务管理，那怎么去加载到 Spring 的事务管理器中呢？</p></blockquote><pre style="box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 8px 0px 6px;background-color: rgb(32, 32, 29);border-radius: 0px;overflow-y: auto;color: rgb(80, 97, 109);text-align: start;font-size: 10px;line-height: 12px;font-family: consolas, menlo, courier, monospace, &quot;Microsoft Yahei&quot;!important;border-width: 1px !important;border-style: solid !important;border-color: rgb(226, 226, 226) !important;">1.  `@Bean`2.  `public ConnectionFactory connectionFactory() {`3.  `CachingConnectionFactory connectionFactory = new CachingConnectionFactory();`4.  `return connectionFactory;`5.  `}`7.  `@Bean`8.  `public RabbitTransactionManager rabbitTransactionManager(ConnectionFactory connectionFactory) {`9.  `return new RabbitTransactionManager(connectionFactory);`10.  `}`</pre><p>我们只需要这样做便可以使的使用 <code>@Transactional注解</code>来实现对 RabbitMQ 的事务管理, 其它框架也类似。</p>]]></content>
      
      
      <categories>
          
          <category> 事务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SnowFlake雪花算法</title>
      <link href="/2019/01/22/SnowFlake%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95/"/>
      <url>/2019/01/22/SnowFlake%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="snowflake-算法"><a href="#snowflake-算法" class="headerlink" title="snowflake 算法"></a>snowflake 算法</h2><p>snowflake 算法是 twitter 开源的分布式 id 生成算法，就是把一个 64 位的 long 型的 id，1 个 bit 是不用的，用其中的 41 bit 作为毫秒数，用 10 bit 作为工作机器 id，12 bit 作为序列号。</p><ul><li><p>1 bit：不用，为啥呢？因为二进制里第一个 bit 为如果是 1，那么都是负数，但是我们生成的 id 都是正数，所以第一个 bit 统一都是 0。</p></li><li><p>41 bit：表示的是时间戳，单位是毫秒。41 bit 可以表示的数字多达 2^41 - 1，也就是可以标识 2^41 - 1 个毫秒值，换算成年就是表示 69 年的时间。</p></li><li><p>10 bit：记录工作机器 id，代表的是这个服务最多可以部署在 2^10 台机器上哪，也就是 1024 台机器。但是 10 bit 里 5 个 bit 代表机房 id，5 个 bit 代表机器 id。意思就是最多代表 2^5 个机房（32 个机房），每个机房里可以代表 2^5 个机器（32 台机器）。</p></li><li><p>12 bit：这个是用来记录同一个毫秒内产生的不同 id，12 bit 可以代表的最大正整数是 2^12 - 1 = 4096，也就是说可以用这个 12 bit 代表的数字来区分同一个毫秒内的 4096 个不同的 id。</p></li></ul><blockquote><p>0 | 0001100 10100010 10111110 10001001 01011100 00 | 10001 | 1 1001 | 0000 00000000</p></blockquote><h2 id="工具类源代码"><a href="#工具类源代码" class="headerlink" title="工具类源代码"></a>工具类源代码</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ifly<span class="token punctuation">.</span>inquiry<span class="token punctuation">.</span>base<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * &lt;p>DESCRIPTION:&lt;/p> * * @author AsiaCui * @version: 1.0.0 * @create 2019-01-22 9:32 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IdWorker</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> workerId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> datacenterId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> sequence<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">IdWorker</span><span class="token punctuation">(</span><span class="token keyword">long</span> workerId<span class="token punctuation">,</span> <span class="token keyword">long</span> datacenterId<span class="token punctuation">,</span> <span class="token keyword">long</span> sequence<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//sanitycheckforworkerId</span>        <span class="token comment" spellcheck="true">//这儿不就检查了一下，要求就是你传递进来的机房id和机器id不能超过32，不能小于0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>workerId <span class="token operator">></span> maxWorkerId <span class="token operator">||</span> workerId <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                    String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"workerIdcan'tbegreaterthan%dorlessthan0"</span><span class="token punctuation">,</span> maxWorkerId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>datacenterId <span class="token operator">></span> maxDatacenterId <span class="token operator">||</span> datacenterId <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                    String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"datacenterIdcan'tbegreaterthan%dorlessthan0"</span><span class="token punctuation">,</span> maxDatacenterId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>                <span class="token string">"workerstarting.timestampleftshift%d,datacenteridbits%d,workeridbits%d,sequencebits%d,workerid%d"</span><span class="token punctuation">,</span>                timestampLeftShift<span class="token punctuation">,</span> datacenterIdBits<span class="token punctuation">,</span> workerIdBits<span class="token punctuation">,</span> sequenceBits<span class="token punctuation">,</span> workerId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>workerId <span class="token operator">=</span> workerId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>datacenterId <span class="token operator">=</span> datacenterId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sequence <span class="token operator">=</span> sequence<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> twepoch <span class="token operator">=</span> 1288834974657L<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> workerIdBits <span class="token operator">=</span> 5L<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> datacenterIdBits <span class="token operator">=</span> 5L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这个是二进制运算，就是5bit最多只能有31个数字，也就是说机器id最多只能是32以内</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> maxWorkerId <span class="token operator">=</span> <span class="token operator">-</span>1L <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span>1L <span class="token operator">&lt;&lt;</span> workerIdBits<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这个是一个意思，就是5bit最多只能有31个数字，机房id最多只能是32以内</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> maxDatacenterId <span class="token operator">=</span> <span class="token operator">-</span>1L <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span>1L <span class="token operator">&lt;&lt;</span> datacenterIdBits<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> sequenceBits <span class="token operator">=</span> 12L<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> workerIdShift <span class="token operator">=</span> sequenceBits<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> datacenterIdShift <span class="token operator">=</span> sequenceBits <span class="token operator">+</span> workerIdBits<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> timestampLeftShift <span class="token operator">=</span> sequenceBits <span class="token operator">+</span> workerIdBits <span class="token operator">+</span> datacenterIdBits<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> sequenceMask <span class="token operator">=</span> <span class="token operator">-</span>1L <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span>1L <span class="token operator">&lt;&lt;</span> sequenceBits<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> lastTimestamp <span class="token operator">=</span> <span class="token operator">-</span>1L<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getWorkerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> workerId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getDatacenterId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> datacenterId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">long</span> <span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这儿就是获取当前时间戳，单位是毫秒</span>        <span class="token keyword">long</span> timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timestamp <span class="token operator">&lt;</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"clockismovingbackwards. Rejectingrequestsuntil%d."</span><span class="token punctuation">,</span> lastTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Clockmovedbackwards. Refusingtogenerateidfor%dmilliseconds"</span><span class="token punctuation">,</span> lastTimestamp <span class="token operator">-</span> timestamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastTimestamp <span class="token operator">==</span> timestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//这个意思是说一个毫秒内最多只能有4096个数字</span>            <span class="token comment" spellcheck="true">//无论你传递多少进来，这个位运算保证始终就是在4096这个范围内，避免你自己传递个sequence超过了4096这个范围</span>            sequence <span class="token operator">=</span> <span class="token punctuation">(</span>sequence <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> sequenceMask<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sequence <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                timestamp <span class="token operator">=</span> <span class="token function">tilNextMillis</span><span class="token punctuation">(</span>lastTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            sequence <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//这儿记录一下最近一次生成id的时间戳，单位是毫秒</span>        lastTimestamp <span class="token operator">=</span> timestamp<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//这儿就是将时间戳左移，放到41bit那儿；</span>        <span class="token comment" spellcheck="true">//将机房id左移放到5bit那儿；</span>        <span class="token comment" spellcheck="true">//将机器id左移放到5bit那儿；将序号放最后12bit；</span>        <span class="token comment" spellcheck="true">//最后拼接起来成一个64bit的二进制数字，转换成10进制就是个long型</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>timestamp <span class="token operator">-</span> twepoch<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> timestampLeftShift<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>datacenterId <span class="token operator">&lt;&lt;</span> datacenterIdShift<span class="token punctuation">)</span>                <span class="token operator">|</span> <span class="token punctuation">(</span>workerId <span class="token operator">&lt;&lt;</span> workerIdShift<span class="token punctuation">)</span> <span class="token operator">|</span> sequence<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">tilNextMillis</span><span class="token punctuation">(</span><span class="token keyword">long</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>timestamp <span class="token operator">&lt;=</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>            timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> timestamp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//---------------测试---------------</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        IdWorker worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IdWorker</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>worker<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>怎么说呢，大概这个意思吧，就是说 41 bit 是当前毫秒单位的一个时间戳，就这意思；然后 5 bit 是你传递进来的一个机房 id（但是最大只能是 32 以内），另外 5 bit 是你传递进来的机器 id（但是最大只能是 32 以内），剩下的那个 12 bit 序列号，就是如果跟你上次生成 id 的时间还在一个毫秒内，那么会把顺序给你累加，最多在 4096 个序号以内。</p><p>所以你自己利用这个工具类，自己搞一个服务，然后对每个机房的每个机器都初始化这么一个东西，刚开始这个机房的这个机器的序号就是 0。然后每次接收到一个请求，说这个机房的这个机器要生成一个 id，你就找到对应的 Worker 生成。</p><p>利用这个 snowflake 算法，你可以开发自己公司的服务，甚至对于机房 id 和机器 id，反正给你预留了 5 bit + 5 bit，你换成别的有业务含义的东西也可以的。</p><p>这个 snowflake 算法相对来说还是比较靠谱的，所以你要真是搞分布式 id 生成，如果是高并发啥的，那么用这个应该性能比较好，一般每秒几万并发的场景，也足够你用了。</p>]]></content>
      
      
      <categories>
          
          <category> 雪花算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot常用注解大全</title>
      <link href="/2019/01/21/SpringBoot%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%A4%A7%E5%85%A8/"/>
      <url>/2019/01/21/SpringBoot%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="一、注解-annotations-列表"><a href="#一、注解-annotations-列表" class="headerlink" title="一、注解 (annotations) 列表"></a>一、注解 (annotations) 列表</h3><p>@SpringBootApplication：</p><p>包含了 @ComponentScan、@Configuration 和 @EnableAutoConfiguration 注解。其中 @ComponentScan 让 spring Boot 扫描到 Configuration 类并把它加入到程序上下文。</p><p>@Configuration 等同于 spring 的 XML 配置文件；使用 Java 代码可以检查类型安全。</p><p>@EnableAutoConfiguration 自动配置。</p><p>@ComponentScan 组件扫描，可自动发现和装配一些 Bean。</p><p>@Component 可配合 CommandLineRunner 使用，在程序启动后执行一些基础任务。</p><p>@RestController 注解是 @Controller 和 @ResponseBody 的合集, 表示这是个控制器 bean, 并且是将函数的返回值直 接填入 HTTP 响应体中, 是 REST 风格的控制器。</p><p>@Autowired 自动导入。</p><p>@PathVariable 获取参数。</p><p>@JsonBackReference 解决嵌套外链问题。</p><p>@RepositoryRestResourcepublic 配合 spring-boot-starter-data-rest 使用。</p><h3 id="二、注解-annotations-详解"><a href="#二、注解-annotations-详解" class="headerlink" title="二、注解 (annotations) 详解"></a>二、注解 (annotations) 详解</h3><p>@SpringBootApplication：申明让 spring boot 自动给程序进行必要的配置，这个配置等同于：@Configuration ，@EnableAutoConfiguration 和 @ComponentScan 三个配置。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>myproject<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span> <span class="token comment" spellcheck="true">// same as @Configuration @EnableAutoConfiguration @ComponentScan </span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@ResponseBody：表示该方法的返回结果直接写入 HTTP response body 中，一般在异步获取数据时使用，用于构建 RESTful 的 api。在使用 @RequestMapping 后，返回值通常解析为跳转路径，加上 @responsebody 后返回结果不会被解析为跳转路径，而是直接写入 HTTP response body 中。比如异步获取 json 数据，加上 @responsebody 后，会直接返回 json 数据。该注解一般会配合 @RequestMapping 一起使用。示例代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>“<span class="token operator">/</span>test”<span class="token punctuation">)</span> <span class="token annotation punctuation">@ResponseBody</span> <span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span>”ok”<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@Controller：用于定义控制器类，在 spring 项目中由控制器负责将用户发来的 URL 请求转发到对应的服务接口（service 层），一般这个注解在类中，通常方法需要配合注解 @RequestMapping。示例代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>“<span class="token operator">/</span>demoInfo”<span class="token punctuation">)</span> publicclass DemoController <span class="token punctuation">{</span> <span class="token annotation punctuation">@Autowired</span> <span class="token keyword">private</span> DemoInfoService demoInfoService<span class="token punctuation">;</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">{</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DemoController.hello()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"from TemplateController.helloHtml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//会使用hello.html或者hello.ftl模板进行渲染显示.</span>   <span class="token keyword">return</span><span class="token string">"/hello"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@RestController：用于标注控制层组件 (如 struts 中的 action)，@ResponseBody 和 @Controller 的合集。示例代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kfit<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>web<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>“<span class="token operator">/</span>demoInfo2”<span class="token punctuation">)</span> publicclass DemoController2 <span class="token punctuation">{</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span><span class="token string">"ok"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@RequestMapping：提供路由信息，负责 URL 到 Controller 中的具体函数的映射。</p><p>@EnableAutoConfiguration：Spring Boot 自动配置（auto-configuration）：尝试根据你添加的 jar 依赖自动配置你的 Spring 应用。例如，如果你的 classpath 下存在 HSQLDB，并且你没有手动配置任何数据库连接 beans，那么我们将自动配置一个内存型（in-memory）数据库”。</p><p>你可以将 @EnableAutoConfiguration 或者 @SpringBootApplication 注解添加到一个 @Configuration 类上来选择自动配置。如果发现应用了你不想要的特定自动配置类，你可以使用 @EnableAutoConfiguration 注解的排除属性来禁用它们。</p><p>@ComponentScan：表示将该类自动发现扫描组件。个人理解相当于，如果扫描到有 @Component、@Controller、@Service 等这些注解的类，并注册为 Bean，可以自动收集所有的 Spring 组件，包括 @Configuration 类。我们经常使用 @ComponentScan 注解搜索 beans，并结合 @Autowired 注解导入。可以自动收集所有的 Spring 组件，包括 @Configuration 类。</p><p>我们经常使用 @ComponentScan 注解搜索 beans，并结合 @Autowired 注解导入。如果没有配置的话，Spring Boot 会扫描启动类所在包下以及子包下的使用了 @Service,@Repository 等注解的类。</p><p>@Configuration：相当于传统的 xml 配置文件，如果有些第三方库需要用到 xml 文件，建议仍然通过 @Configuration 类作为项目的配置主类——可以使用 @ImportResource 注解加载 xml 配置文件。</p><p>@Import：用来导入其他配置类。</p><p>@ImportResource：用来加载 xml 配置文件。</p><p>@Autowired：自动导入依赖的 bean</p><p>@Service：一般用于修饰 service 层的组件</p><p>@Repository：使用 @Repository 注解可以确保 DAO 或者 repositories 提供异常转译，这个注解修饰的 DAO 或者 repositories 类会被 ComponetScan 发现并配置，同时也不需要为它们提供 XML 配置项。</p><p>@Bean：用 @Bean 标注方法等价于 XML 中配置的 bean。</p><p>@Value：注入 Spring boot application.properties 配置的属性的值。示例代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> “#<span class="token punctuation">{</span>message<span class="token punctuation">}</span>”<span class="token punctuation">)</span> <span class="token keyword">private</span> String message<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>@Inject：等价于默认的 @Autowired，只是没有 required 属性；</p><p>@Component：泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。</p><p>@Bean: 相当于 XML 中的, 放在方法的上面，而不是类，意思是产生一个 bean, 并交给 spring 管理。</p><p>@AutoWired：自动导入依赖的 bean。byType 方式。把配置好的 Bean 拿来用，完成属性、方法的组装，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。当加上（required=false）时，就算找不到 bean 也不报错。</p><p>@Qualifier：当有多个同一类型的 Bean 时，可以用 @Qualifier(“name”) 来指定。与 @Autowired 配合使用。@Qualifier 限定描述符除了能根据名字进行注入，但能进行更细粒度的控制如何选择候选者，具体使用方式如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span> <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value <span class="token operator">=</span> “demoInfoService”<span class="token punctuation">)</span> <span class="token keyword">private</span> DemoInfoService demoInfoService<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>@Resource(name=”name”,type=”type”)：没有括号内内容的话，默认 byName。与 @Autowired 干类似的事。</p><h3 id="三、JPA-注解"><a href="#三、JPA-注解" class="headerlink" title="三、JPA 注解"></a>三、JPA 注解</h3><p>@Entity：@Table(name=”“)：表明这是一个实体类。一般用于 jpa 这两个注解一般一块使用，但是如果表名和实体类名相同的话，@Table 可以省略</p><p>@MappedSuperClass: 用在确定是父类的 entity 上。父类的属性子类可以继承。</p><p>@NoRepositoryBean: 一般用作父类的 repository，有这个注解，spring 不会去实例化该 repository。</p><p>@Column：如果字段名与列名相同，则可以省略。</p><p>@Id：表示该属性为主键。</p><p>@GeneratedValue(strategy = GenerationType.SEQUENCE,generator = “repair_seq”)：表示主键生成策略是 sequence（可以为 Auto、IDENTITY、native 等，Auto 表示可在多个数据库间切换），指定 sequence 的名字是 repair_seq。</p><p>@SequenceGeneretor(name = “repair_seq”, sequenceName = “seq_repair”, allocationSize = 1)：name 为 sequence 的名称，以便使用，sequenceName 为数据库的 sequence 名称，两个名称可以一致。</p><p>@Transient：表示该属性并非一个到数据库表的字段的映射, ORM 框架将忽略该属性。如果一个属性并非数据库表的字段映射, 就务必将其标示为 @Transient, 否则, ORM 框架默认其注解为 @Basic。@Basic(fetch=FetchType.LAZY)：标记可以指定实体属性的加载方式</p><p>@JsonIgnore：作用是 json 序列化时将 Java bean 中的一些属性忽略掉, 序列化和反序列化都受影响。</p><p>@JoinColumn（name=”loginId”）: 一对一：本表中指向另一个表的外键。一对多：另一个表指向本表的外键。</p><p>@OneToOne、@OneToMany、@ManyToOne：对应 hibernate 配置文件中的一对一，一对多，多对一。</p><h3 id="四、springMVC-相关注解"><a href="#四、springMVC-相关注解" class="headerlink" title="四、springMVC 相关注解"></a>四、springMVC 相关注解</h3><p>@RequestMapping：@RequestMapping(“/path”)表示该控制器处理所有 “/path” 的 UR L 请求。RequestMapping 是一个用来处理请求地址映射的注解，可用于类或方法上。</p><p>用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p><p><strong>该注解有六个属性：</strong></p><ol><li><p>params: 指定 request 中必须包含某些参数值是，才让该方法处理。</p></li><li><p>headers: 指定 request 中必须包含某些指定的 header 值，才能让该方法处理请求。</p></li><li><p>value: 指定请求的实际地址，指定的地址可以是 URI Template 模式</p></li><li><p>method: 指定请求的 method 类型， GET、POST、PUT、DELETE 等</p></li><li><p>consumes: 指定处理请求的提交内容类型（Content-Type），如 application/json,text/html;</p></li><li><p>produces: 指定返回的内容类型，仅当 request 请求头中的 (Accept) 类型中包含该指定类型才返回</p></li></ol><p>@RequestParam：用在方法的参数前面。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestParam</span> String a <span class="token operator">=</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>“a”<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>@PathVariable: 路径变量。如</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>“user<span class="token operator">/</span>get<span class="token operator">/</span>mac<span class="token operator">/</span><span class="token punctuation">{</span>macAddress<span class="token punctuation">}</span>”<span class="token punctuation">)</span> <span class="token keyword">public</span> String <span class="token function">getByMacAddress</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String macAddress<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//do something; </span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>参数与大括号里的名字一样要相同。</p><h3 id="五、全局异常处理"><a href="#五、全局异常处理" class="headerlink" title="五、全局异常处理"></a>五、全局异常处理</h3><p>@ControllerAdvice：包含 @Component。可以被扫描到。统一处理异常。</p><p>@ExceptionHandler（Exception.class）：用在方法上面表示遇到这个异常就执行以下方法。</p>]]></content>
      
      
      <categories>
          
          <category> 常用注解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java开发知名网站</title>
      <link href="/2019/01/18/Java%E5%BC%80%E5%8F%91%E7%9F%A5%E5%90%8D%E7%BD%91%E7%AB%99/"/>
      <url>/2019/01/18/Java%E5%BC%80%E5%8F%91%E7%9F%A5%E5%90%8D%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<ol><li><a href="https://stackoverflow.com" target="_blank" rel="noopener">https://stackoverflow.com</a></li></ol><p><img src="http://p3.pstatp.com/large/pgc-image/af335d4e1a2840758f4daf158e2686ea" alt></p><p>里面包含各种开发遇到的问题及答案，质量比较高。</p><ol start="2"><li><a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></li></ol><p><img src="http://p3.pstatp.com/large/pgc-image/d019dd56b8a54be9ac5f9f2e34fee499" alt></p><p>免费的开源代码托管网站，包括了许多开源的项目及示例项目等。</p><ol start="3"><li><a href="https://dzone.com/" target="_blank" rel="noopener">https://dzone.com/</a></li></ol><p><img src="http://p3.pstatp.com/large/pgc-image/0d0e9d5715bb4d83a6ddb1115772f33a" alt></p><p>提供技术新闻、编程教程、及各种工具、开发者的博客等。</p><ol start="4"><li><a href="http://www.programcreek.com/" target="_blank" rel="noopener">http://www.programcreek.com/</a></li></ol><p><img src="http://p1.pstatp.com/large/pgc-image/5b46729ccbcc420aa54d8545f34d02c7" alt></p><p>一个非常优秀的 Java 博客，包含很多精选文集。</p><ol start="5"><li><a href="https://gitlab.com/" target="_blank" rel="noopener">https://gitlab.com/</a></li></ol><p><img src="http://p1.pstatp.com/large/pgc-image/ac24d005843d40f18e69a28fb178bdb3" alt></p><p>免费代码托管网站，可以用来做私服，和 GitHub 最大区别是 GitLab 可以有私有项目。</p><ol start="6"><li><a href="https://www.ibm.com/developerworks/learn/java/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/learn/java/index.html</a></li></ol><p><img src="http://p1.pstatp.com/large/pgc-image/75ca7ffaba244777805bad3a40ba960d" alt></p><p>IBM 的 JAVA 开发者网站，很多干货。</p><ol start="7"><li><a href="http://www.javaworld.com/" target="_blank" rel="noopener">http://www.javaworld.com/</a></li></ol><p><img src="http://p1.pstatp.com/large/pgc-image/4ddbb7e6420345f7ab65841ed7cf52c9" alt></p><p>一个不错的综合性的 java 网站。</p><ol start="8"><li><a href="http://www.onjava.com/" target="_blank" rel="noopener">http://www.onjava.com/</a></li></ol><p><img src="http://p1.pstatp.com/large/pgc-image/9f195691c4a84cd7b645afba9a2fa9b4" alt></p><p>某位国外大神的网站。</p>]]></content>
      
      
      <categories>
          
          <category> 学习网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 干货 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20个常用正则表达式</title>
      <link href="/2019/01/18/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2019/01/18/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><strong>正则表达式在线测试工具</strong></p><blockquote><p><a href="http://tool.oschina.net/regex/" target="_blank" rel="noopener">http://tool.oschina.net/regex/</a></p></blockquote><p><strong>1 . 校验密码强度</strong></p><p>密码的强度必须是包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间。</p><blockquote><p>^(?=.<em>\d)(?=.</em>[a-z])(?=.*[A-Z]).{8,10}$</p></blockquote><p><strong>2. 校验中文</strong></p><p>字符串仅能是中文。</p><blockquote><p>^[\ 一 -\ 龥]{0,}$</p></blockquote><p><strong>3. 由数字、26 个英文字母或下划线组成的字符串</strong></p><blockquote><p>^\w+$</p></blockquote><p><strong>4. 校验 E-Mail 地址</strong></p><p>同密码一样，下面是 E-mail 地址合规性的正则检查语句。</p><blockquote><p>[\w!#$%&amp;’<em>+/=?^_`{|}~-]+(?:.[\w!#$%&amp;’</em>+/=?^_`{|}~-]+)<em>@(?:[\w](?:[\w-]</em>[\w])?.)+<a href="?:[\w-]*[\w]">\w</a>?</p></blockquote><p><strong>5. 校验身份证号码</strong></p><p>下面是身份证号码的正则校验。15 或 18 位。</p><p>15 位：</p><blockquote><p>^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$</p></blockquote><p>18 位：</p><blockquote><p>^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9]|X)$</p></blockquote><p><strong>6. 校验日期</strong></p><p>“yyyy-mm-dd“ 格式的日期校验，已考虑平闰年。</p><blockquote><p>^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$</p></blockquote><p><strong>7. 校验金额</strong></p><p>金额校验，精确到 2 位小数。</p><blockquote><p>^[0-9]+(.[0-9]{2})?$</p></blockquote><p><strong>8. 校验手机号</strong></p><p>下面是国内 13、15、18 开头的手机号正则表达式。（可根据目前国内收集号扩展前两位开头号码）</p><blockquote><p>^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</p></blockquote><p><strong>9. 判断 IE 的版本</strong></p><p>IE 目前还没被完全取代，很多页面还是需要做版本兼容，下面是 IE 版本检查的表达式。</p><blockquote><p>^.<em>MSIE <a href="?:\.[0-9]+">5-8</a>?(?!.</em>Trident\/[5-9].0).*$</p></blockquote><p><strong>10. 校验 IP-v4 地址</strong></p><p>IP4 正则语句。</p><blockquote><p>\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b</p></blockquote><p><strong>11. 校验 IP-v6 地址</strong></p><p>IP6 正则语句。</p><blockquote><p>(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))</p></blockquote><p><strong>12. 检查 URL 的前缀</strong></p><p>应用开发中很多时候需要区分请求是 HTTPS 还是 HTTP，通过下面的表达式可以取出一个 url 的前缀然后再逻辑判断。</p><blockquote><p>if (!s.match(/^[a-zA-Z]+:\/\//)){ s = ‘http://‘ + s;}</p></blockquote><p><strong>13. 提取 URL 链接</strong></p><p>下面的这个表达式可以筛选出一段文本中的 URL。</p><blockquote><p>^(f|ht){1}(tp|tps):\/\/([\w-]+.)+[\w-]+(\/[\w- ./?%&amp;=]*)?</p></blockquote><p><strong>14. 文件路径及扩展名校验</strong></p><p>验证 windows 下文件路径和扩展名（下面的例子中为. txt 文件）</p><blockquote><p>^([a-zA-Z]\:|\)\([^\]+\)<em>[^\/:</em>?”&lt;&gt;|]+.txt(l)?$</p></blockquote><p><strong>15. 提取 Color Hex Codes</strong></p><p>有时需要抽取网页中的颜色代码，可以使用下面的表达式。</p><blockquote><p>^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$</p></blockquote><p><strong>16. 提取网页图片</strong></p><p>假若你想提取网页中所有图片信息，可以利用下面的表达式。</p><blockquote><p>\&lt;<em>[img][^\&gt;]</em>[src] <em>= </em>[\”\’]{0,1}([^\”\’\ &gt;]*)</p></blockquote><p><strong>17. 提取页面超链接</strong></p><p>提取 html 中的超链接。</p><blockquote><p>(&lt;a\s<em>(?!.</em>\brel=)[^&gt;]<em>)(href=”https?:\/\/)((?!(?:(?:www.)?’.implode(‘|(?:www.)?’, $follow_list).’))[^”]+)”((?!.</em>\brel=)[^&gt;]<em>)(?:[^&gt;]</em>)&gt;</p></blockquote><p><strong>18. 查找 CSS 属性</strong></p><p>通过下面的表达式，可以搜索到相匹配的 CSS 属性。</p><blockquote><p>^\s<em>[a-zA-Z-]+\s</em>[:]{1}\s[a-zA-Z0-9\s.#]+[;]{1}</p></blockquote><p><strong>19. 抽取注释</strong></p><p>如果你需要移除 HMTL 中的注释，可以使用如下的表达式。</p><blockquote><!--(.*?)--></blockquote><p><strong>20. 匹配 HTML 标签</strong></p><p>通过下面的表达式可以匹配出 HTML 中的标签属性。</p><blockquote><p>&lt;\/?\w+((\s+\w+(\s<em>=\s</em>(?:”.<em>?”|’.</em>?’|[\^’”&gt;\s]+))?)+\s<em>|\s</em>)\/?&gt;</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 正则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 干货 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域解决方案</title>
      <link href="/2019/01/18/%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2019/01/18/%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2 id="跨域简介"><a href="#跨域简介" class="headerlink" title="跨域简介"></a>跨域简介</h2><p>在浏览器端进行 Ajax 请求时会出现跨域问题，那么什么是跨域，如何解决跨域呢？先看浏览器端出现跨域问题的现象，如下图所示</p><p><img src="/images/跨域/clipboard.png" alt></p><h2 id="什么是跨域问题？"><a href="#什么是跨域问题？" class="headerlink" title="什么是跨域问题？"></a>什么是跨域问题？</h2><p>跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对 JavaScript 施加的安全限制。</p><h2 id="什么是同源？"><a href="#什么是同源？" class="headerlink" title="什么是同源？"></a>什么是同源？</h2><p>所谓同源是指，域名，协议，端口均相同</p><ul><li><a href="http://www.asia.com" target="_blank" rel="noopener">http://www.asia.com</a> –&gt; <a href="http://admin.asia.com" target="_blank" rel="noopener">http://admin.asia.com</a> 跨域</li><li><a href="http://www.asia.com" target="_blank" rel="noopener">http://www.asia.com</a> –&gt; <a href="http://www.asia.com" target="_blank" rel="noopener">http://www.asia.com</a> 非跨域</li><li><a href="http://www.asia.com" target="_blank" rel="noopener">http://www.asia.com</a> –&gt; <a href="http://www.asia.com:8080" target="_blank" rel="noopener">http://www.asia.com:8080</a> 跨域</li><li><a href="http://www.asia.com" target="_blank" rel="noopener">http://www.asia.com</a> –&gt; <a href="https://www.asia.com" target="_blank" rel="noopener">https://www.asia.com</a> 跨域</li></ul><h2 id="如何解决跨域问题？"><a href="#如何解决跨域问题？" class="headerlink" title="如何解决跨域问题？"></a>如何解决跨域问题？</h2><h3 id="使用-CORS（跨资源共享）解决跨域问题"><a href="#使用-CORS（跨资源共享）解决跨域问题" class="headerlink" title="使用 CORS（跨资源共享）解决跨域问题"></a>使用 CORS（跨资源共享）解决跨域问题</h3><p>CORS 是一个 W3C 标准，全称是” 跨域资源共享”（Cross-origin resource sharing）。它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求，从而克服了 AJAX 只能同源使用的限制。</p><p>CORS 需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE 浏览器不能低于 IE10。整个 CORS 通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS 通信与同源的 AJAX 通信没有差别，代码完全一样。浏览器一旦发现 AJAX 请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。因此，实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨源通信（在 <code>header</code> 中设置：<code>Access-Control-Allow-Origin</code>）</p><h3 id="使用-JSONP-解决跨域问题"><a href="#使用-JSONP-解决跨域问题" class="headerlink" title="使用 JSONP 解决跨域问题"></a>使用 JSONP 解决跨域问题</h3><p>JSONP（JSON with Padding）是 JSON 的一种 “使用模式”，可用于解决主流浏览器的跨域数据访问的问题。由于同源策略，一般来说位于 <code>server1.example.com</code> 的网页无法与 <code>server2.example.com</code> 的服务器沟通，而 HTML 的 <code>&lt;script&gt;</code> 元素是一个例外。利用 <code>&lt;script&gt;</code> 元素的这个开放策略，网页可以得到从其他来源动态产生的 JSON 资料，而这种使用模式就是所谓的 JSONP。用 JSONP 抓到的资料并不是 JSON，而是任意的 JavaScript，用 JavaScript 直译器执行而不是用 JSON 解析器解析（需要目标服务器配合一个 <code>callback</code> 函数）。</p><h3 id="CORS-与-JSONP-的比较"><a href="#CORS-与-JSONP-的比较" class="headerlink" title="CORS 与 JSONP 的比较"></a>CORS 与 JSONP 的比较</h3><p>CORS 与 JSONP 的使用目的相同，但是比 JSONP 更强大。</p><p>JSONP 只支持 GET 请求，CORS 支持所有类型的 HTTP 请求。JSONP 的优势在于支持老式浏览器，以及可以向不支持 CORS 的网站请求数据。</p><h3 id="使用-Nginx-反向代理解决跨域问题"><a href="#使用-Nginx-反向代理解决跨域问题" class="headerlink" title="使用 Nginx 反向代理解决跨域问题"></a>使用 Nginx 反向代理解决跨域问题</h3><p>以上跨域问题解决方案都需要服务器支持，当服务器无法设置 <code>header</code> 或提供 <code>callback</code> 时我们就可以采用 Nginx 反向代理的方式解决跨域问题。</p><p>Nginx 配置跨域案例，在 <code>nginx.conf</code> 的 <code>location</code> 中增加如下配置：</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">add_header</span> Access<span class="token operator">-</span>Control<span class="token operator">-</span><span class="token keyword">Allow</span><span class="token operator">-</span>Origin <span class="token operator">*</span>或域名<span class="token punctuation">;</span><span class="token keyword">add_header</span> Access<span class="token operator">-</span>Control<span class="token operator">-</span><span class="token keyword">Allow</span><span class="token operator">-</span>Headers X<span class="token operator">-</span>Requested<span class="token operator">-</span>With<span class="token punctuation">;</span><span class="token keyword">add_header</span> Access<span class="token operator">-</span>Control<span class="token operator">-</span><span class="token keyword">Allow</span><span class="token operator">-</span>Methods GET<span class="token punctuation">,</span>POST<span class="token punctuation">,</span>OPTIONS<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如：</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">user</span>  nginx<span class="token punctuation">;</span><span class="token keyword">worker_processes</span>  <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">events</span> <span class="token punctuation">{</span>    <span class="token keyword">worker_connections</span>  <span class="token number">1024</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">http</span> <span class="token punctuation">{</span>    <span class="token keyword">include</span>       mime<span class="token punctuation">.</span><span class="token keyword">types</span><span class="token punctuation">;</span>    <span class="token keyword">default_type</span>  application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span>    <span class="token keyword">sendfile</span>        on<span class="token punctuation">;</span>    <span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span><span class="token punctuation">;</span>    <span class="token keyword">server</span> <span class="token punctuation">{</span>        <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span>        <span class="token keyword">server_name</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">75.128</span><span class="token punctuation">;</span>        <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>            <span class="token keyword">add_header</span> Access<span class="token operator">-</span>Control<span class="token operator">-</span><span class="token keyword">Allow</span><span class="token operator">-</span>Origin <span class="token operator">*</span><span class="token punctuation">;</span>            <span class="token keyword">add_header</span> Access<span class="token operator">-</span>Control<span class="token operator">-</span><span class="token keyword">Allow</span><span class="token operator">-</span>Headers X<span class="token operator">-</span>Requested<span class="token operator">-</span>With<span class="token punctuation">;</span>            <span class="token keyword">add_header</span> Access<span class="token operator">-</span>Control<span class="token operator">-</span><span class="token keyword">Allow</span><span class="token operator">-</span>Methods GET<span class="token punctuation">,</span>POST<span class="token punctuation">,</span>OPTIONS<span class="token punctuation">;</span>            <span class="token keyword">root</span> <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>wwwroot<span class="token operator">/</span>cdn<span class="token punctuation">;</span>            <span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>jsp <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Spring-Boot代码配置跨域"><a href="#Spring-Boot代码配置跨域" class="headerlink" title="Spring Boot代码配置跨域"></a>Spring Boot代码配置跨域</h3><h4 id="使用-Java-配置的方式"><a href="#使用-Java-配置的方式" class="headerlink" title="使用 Java 配置的方式"></a>使用 Java 配置的方式</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 跨域配置 * &lt;p>Title: CorsConfiguration&lt;/p> * &lt;p>Description: &lt;/p> * * @author Lusifer * @version 1.0.0 * @date 2018/3/8 22:56 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CORSConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span>CorsRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allowedOrigins</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"HEAD"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"PUT"</span><span class="token punctuation">,</span> <span class="token string">"DELETE"</span><span class="token punctuation">,</span> <span class="token string">"OPTIONS"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowCredentials</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用注解的方式"><a href="#使用注解的方式" class="headerlink" title="使用注解的方式"></a>使用注解的方式</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@CrossOrigin</span><span class="token punctuation">(</span>origins <span class="token operator">=</span> <span class="token string">"*"</span><span class="token punctuation">,</span> maxAge <span class="token operator">=</span> <span class="token number">3600</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 跨域问题解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js模板</title>
      <link href="/2019/01/18/Js%E6%A8%A1%E6%9D%BF/"/>
      <url>/2019/01/18/Js%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="第一种模板"><a href="#第一种模板" class="headerlink" title="第一种模板"></a>第一种模板</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> demo <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * 数据域    **/</span>    url<span class="token punctuation">:</span> <span class="token punctuation">{</span>        host<span class="token punctuation">:</span><span class="token string">"localhost"</span><span class="token punctuation">,</span>        port<span class="token punctuation">:</span> <span class="token string">"80"</span><span class="token punctuation">,</span>        uri<span class="token punctuation">:</span> <span class="token string">"/demo/user/get"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**    * 初始化操作    **/</span>    init<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//调用function</span>       demo<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span>url<span class="token punctuation">.</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**    * 业务处理    **/</span>    handle <span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//do...</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">jQuery</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//方法入口</span>    demo<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第二种模板"><a href="#第二种模板" class="headerlink" title="第二种模板"></a>第二种模板</h2><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 部门实体类 */</span><span class="token keyword">var</span> Dept <span class="token operator">=</span> <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//表格id</span>    name<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数体"><a href="#函数体" class="headerlink" title="函数体"></a>函数体</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 初始化 */</span>Dept<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//do...</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 删除操作 */</span>Dept<span class="token punctuation">.</span><span class="token keyword">delete</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//do...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 函数调用 */</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Dept<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Dept<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Js模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux目录结构</title>
      <link href="/2019/01/18/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
      <url>/2019/01/18/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Linux/linux目录结构.png" alt="Linux目录结构.png"></p><table><thead><tr><th>目录</th><th>说明</th></tr></thead><tbody><tr><td>bin</td><td>存放二进制可执行文件 (ls,cat,mkdir 等)</td></tr><tr><td>boot</td><td>存放用于系统引导时使用的各种文件</td></tr><tr><td>dev</td><td>用于存放设备文件</td></tr><tr><td>etc</td><td>存放系统配置文件</td></tr><tr><td>home</td><td>存放所有用户文件的根目录</td></tr><tr><td>lib</td><td>存放跟文件系统中的程序运行所需要的共享库及内核模块</td></tr><tr><td>mnt</td><td>系统管理员安装临时文件系统的安装点</td></tr><tr><td>opt</td><td>额外安装的可选应用程序包所放置的位置</td></tr><tr><td>proc</td><td>虚拟文件系统，存放当前内存的映射</td></tr><tr><td>root</td><td>超级用户目录</td></tr><tr><td>sbin</td><td>存放二进制可执行文件，只有 root 才能访问</td></tr><tr><td>tmp</td><td>用于存放各种临时文件</td></tr><tr><td>usr</td><td>用于存放系统应用程序，比较重要的目录 / usr/local 本地管理员软件安装目录</td></tr><tr><td>var</td><td>用于存放运行时需要改变数据的文件</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux目录结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令</title>
      <link href="/2019/01/18/Linux%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/01/18/Linux%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><ul><li>文件移动、删除、复制</li></ul><pre class="line-numbers language-bash"><code class="language-bash">//查看倒数100行的文件内容<span class="token function">tail</span> -100f <span class="token operator">&lt;</span>file_name<span class="token operator">></span>//移动a.text文件到/home/app目录<span class="token function">mv</span> a.txt /home/app //移动a.txt并把名字改成b.txt<span class="token function">mv</span> a.txt /home/app/b.txt//把当前目录下的a.txt复制到/home/app 目录下<span class="token function">cp</span> a.txt /home/app//删除文件夹或文件<span class="token function">rm</span> -rf  /asia -r:强制删除文件或目录-f：删除的时候递归处理，目录下所有子目录里的都删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>解压和压缩</li></ul><pre class="line-numbers language-bash"><code class="language-bash">//解压tar包，file.tar到当前目录<span class="token function">tar</span> –xzvf file.tar //解压zip包，project.war解压到指定文件夹asiaunzip -oq  project.war -d /asia//压缩tar包单个文件压缩，把file1压缩成一个名字是abc.tar包中<span class="token function">tar</span> -czvf abc.tar file_name//多个文件压缩<span class="token function">tar</span> -czvf abc.tar file1 file2//压缩目录,把目录dir1压缩成abc.tar中<span class="token function">tar</span> -czvf abc.tar dir1//压缩多个目录,把目录dir1和dir2压缩成abc.tar中<span class="token function">tar</span> -czvf abc.tar dir1 dir2//压缩成zip包,单个文件压缩，把file1压缩成一个名字是abc.zip包中<span class="token function">zip</span> -r abc.zip file1//多个文件压缩,把文件file1和file2压缩到一个名字是abc.zip包中<span class="token function">zip</span> -r abc.zip file1 file2//单个目录压缩,把目录dir1压缩成abc.zip中<span class="token function">zip</span> -r abc.zip dir1//多个目录压缩把目录dir1和dir2压缩成abc.zip中<span class="token function">zip</span> -r abc.zip dir1 dir2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>日志查看</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tail</span> -f test.log //打印最后几行，同时如果有也会滚动显示最新的日志<span class="token function">tail</span> -F test.log //和f区别：例如test.log文件大小达到上限，自动创建一个test.log.1区存储日志，F能自动跟踪到新的文件显示日志<span class="token function">tail</span> -n 100 test.log //显示最后100行<span class="token function">tail</span> -n +100 test.log //从100行开始显示<span class="token function">tail</span> -n -100 test.log //显示100行之前的<span class="token function">cat</span> test.log  //一次显示日志全部内容<span class="token function">cat</span> -n test.log参数：-n 或 --number 由 1 开始对所有输出的行数编号-b 或 --number-nonblank 和 -n 相似，只不过对于空白行不编号-s 或 --squeeze-blank 当遇到有连续两行以上的空白行，就代换为一行的空白行-v 或 --show-nonprinting<span class="token function">more</span> test.log  //分页查看，一次显示一页空格表示显示下一页 ，b返回上一页，退出按q <span class="token function">less</span> test.log   //一行或一页的查看<span class="token punctuation">(</span>中文显示可能有问题<span class="token punctuation">)</span>，另带搜索功能使用上下键控制上一行和下一行，使用空格和b可以一页一页的翻按’/’+匹配字符，然后回车搜索，再按n表示下一个匹配到的位置<span class="token function">grep</span> 13253638359 test.log  //在test.log文件中搜索这个手机号字段<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#修改file文件的权限为最高级</span>修改文件权限： <span class="token function">chmod</span> 777 file_name   <span class="token comment" spellcheck="true">#给文件增加执行权限</span><span class="token function">chmod</span> +X file_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="系统操作"><a href="#系统操作" class="headerlink" title="系统操作"></a>系统操作</h2><pre class="line-numbers language-bash"><code class="language-bash">//存储查看<span class="token function">df</span> -h//查看内存使用情况<span class="token function">top</span><span class="token function">cat</span> /proc/meminfo <span class="token operator">|</span><span class="token function">more</span>//查看指定目录的存储大小<span class="token function">du</span>                   不指定目录的话，默认是当前目录下所有目录和目录下的子目录的存储大小，单位是kb<span class="token function">du</span> /logs            查看当前目录下的logs目录的存储大小，如果logs目录下有子目录的话，也会显示出子目录的存储大小<span class="token function">du</span> -sh  *           查看当前目录下的各个文件或目录的大小，不显示子目录，单位是Mb,  *可以替换成指定目录 //切换用户<span class="token function">su</span>  root //切换到root用户//查看Java进程jps  //输出结果是：端口+进程名称//查看应用对应端口<span class="token function">netstat</span> -nltp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计一个良好的Rest API</title>
      <link href="/2019/01/18/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E8%89%AF%E5%A5%BD%E7%9A%84-API/"/>
      <url>/2019/01/18/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E8%89%AF%E5%A5%BD%E7%9A%84-API/</url>
      
        <content type="html"><![CDATA[<h2 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h2><p>在 RESTful API 中，API 接口应该尽量兼容之前的版本。但是，在实际业务开发场景中，可能随着业务需求的不断迭代，现有的 API 接口无法支持旧版本的适配，此时如果强制升级服务端的 API 接口将导致客户端旧有功能出现故障。实际上，Web 端是部署在服务器，因此它可以很容易为了适配服务端的新的 API 接口进行版本升级，然而像 Android 端、IOS 端、PC 端等其他客户端是运行在用户的机器上，因此当前产品很难做到适配新的服务端的 API 接口，从而出现功能故障，这种情况下，用户必须升级产品到最新的版本才能正常使用。</p><p>为了解决这个版本不兼容问题，在设计 RESTful API 的一种实用的做法是使用版本号。一般情况下，我们会在 url 中保留版本号，并同时兼容多个版本。</p><pre class="line-numbers language-java"><code class="language-java">【GET】  <span class="token operator">/</span>v1<span class="token operator">/</span>users<span class="token operator">/</span><span class="token punctuation">{</span>user_id<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 版本 v1 的查询用户列表的 API 接口</span>【GET】  <span class="token operator">/</span>v2<span class="token operator">/</span>users<span class="token operator">/</span><span class="token punctuation">{</span>user_id<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 版本 v2 的查询用户列表的 API 接口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>现在，我们可以不改变版本 v1 的查询用户列表的 API 接口的情况下，新增版本 v2 的查询用户列表的 API 接口以满足新的业务需求，此时，客户端的产品的新功能将请求新的服务端的 API 接口地址。虽然服务端会同时兼容多个版本，但是同时维护太多版本对于服务端而言是个不小的负担，因为服务端要维护多套代码。这种情况下，常见的做法不是维护所有的兼容版本，而是只维护最新的几个兼容版本，例如维护最新的三个兼容版本。在一段时间后，当绝大多数用户升级到较新的版本后，废弃一些使用量较少的服务端的老版本 API 接口版本，并要求使用产品的非常旧的版本的用户强制升级。</p><p>注意的是，“不改变版本 v1 的查询用户列表的 API 接口” 主要指的是对于客户端的调用者而言它看起来是没有改变。而实际上，如果业务变化太大，服务端的开发人员需要对旧版本的 API 接口使用适配器模式将请求适配到新的 API 接口上。</p><h3 id="资源路径"><a href="#资源路径" class="headerlink" title="资源路径"></a>资源路径</h3><p>RESTful API 的设计以资源为核心，每一个 URI 代表一种资源。因此，URI 不能包含动词，只能是名词。注意的是，形容词也是可以使用的，但是尽量少用。一般来说，不论资源是单个还是多个，API 的名词要以复数进行命名。此外，命名名词的时候，要使用小写、数字及下划线来区分多个单词。这样的设计是为了与 json 对象及属性的命名方案保持一致。例如，一个查询系统标签的接口可以进行如下设计。</p><pre class="line-numbers language-java"><code class="language-java">【GET】  <span class="token operator">/</span>v1<span class="token operator">/</span>tags<span class="token operator">/</span><span class="token punctuation">{</span>tag_id<span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同时，资源的路径应该从根到子依次如下</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">/</span><span class="token punctuation">{</span>resources<span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">{</span>resource_id<span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">{</span>sub_resources<span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">{</span>sub_resource_id<span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">{</span>sub_resource_property<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们来看一个 “添加用户的角色” 的设计，其中 “用户” 是主资源，“角色” 是子资源。</p><pre class="line-numbers language-java"><code class="language-java">【POST】  <span class="token operator">/</span>v1<span class="token operator">/</span>users<span class="token operator">/</span><span class="token punctuation">{</span>user_id<span class="token punctuation">}</span><span class="token operator">/</span>roles<span class="token operator">/</span><span class="token punctuation">{</span>role_id<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 添加用户的角色</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>有的时候，当一个资源变化难以使用标准的 RESTful API 来命名，可以考虑使用一些特殊的 actions 命名。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">/</span><span class="token punctuation">{</span>resources<span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">{</span>resource_id<span class="token punctuation">}</span><span class="token operator">/</span>actions<span class="token operator">/</span><span class="token punctuation">{</span>action<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>举个例子，“密码修改” 这个接口的命名很难完全使用名词来构建路径，此时可以引入 action 命名。</p><pre class="line-numbers language-basic"><code class="language-basic">【<span class="token keyword">PUT</span>】  <span class="token operator">/</span>v1<span class="token operator">/</span>users<span class="token operator">/</span>{user_id}<span class="token operator">/</span>password<span class="token operator">/</span>actions<span class="token operator">/</span>modify <span class="token operator">/</span><span class="token operator">/</span> 密码修改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h3><p>可以通过 GET、 POST、 PUT、 PATCH、 DELETE 等方式对服务端的资源进行操作。其中：</p><ul><li>GET：用于查询资源</li><li>POST：用于创建资源</li><li>PUT：用于更新服务端的资源的全部信息</li><li>PATCH：用于更新服务端的资源的部分信息</li><li>DELETE：用于删除服务端的资源。</li></ul><p>这里，使用 “用户” 的案例进行回顾通过 GET、 POST、 PUT、 PATCH、 DELETE 等方式对服务端的资源进行操作。</p><pre class="line-numbers language-java"><code class="language-java">【GET】          <span class="token operator">/</span>users                # 查询用户信息列表【GET】          <span class="token operator">/</span>users<span class="token operator">/</span><span class="token number">1001</span>           # 查看某个用户信息【POST】         <span class="token operator">/</span>users                # 新建用户信息【PUT】          <span class="token operator">/</span>users<span class="token operator">/</span><span class="token number">1001</span>           # 更新用户信息<span class="token punctuation">(</span>全部字段<span class="token punctuation">)</span>【PATCH】        <span class="token operator">/</span>users<span class="token operator">/</span><span class="token number">1001</span>           # 更新用户信息<span class="token punctuation">(</span>部分字段<span class="token punctuation">)</span>【DELETE】       <span class="token operator">/</span>users<span class="token operator">/</span><span class="token number">1001</span>           # 删除用户信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询参数"><a href="#查询参数" class="headerlink" title="查询参数"></a>查询参数</h3><p>RESTful API 接口应该提供参数，过滤返回结果。其中，offset 指定返回记录的开始位置。一般情况下，它会结合 limit 来做分页的查询，这里 limit 指定返回记录的数量。</p><pre class="line-numbers language-java"><code class="language-java">【GET】  <span class="token operator">/</span><span class="token punctuation">{</span>version<span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">{</span>resources<span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">{</span>resource_id<span class="token punctuation">}</span><span class="token operator">?</span>offset<span class="token operator">=</span><span class="token number">0</span><span class="token operator">&amp;</span>limit<span class="token operator">=</span><span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同时，orderby 可以用来排序，但仅支持单个字符的排序，如果存在多个字段排序，需要业务中扩展其他参数进行支持。</p><pre class="line-numbers language-java"><code class="language-java">【GET】  <span class="token operator">/</span><span class="token punctuation">{</span>version<span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">{</span>resources<span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">{</span>resource_id<span class="token punctuation">}</span><span class="token operator">?</span>orderby<span class="token operator">=</span><span class="token punctuation">{</span>field<span class="token punctuation">}</span> <span class="token punctuation">[</span>asc<span class="token operator">|</span>desc<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为了更好地选择是否支持查询总数，我们可以使用 count 字段，count 表示返回数据是否包含总条数，它的默认值为 false。</p><pre class="line-numbers language-java"><code class="language-java">【GET】  <span class="token operator">/</span><span class="token punctuation">{</span>version<span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">{</span>resources<span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">{</span>resource_id<span class="token punctuation">}</span><span class="token operator">?</span>count<span class="token operator">=</span><span class="token punctuation">[</span><span class="token boolean">true</span><span class="token operator">|</span><span class="token boolean">false</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面介绍的 offset、 limit、 orderby 是一些公共参数。此外，业务场景中还存在许多个性化的参数。我们来看一个例子。</p><pre class="line-numbers language-java"><code class="language-java">【GET】  <span class="token operator">/</span>v1<span class="token operator">/</span>categorys<span class="token operator">/</span><span class="token punctuation">{</span>category_id<span class="token punctuation">}</span><span class="token operator">/</span>apps<span class="token operator">/</span><span class="token punctuation">{</span>app_id<span class="token punctuation">}</span><span class="token operator">?</span>enable<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>os_type<span class="token operator">=</span><span class="token punctuation">{</span>field<span class="token punctuation">}</span><span class="token operator">&amp;</span>device_ids<span class="token operator">=</span><span class="token punctuation">{</span>field<span class="token punctuation">,</span>field<span class="token punctuation">,</span>…<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意的是，不要过度设计，只返回用户需要的查询参数。此外，需要考虑是否对查询参数创建数据库索引以提高查询性能。</p><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>使用适合的状态码很重要，而不应该全部都返回状态码 200，或者随便乱使用。这里，列举在实际开发过程中常用的一些状态码，以供参考。</p><table><thead><tr><th>状态码</th><th>描述</th></tr></thead><tbody><tr><td>200</td><td>请求成功</td></tr><tr><td>201</td><td>创建成功</td></tr><tr><td>400</td><td>错误的请求</td></tr><tr><td>401</td><td>未验证</td></tr><tr><td>403</td><td>被拒绝</td></tr><tr><td>404</td><td>无法找到</td></tr><tr><td>409</td><td>资源冲突</td></tr><tr><td>500</td><td>服务器内部错误</td></tr></tbody></table><h3 id="异常响应"><a href="#异常响应" class="headerlink" title="异常响应"></a>异常响应</h3><p>当 RESTful API 接口出现非 2xx 的 HTTP 错误码响应时，采用全局的异常结构响应信息。</p><pre class="line-numbers language-json"><code class="language-json">HTTP/<span class="token number">1.1</span> <span class="token number">400</span> Bad RequestContent-Type<span class="token operator">:</span> application/json<span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token string">"INVALID_ARGUMENT"</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"{error message}"</span><span class="token punctuation">,</span>    <span class="token property">"cause"</span><span class="token operator">:</span> <span class="token string">"{cause message}"</span><span class="token punctuation">,</span>    <span class="token property">"request_id"</span><span class="token operator">:</span> <span class="token string">"01234567-89ab-cdef-0123-456789abcdef"</span><span class="token punctuation">,</span>    <span class="token property">"host_id"</span><span class="token operator">:</span> <span class="token string">"{server identity}"</span><span class="token punctuation">,</span>    <span class="token property">"server_time"</span><span class="token operator">:</span> <span class="token string">"2014-01-01T12:00:00Z"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h3><p>在设计服务端的 RESTful API 的时候，我们还需要对请求参数进行限制说明。例如一个支持批量查询的接口，我们要考虑最大支持查询的数量。</p><pre class="line-numbers language-java"><code class="language-java">【GET】     <span class="token operator">/</span>v1<span class="token operator">/</span>users<span class="token operator">/</span>batch<span class="token operator">?</span>user_ids<span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token number">1002</span>      <span class="token comment" spellcheck="true">// 批量查询用户信息</span>参数说明<span class="token operator">-</span> user_ids<span class="token operator">:</span> 用户ID串，最多允许 <span class="token number">20</span> 个。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此外，在设计新增或修改接口时，我们还需要在文档中明确告诉调用者哪些参数是必填项，哪些是选填项，以及它们的边界值的限制。</p><pre class="line-numbers language-json"><code class="language-json">【POST】     /v1/users                             // 创建用户信息请求内容<span class="token punctuation">{</span>    <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"lusifer"</span><span class="token punctuation">,</span>                 // 必填<span class="token punctuation">,</span> 用户名称<span class="token punctuation">,</span> max <span class="token number">10</span>    <span class="token property">"realname"</span><span class="token operator">:</span> <span class="token string">"鲁斯菲尔"</span><span class="token punctuation">,</span>               // 必填<span class="token punctuation">,</span> 用户名称<span class="token punctuation">,</span> max <span class="token number">10</span>    <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">"123456"</span><span class="token punctuation">,</span>              // 必填<span class="token punctuation">,</span> 用户密码<span class="token punctuation">,</span> max <span class="token number">32</span>    <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"topsale@vip.qq.com"</span><span class="token punctuation">,</span>     // 选填<span class="token punctuation">,</span> 电子邮箱<span class="token punctuation">,</span> max <span class="token number">32</span>    <span class="token property">"weixin"</span><span class="token operator">:</span> <span class="token string">"Lusifer"</span><span class="token punctuation">,</span>            // 选填，微信账号<span class="token punctuation">,</span> max <span class="token number">32</span>    <span class="token property">"sex"</span><span class="token operator">:</span> <span class="token number">1</span>                           // 必填<span class="token punctuation">,</span> 用户性别<span class="token punctuation">[</span><span class="token number">1</span>-男 <span class="token number">2</span>-女 <span class="token number">99</span>-未知<span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="响应参数"><a href="#响应参数" class="headerlink" title="响应参数"></a>响应参数</h3><p>针对不同操作，服务端向用户返回的结果应该符合以下规范。</p><pre class="line-numbers language-java"><code class="language-java">【GET】     <span class="token operator">/</span><span class="token punctuation">{</span>version<span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">{</span>resources<span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">{</span>resource_id<span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 返回单个资源对象</span>【GET】     <span class="token operator">/</span><span class="token punctuation">{</span>version<span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">{</span>resources<span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 返回资源对象的列表</span>【POST】    <span class="token operator">/</span><span class="token punctuation">{</span>version<span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">{</span>resources<span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 返回新生成的资源对象</span>【PUT】     <span class="token operator">/</span><span class="token punctuation">{</span>version<span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">{</span>resources<span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">{</span>resource_id<span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 返回完整的资源对象</span>【PATCH】   <span class="token operator">/</span><span class="token punctuation">{</span>version<span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">{</span>resources<span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">{</span>resource_id<span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 返回完整的资源对象</span>【DELETE】  <span class="token operator">/</span><span class="token punctuation">{</span>version<span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">{</span>resources<span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">{</span>resource_id<span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 状态码 200，返回完整的资源对象。</span>                                                      <span class="token comment" spellcheck="true">// 状态码 204，返回一个空文档</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是单条数据，则返回一个对象的 JSON 字符串。</p><pre class="line-numbers language-json"><code class="language-json">HTTP/<span class="token number">1.1</span> <span class="token number">200</span> OK<span class="token punctuation">{</span>    <span class="token property">"id"</span> <span class="token operator">:</span> <span class="token string">"01234567-89ab-cdef-0123-456789abcdef"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"example"</span><span class="token punctuation">,</span>    <span class="token property">"created_time"</span><span class="token operator">:</span> <span class="token number">1496676420000</span><span class="token punctuation">,</span>    <span class="token property">"updated_time"</span><span class="token operator">:</span> <span class="token number">1496676420000</span><span class="token punctuation">,</span>    ...<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是列表数据，则返回一个封装的结构体。</p><pre class="line-numbers language-json"><code class="language-json">HTTP/<span class="token number">1.1</span> <span class="token number">200</span> OK<span class="token punctuation">{</span>    <span class="token property">"count"</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span>    <span class="token property">"items"</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"id"</span> <span class="token operator">:</span> <span class="token string">"01234567-89ab-cdef-0123-456789abcdef"</span><span class="token punctuation">,</span>            <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"example"</span><span class="token punctuation">,</span>            <span class="token property">"created_time"</span><span class="token operator">:</span> <span class="token number">1496676420000</span><span class="token punctuation">,</span>            <span class="token property">"updated_time"</span><span class="token operator">:</span> <span class="token number">1496676420000</span><span class="token punctuation">,</span>            ...        <span class="token punctuation">}</span><span class="token punctuation">,</span>        ...    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一个完整的案例"><a href="#一个完整的案例" class="headerlink" title="一个完整的案例"></a>一个完整的案例</h3><p>最后，我们使用一个完整的案例将前面介绍的知识整合起来。这里，使用 “获取用户列表” 的案例。</p><pre class="line-numbers language-json"><code class="language-json">【GET】     /v1/users?<span class="token punctuation">[</span>&amp;keyword=xxx<span class="token punctuation">]</span><span class="token punctuation">[</span>&amp;enable=<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>&amp;offset=<span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>&amp;limit=<span class="token number">20</span><span class="token punctuation">]</span> 获取用户列表功能说明：获取用户列表请求方式：GET参数说明- keyword<span class="token operator">:</span> 模糊查找的关键字。<span class="token punctuation">[</span>选填<span class="token punctuation">]</span>- enable<span class="token operator">:</span> 启用状态<span class="token punctuation">[</span><span class="token number">1</span>-启用 <span class="token number">2</span>-禁用<span class="token punctuation">]</span>。<span class="token punctuation">[</span>选填<span class="token punctuation">]</span>- offset<span class="token operator">:</span> 获取位置偏移，从 <span class="token number">0</span> 开始。<span class="token punctuation">[</span>选填<span class="token punctuation">]</span>- limit<span class="token operator">:</span> 每次获取返回的条数，缺省为 <span class="token number">20</span> 条，最大不超过 <span class="token number">100</span>。 <span class="token punctuation">[</span>选填<span class="token punctuation">]</span>响应内容HTTP/<span class="token number">1.1</span> <span class="token number">200</span> OK<span class="token punctuation">{</span>    <span class="token property">"count"</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span>    <span class="token property">"items"</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"id"</span> <span class="token operator">:</span> <span class="token string">"01234567-89ab-cdef-0123-456789abcdef"</span><span class="token punctuation">,</span>            <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"example"</span><span class="token punctuation">,</span>            <span class="token property">"created_time"</span><span class="token operator">:</span> <span class="token number">1496676420000</span><span class="token punctuation">,</span>            <span class="token property">"updated_time"</span><span class="token operator">:</span> <span class="token number">1496676420000</span><span class="token punctuation">,</span>            ...        <span class="token punctuation">}</span><span class="token punctuation">,</span>        ...    <span class="token punctuation">]</span><span class="token punctuation">}</span>失败响应HTTP/<span class="token number">1.1</span> <span class="token number">403</span> UC/AUTH_DENIEDContent-Type<span class="token operator">:</span> application/json<span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token string">"INVALID_ARGUMENT"</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"{error message}"</span><span class="token punctuation">,</span>    <span class="token property">"cause"</span><span class="token operator">:</span> <span class="token string">"{cause message}"</span><span class="token punctuation">,</span>    <span class="token property">"request_id"</span><span class="token operator">:</span> <span class="token string">"01234567-89ab-cdef-0123-456789abcdef"</span><span class="token punctuation">,</span>    <span class="token property">"host_id"</span><span class="token operator">:</span> <span class="token string">"{server identity}"</span><span class="token punctuation">,</span>    <span class="token property">"server_time"</span><span class="token operator">:</span> <span class="token string">"2014-01-01T12:00:00Z"</span><span class="token punctuation">}</span>错误代码- <span class="token number">403</span> UC/AUTH_DENIED    授权受限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计一个良好的 API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RESTful </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESTful API 的幂等性</title>
      <link href="/2019/01/18/RESTful-API-%E7%9A%84%E5%B9%82%E7%AD%89%E6%80%A7/"/>
      <url>/2019/01/18/RESTful-API-%E7%9A%84%E5%B9%82%E7%AD%89%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是幂等性"><a href="#什么是幂等性" class="headerlink" title="什么是幂等性"></a>什么是幂等性</h2><p>HTTP 幂等方法，是指无论调用多少次都不会有不同结果的 HTTP 方法。不管你调用一次，还是调用一百次，一千次，结果都是相同的。</p><pre class="line-numbers language-bash"><code class="language-bash">GET     /tickets       <span class="token comment" spellcheck="true"># 获取ticket列表</span>GET     /tickets/12    <span class="token comment" spellcheck="true"># 查看某个具体的ticket</span>POST    /tickets       <span class="token comment" spellcheck="true"># 新建一个ticket</span>PUT     /tickets/12    <span class="token comment" spellcheck="true"># 更新ticket 12</span>PATCH   /tickets/12    <span class="token comment" spellcheck="true"># 更新ticket 12</span>DELETE  /tickets/12    <span class="token comment" spellcheck="true"># 删除ticekt 12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>###HTTP GET 方法</p><p>HTTP GET 方法，用于获取资源，不管调用多少次接口，结果都不会改变，所以是幂等的。</p><pre class="line-numbers language-bash"><code class="language-bash">GET     /tickets       <span class="token comment" spellcheck="true"># 获取ticket列表</span>GET     /tickets/12    <span class="token comment" spellcheck="true"># 查看某个具体的ticket</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>只是查询数据，不会影响到资源的变化，因此我们认为它幂等。</p><p>值得注意，幂等性指的是作用于结果而非资源本身。怎么理解呢？例如，这个 HTTP GET 方法可能会每次得到不同的返回内容，但并不影响资源。</p><p>可能你会问有这种情况么？当然有咯。例如，我们有一个接口获取当前时间，我们就应该设计成</p><pre class="line-numbers language-bash"><code class="language-bash">GET     /service_time <span class="token comment" spellcheck="true"># 获取服务器当前时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>它本身不会对资源本身产生影响，因此满足幂等性。</p><p>###HTTP POST 方法</p><p>HTTP POST 方法是一个非幂等方法，因为调用多次，都将产生新的资源。</p><pre class="line-numbers language-bash"><code class="language-bash">POST    /tickets       <span class="token comment" spellcheck="true"># 新建一个ticket</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因为它会对资源本身产生影响，每次调用都会有新的资源产生，因此不满足幂等性。</p><h3 id="HTTP-PUT-方法"><a href="#HTTP-PUT-方法" class="headerlink" title="HTTP PUT 方法"></a>HTTP PUT 方法</h3><p>HTTP PUT 方法是不是幂等的呢？我们来看下</p><pre class="line-numbers language-bash"><code class="language-bash">PUT     /tickets/12    <span class="token comment" spellcheck="true"># 更新ticket 12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因为它直接把实体部分的数据替换到服务器的资源，我们多次调用它，只会产生一次影响，但是有相同结果的 HTTP 方法，所以满足幂等性。</p><h3 id="HTTP-PATCH-方法"><a href="#HTTP-PATCH-方法" class="headerlink" title="HTTP PATCH 方法"></a>HTTP PATCH 方法</h3><p>HTTP PATCH 方法是非幂等的。HTTP POST 方法和 HTTP PUT 方法可能比较好理解，但是 HTTP PATCH 方法只是更新部分资源，怎么是非幂等的呢?</p><p>因为，PATCH 提供的实体则需要根据程序或其它协议的定义，解析后在服务器上执行，以此来修改服务器上的资源。换句话说，PATCH 请求是会执行某个程序的，如果重复提交，程序可能执行多次，对服务器上的资源就可能造成额外的影响，这就可以解释它为什么是非幂等的了。</p><p>可能你还不能理解这点。我们举个例子</p><pre class="line-numbers language-bash"><code class="language-bash">PATCH   /tickets/12    <span class="token comment" spellcheck="true"># 更新ticket 12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时，我们服务端对方法的处理是，当调用一次方法，更新部分字段，将这条 ticket 记录的操作记录加一，这次，每次调用的资源是不是变了呢，所以它是有可能是非幂等的操作。</p><h3 id="HTTP-DELETE-方法"><a href="#HTTP-DELETE-方法" class="headerlink" title="HTTP DELETE 方法"></a>HTTP DELETE 方法</h3><p>HTTP DELETE 方法用于删除资源，会将资源删除。</p><pre class="line-numbers language-bash"><code class="language-bash">DELETE  /tickets/12    <span class="token comment" spellcheck="true"># 删除ticekt 12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>调用一次和多次对资源产生影响是相同的，所以也满足幂等性。</p><h2 id="如何设计符合幂等性的高质量-RESTful-API"><a href="#如何设计符合幂等性的高质量-RESTful-API" class="headerlink" title="如何设计符合幂等性的高质量 RESTful API"></a>如何设计符合幂等性的高质量 RESTful API</h2><h3 id="HTTP-GET-vs-HTTP-POST"><a href="#HTTP-GET-vs-HTTP-POST" class="headerlink" title="HTTP GET vs HTTP POST"></a>HTTP GET vs HTTP POST</h3><p>也许，你会想起一个面试题。<strong>HTTP 请求的 GET 与 POST 方式有什么区别？</strong> 你可能会回答到：GET 方式通过 URL 提交数据，数据在 URL 中可以看到；POST 方式，数据放置在 HTML HEADER 内提交。但是，我们现在从 RESTful 的资源角度来看待问题，HTTP GET 方法是幂等的，所以它适合作为查询操作，HTTP POST 方法是非幂等的，所以用来表示新增操作。</p><p>但是，也有例外，我们有的时候可能需要把查询方法改造成 HTTP POST 方法。比如，超长（1k）的 GET URL 使用 POST 方法来替代，因为 GET 受到 URL 长度的限制。虽然，它不符合幂等性，但是它是一种折中的方案。</p><h3 id="HTTP-POST-vs-HTTP-PUT"><a href="#HTTP-POST-vs-HTTP-PUT" class="headerlink" title="HTTP POST vs HTTP PUT"></a>HTTP POST vs HTTP PUT</h3><p>对于 HTTP POST 方法和 HTTP PUT 方法，我们一般的理解是 POST 表示创建资源，PUT 表示更新资源。当然，这个是正确的理解。</p><p>但是，实际上，两个方法都用于创建资源，更为本质的差别是在幂等性。HTTP POST 方法是非幂等，所以用来表示创建资源，HTTP PUT 方法是幂等的，因此表示更新资源更加贴切。</p><h3 id="HTTP-PUT-vs-HTTP-PATCH"><a href="#HTTP-PUT-vs-HTTP-PATCH" class="headerlink" title="HTTP PUT vs HTTP PATCH"></a>HTTP PUT vs HTTP PATCH</h3><p>此时，你看会有另外一个问题。HTTP PUT 方法和 HTTP PATCH 方法，都是用来表述更新资源，它们之间有什么区别呢？我们一般的理解是 PUT 表示更新全部资源，PATCH 表示更新部分资源。首先，这个是我们遵守的第一准则。根据上面的描述，PATCH 方法是非幂等的，因此我们在设计我们服务端的 RESTful API 的时候，也需要考虑。如果，我们想要明确的告诉调用者我们的资源是幂等的，我的设计更倾向于使用 HTTP PUT 方法。</p>]]></content>
      
      
      <categories>
          
          <category> RESTful API 的幂等性 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RESTful </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot配置拦截器和过滤器</title>
      <link href="/2019/01/16/Spring-Boot%E9%85%8D%E7%BD%AE%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/2019/01/16/Spring-Boot%E9%85%8D%E7%BD%AE%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、拦截器与过滤器"><a href="#一、拦截器与过滤器" class="headerlink" title="一、拦截器与过滤器"></a>一、拦截器与过滤器</h2><p>　　在讲 Spring boot 之前，我们先了解一下过滤器和拦截器。这两者在功能方面很类似，但是在具体技术实现方面，差距还是比较大的。在分析两者的区别之前，我们先理解一下 AOP 的概念，AOP 不是一种具体的技术，而是一种编程思想。在面向对象编程的过程中，我们很容易通过继承、多态来解决纵向扩展。 但是对于横向的功能，比如，在所有的 service 方法中开启事务，或者统一记录日志等功能，面向对象的是无法解决的。所以 AOP——面向切面编程其实是面向对象编程思想的一个补充。而我们今天讲的过滤器和拦截器都属于面向切面编程的具体实现。而两者的主要区别包括以下几个方面：</p><p>　　1、Filter 是依赖于 Servlet 容器，属于 Servlet 规范的一部分，而拦截器则是独立存在的，可以在任何情况下使用。</p><p>　　2、Filter 的执行由 Servlet 容器回调完成，而拦截器通常通过动态代理的方式来执行。</p><p>　　3、Filter 的生命周期由 Servlet 容器管理，而拦截器则可以通过 IoC 容器来管理，因此可以通过注入等方式来获取其他 Bean 的实例，因此使用会更方便。</p><h2 id="二、过滤器的配置"><a href="#二、过滤器的配置" class="headerlink" title="二、过滤器的配置"></a>二、过滤器的配置</h2><p>　　现在我们通过过滤器来实现记录请求执行时间的功能，其实现如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogCostFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>   <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span>                 FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>            <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Execute cost="</span><span class="token operator">+</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　这段代码的逻辑比较简单，就是在方法执行前先记录时间戳，然后通过过滤器链完成请求的执行，在返回结果之间计算执行的时间。这里需要主要，这个类必须继承 Filter 类，这个是 Servlet 的规范，这个跟以前的 Web 项目没区别。但是，有了过滤器类以后，以前的 web 项目可以在 web.xml 中进行配置，但是 spring boot 项目并没有 web.xml 这个文件，那怎么配置？在 Spring boot 中，我们需要 FilterRegistrationBean 来完成配置。其实现过程如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> FilterRegistrationBean <span class="token function">registFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        FilterRegistrationBean registration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registration<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LogCostFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registration<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registration<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"LogCostFilter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registration<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> registration<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　这样配置就完成了，需要配置的选项主要包括实例化 Filter 类，然后指定 url 的匹配模式，设置过滤器名称和执行顺序，这个过程和在 web.xml 中配置其实没什么区别，只是形式不同而已。现在我们可以启动服务器访问任意 URL：</p><p><img src="https://images2017.cnblogs.com/blog/820406/201801/820406-20180129231150312-465693715.png" alt></p><p>　　大家可以看到上面的配置已经生效了。除了通过 FilterRegistrationBean 来配置以外，还有一种更直接的办法，直接通过注解就可以完成了：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/*"</span><span class="token punctuation">,</span> filterName <span class="token operator">=</span> <span class="token string">"logFilter2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogCostFilter2</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"LogFilter2 Execute cost="</span> <span class="token operator">+</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　这里直接用 @WebFilter 就可以进行配置，同样，可以设置 url 匹配模式，过滤器名称等。这里需要注意一点的是 @WebFilter 这个注解是 Servlet3.0 的规范，并不是 Spring boot 提供的。除了这个注解以外，我们还需在配置类中加另外一个注解：@ServletComponetScan，指定扫描的包。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.pandy.blog.dao"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ServletComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.pandy.blog.filters"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　现在，我们再来访问一下任意 URL：</p><p><img src="https://images2017.cnblogs.com/blog/820406/201801/820406-20180129232130046-1905239306.png" alt></p><p>　　可以看到，我们配置的两个过滤器都生效了。细心的读者会发现，第二个 Filter 我们并没有指定执行的顺序，但是却在第一个 Filter 之前执行。这里需要解释一下，@WebFilter 这个注解并没有指定执行顺序的属性，其执行顺序依赖于 Filter 的名称，是根据 Filter 类名（注意不是配置的 filter 的名字）的字母顺序倒序排列，并且 @WebFilter 指定的过滤器优先级都高于 FilterRegistrationBean 配置的过滤器。有兴趣的朋友可以自己实验一下。</p><h2 id="三、拦截器的配置"><a href="#三、拦截器的配置" class="headerlink" title="三、拦截器的配置"></a>三、拦截器的配置</h2><p> 　　上面我们已经介绍了过滤器的配置方法，接下来我们再来看看如何配置一个拦截器。我们使用拦截器来实现上面同样的功能，记录请求的执行时间。首先我们实现拦截器类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogCostInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest httpServletRequest<span class="token punctuation">,</span> HttpServletResponse httpServletResponse<span class="token punctuation">,</span> Object o<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest httpServletRequest<span class="token punctuation">,</span> HttpServletResponse httpServletResponse<span class="token punctuation">,</span> Object o<span class="token punctuation">,</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Interceptor cost="</span><span class="token operator">+</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest httpServletRequest<span class="token punctuation">,</span> HttpServletResponse httpServletResponse<span class="token punctuation">,</span> Object o<span class="token punctuation">,</span> Exception e<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　这里我们需要实现 HandlerInterceptor 这个接口，这个接口包括三个方法，preHandle 是请求执行前执行的，postHandler 是请求结束执行的，但只有 preHandle 方法返回 true 的时候才会执行，afterCompletion 是视图渲染完成后才执行，同样需要 preHandle 返回 true，该方法通常用于清理资源等工作。除了实现上面的接口外，我们还需对其进行配置：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterceptorConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LogCostInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addInterceptors</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　这里我们继承了 WebMVCConfigurerAdapter，看过前面的文章的朋友应该已经见过这个类了，在进行静态资源目录配置的时候我们用到过这个类。这里我们重写了 addInterceptors 这个方法，进行拦截器的配置，主要配置项就两个，一个是指定拦截器，第二个是指定拦截的 URL。现在我们再启动系统访问任意一个 URL：</p><p><img src="https://images2017.cnblogs.com/blog/820406/201801/820406-20180130003851859-2140257073.png" alt></p><p> 　　可以看到，我们通过拦截器实现了同样的功能。不过这里还要说明一点的是，其实这个实现是有问题的，因为 preHandle 和 postHandle 是两个方法，所以我们这里不得不设置一个共享变量 start 来存储开始值，但是这样就会存在线程安全问题。当然，我们可以通过其他方法来解决，比如通过 ThreadLocal 就可以很好的解决这个问题，有兴趣的同学可以自己实现。不过通过这一点我们其实可以看到，虽然拦截器在很多场景下优于过滤器，但是在这种场景下，过滤器比拦截器实现起来更简单。</p>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven依赖机制</title>
      <link href="/2019/01/15/Maven%E4%BE%9D%E8%B5%96%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/01/15/Maven%E4%BE%9D%E8%B5%96%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="pom-xml解析"><a href="#pom-xml解析" class="headerlink" title="pom.xml解析"></a>pom.xml解析</h2><h3 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>scope:该标签指定依赖的作用域。</p><h3 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h3><h3 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h3><ul><li>依赖路径最短优先</li><li>pom中谁写在前面谁优先</li></ul><pre><code>graph LRA--&gt;BB--&gt;CC--&gt;common-2.0.jar</code></pre><pre><code>graph LRA--&gt;BB--&gt;common-3.0.jar</code></pre><p>介绍：项目依赖了两个版本的common.jar，在打包时会采用依赖路径最短的common.3.0.jar。</p><h3 id="项目聚合"><a href="#项目聚合" class="headerlink" title="项目聚合"></a>项目聚合</h3><p>把多个模块聚合到一块。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.asia<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>demo-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>demo-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--为pom--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--demo-parent聚合demo1、demo2、demo3、demo4模块--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>../demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>../demo2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>../demo3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>../demo4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="依赖继承"><a href="#依赖继承" class="headerlink" title="依赖继承"></a>依赖继承</h3><p>把各个模块公用的依赖抽取成父类，供子模块继承使用。</p><ul><li>父pom</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.asia<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>demo-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>demo-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--版本管理--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--mysql驱动依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql-connector-java.version</span><span class="token punctuation">></span></span>5.1.38<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql-connector-java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--dependencyManagement:管理父类的依赖，把版本号抽取出来放到properties标签中统一管理--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mysql-connector-java.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>子pom</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--子类的坐标--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.asia<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>demo-children<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>demo-children<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--继承父类的pom依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.asia<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>demo-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其他依赖标签介绍"><a href="#其他依赖标签介绍" class="headerlink" title="其他依赖标签介绍"></a>其他依赖标签介绍</h2><p>依赖传递排除</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${shiro.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--排除依赖传递列表 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构建行为列表，bulid标签配置maven构建项目时的需要执行的各种行为，一般都是maven的插件</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginManagement</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>${java.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>${java.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="maven的使用"><a href="#maven的使用" class="headerlink" title="maven的使用"></a>maven的使用</h1><p><code>demo-parent</code>为父工程，聚合如下四个子工程：</p><pre class="line-numbers language-xml"><code class="language-xml">  //demo-parent下的子工程，同事子工程之间存在相互依赖，demo-admin依赖demo-core  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>../demo-admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>../demo-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>../demo-rest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>../demo-generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="package"><a href="#package" class="headerlink" title="package"></a>package</h2><p><code>demo-admin</code> 依赖 <code>demo-core</code>，如果在 <code>demo-core</code> 未打包的情况下，单独打包子工程 <code>demo-admin</code>，此时会报错，说找不到 <code>demo-core</code>，因为打包的时候通过pom去maven仓库寻找 <code>demo-core</code>，因 <code>demo-core</code> 不存在所以报错。<br><br>如果给 <code>demo-core</code> 执行package命令后，去给 <code>demo-core</code> 打包还会报同样的错，因为package命令仅仅是在 <code>demo-core</code> 的target目录下生成jar包，并未放入到maven仓库中，所以还是找不到。<br><br>所以最终解决方案是执行完package命令后，在执行insetall命令，此时会把jar安装到maven仓库中。</p><h2 id="maven仓库分类"><a href="#maven仓库分类" class="headerlink" title="maven仓库分类"></a>maven仓库分类</h2><p>在maven中，仓库可以分为：<br><br>本地仓库、远程仓库。 </p><ul><li>远程仓库可以分为：中央仓库、私服仓库。<br>中央仓库是maven官方指定的仓库，可以理解为“寻找的最后一站”。 </li><li>私服仓库可以是自己建的，也可以是其它主体建的（比如aliyun的maven仓库，jboss的maven仓库等）。<br>私服可以分为：全局应用的私服仓库、应用到项目自身的私服仓库。</li></ul><p>maven寻找得顺序大致可以理解为： </p><pre><code>graph LR本地仓库--&gt;私服私服--&gt;远程仓库</code></pre><ol><li>在本地仓库中寻找，如果没有则进入下一步。 </li><li>在全局应用的私服仓库中寻找，如果没有则进入下一步。</li><li>在项目自身的私服仓库中寻找，如果没有则进入下一步。 </li><li>在中央仓库中寻找，如果没有则终止寻找。</li></ol><h2 id="maven常用命令"><a href="#maven常用命令" class="headerlink" title="maven常用命令"></a>maven常用命令</h2><ul><li>package命令完成了项目编译、单元测试、打包功能，但没有把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库和远程maven私服仓库</li><li>install命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库，==但没有布署到远程maven私服仓库==</li><li>deploy命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到==本地maven仓库和远程maven私服仓库==　　</li></ul><blockquote><p>后一个命令会覆盖前一个命令的操作</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">//分别是打包、安装、发布跳过测试命令mvn package -Dmaven.test.skip<span class="token operator">=</span>truemvn <span class="token function">install</span> -Dmaven.test.skip<span class="token operator">=</span>truemvn deploy -Dmaven.test.skip<span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Maven依赖机制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 Maven 无法自动下载依赖的问题</title>
      <link href="/2019/01/15/%E8%A7%A3%E5%86%B3-Maven-%E6%97%A0%E6%B3%95%E8%87%AA%E5%8A%A8%E4%B8%8B%E8%BD%BD%E4%BE%9D%E8%B5%96%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2019/01/15/%E8%A7%A3%E5%86%B3-Maven-%E6%97%A0%E6%B3%95%E8%87%AA%E5%8A%A8%E4%B8%8B%E8%BD%BD%E4%BE%9D%E8%B5%96%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="现象说明"><a href="#现象说明" class="headerlink" title="现象说明"></a>现象说明</h3><p>无法下载依赖的情况大致有两类：</p><ul><li><p>无法通过 Maven 中央仓库提供的坐标下载（也许是网络环境导致）</p></li><li><p>类库没有上传至中央仓库只能通过官网或其它渠道下载</p></li></ul><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><ul><li><p>手动管理依赖，将依赖按传统的方式放入 <code>libs</code> 目录中。缺点是需要手动管理依赖版本。</p></li><li><p>将依赖安装到本地仓库中，按照 Maven 下载依赖的优先级，会优先查找本地仓库中的依赖。缺点是协同开发时，其他开发人员会因为本地缺少依赖导致项目启动报错。</p></li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>以上解决思路虽然都可以解决缺少依赖的问题，但操作起来不太优雅，此时我们可以使用 Maven 提供的插件来解决这个问题</p><p><code>pom.xml</code> 增加插件配置，关键配置如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-install-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>install-external-kaptcha<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!-- 触发时机：执行 mvn clean 命令时自动触发插件 --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>clean<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                        <span class="token comment" spellcheck="true">&lt;!-- 存放依赖文件的位置 --></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>${project.basedir}/libs/kaptcha-2.3.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositoryLayout</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositoryLayout</span><span class="token punctuation">></span></span>                        <span class="token comment" spellcheck="true">&lt;!-- 自定义 groupId --></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.google.code.kaptcha<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                        <span class="token comment" spellcheck="true">&lt;!-- 自定义 artifactId --></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>kaptcha<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                        <span class="token comment" spellcheck="true">&lt;!-- 自定义版本号 --></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                        <span class="token comment" spellcheck="true">&lt;!-- 打包方式 --></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>                        <span class="token comment" spellcheck="true">&lt;!-- 是否自动生成 POM --></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatePom</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generatePom</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>install-file<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过该插件，我们可以在执行 <code>mvn clean</code> 命令时将项目所需要的依赖自动安装进本地仓库</p>]]></content>
      
      
      <categories>
          
          <category> 下载依赖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git流</title>
      <link href="/2019/01/09/Git%E6%B5%81/"/>
      <url>/2019/01/09/Git%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h2 id="Git流"><a href="#Git流" class="headerlink" title="Git流"></a>Git流</h2><p>   <img src="/images/git/Git流.png" alt></p><ol><li><p>工作区<br>进行文档编写的工作目录。</p></li><li><p>暂存区<br>一般存放在 “.git目录下” 下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。工作区的文档编辑完，使用<code>git add</code>就是提交到暂存区。</p></li><li><p>本地版本仓库<br>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。使用<code>git commit</code>把暂存区的文档提交到本地仓库版本。</p></li><li><p>远程版本仓库</p><p>在线存储文档仓库，本地仓库版本使用<code>git push</code>即可提交到远程仓库，在此之前需要有远程仓库账号、设置<code>SSH key</code>，然后把本地仓库和远程仓库关联才可提交。</p></li></ol><h2 id="Git远程仓库"><a href="#Git远程仓库" class="headerlink" title="Git远程仓库"></a>Git远程仓库</h2><p>连接远程仓库需要有git账户，并在本地生成公钥，添加到git账户中。</p><ol><li><p>本地生成SSH key</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#替换git账户绑定的邮箱，然后一路回车执行</span>ssh-keygen -t rsa -C <span class="token string">"youremail@qq.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行完毕后会在 <code>C:\Users\Admin\.ssh</code> 目录生成三个文件：<code>id_rsa</code> <code>id_rsa.pub</code> <code>known_hosts</code>，把<code>id_rsa.pub</code>的内容粘贴到git的ssh key设置中。</p></li></ol><ol start="2"><li><p>测试是否和远程git连通</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看当前是否可以和git远程仓库连通,成功会有successful字样</span><span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>远程仓库和本地仓库关联</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#替换git仓库的连接地址</span><span class="token function">git</span> remote add origin https://gitee.com/asiagod/your.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="本地项目提交远程仓库"><a href="#本地项目提交远程仓库" class="headerlink" title="本地项目提交远程仓库"></a>本地项目提交远程仓库</h2><ol><li><p>Git远程创建仓库</p><p>登录Git账户创建仓库。</p></li><li><p>ssh key设置</p><p>生成ssh key并添加到git账户</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 替换git账户绑定的邮箱，然后一路回车执行</span>ssh-keygen -t rsa -C <span class="token string">"youremail@qq.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>如果本地连接了多个Git远程仓库，如github.com、gitee.com，在生成ssh key的时候会覆盖之前的，所以需要配置多个git账户。具体配置如下</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#全局配置git账户</span><span class="token function">git</span> config user.email <span class="token string">"youremail@qq.com"</span><span class="token comment" spellcheck="true">#使用此命令生成key，注意指定了文件名为id_rsa.another避免和默认生成的id_rsa重名导致覆盖</span>ssh-keygen -t rsa -f ~/.ssh/id_rsa.another -C <span class="token string">"youremail@qq.com"</span><span class="token comment" spellcheck="true">#配置所有git账户，在~/.ssh目录创建config文件</span><span class="token function">touch</span> ~/.ssh/config<span class="token comment" spellcheck="true">#在config文件中配置多个git账户信息如下</span>Host gitee.com    IdentityFile ~/.ssh/id_rsa.another    User 476494273@qq.comHost github.com    IdentityFile ~/.ssh/id_rsa    User asiacuiyz@gmail.com  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数详解：</p><blockquote><ul><li>Host：远程Git仓库域名</li><li>IdentityFile：对应的id_rsa文件（私钥）</li><li>User：生成私钥的邮箱或者用户名</li></ul></blockquote></li><li><p>远程关联</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 替换git仓库的连接地址</span><span class="token function">git</span> remote add origin https://gitee.com/asiagod/your.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>本地操作<br>进入到要提交项目目录，执行<code>pull</code>命令，把仓库中的文件拉取下来，才能执行<code>push</code>，直接执行<code>push</code>会报错</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> pull --rebase origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：第一次必须使用git pull –rebase origin master命令，以后就可以使用git pull命令</p></blockquote></li><li><p>项目提交</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#将文件添加到暂存区</span><span class="token function">git</span> add <span class="token operator">&lt;</span>文件名或文件夹<span class="token operator">></span><span class="token comment" spellcheck="true">#提交暂存区到本地版本库</span><span class="token function">git</span> commit -m <span class="token string">"commit msg"</span><span class="token comment" spellcheck="true">#提交到远程仓库</span><span class="token function">git</span> push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Git流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql命令</title>
      <link href="/2019/01/09/Mysql%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/01/09/Mysql%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>此文针对MySQL5.7版本，5.7以上版本可能有不支持情况。</p></blockquote><h2 id="MySQL命令"><a href="#MySQL命令" class="headerlink" title="MySQL命令"></a>MySQL命令</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#控制台登录mysql的root用户，linux如果执行命令不存在，未把mysql添加到bin目录下</span>mysql -uroot -p<span class="token comment" spellcheck="true">#选择操作的数据库名称</span>use mysql<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#查看所有的库</span>show database<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#查看所有的表，需要在选择库之后才能使用</span>show tables<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#执行脚本文件</span><span class="token function">source</span> /usr/test.sql<span class="token comment" spellcheck="true">#退出mysql控制台</span><span class="token keyword">exit</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#查看行锁的竞争状态</span>show status like <span class="token string">'innodb_row_lock%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MySQL配置"><a href="#MySQL配置" class="headerlink" title="MySQL配置"></a>MySQL配置</h2><ul><li><p>修改密码</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#知道密码情况下，修改密码</span>use mysql<span class="token punctuation">;</span>update user <span class="token keyword">set</span> password<span class="token operator">=</span>passworD<span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span> where user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#忘记密码情况下，修改密码</span>首先，你必须要有操作系统的root权限了，找到my.conf编辑，把skip-grant-tables粘贴到<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>选项中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>mysql创建用户</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#创建用户</span>use mysql<span class="token punctuation">;</span>CREATE USER <span class="token string">'username'</span>@<span class="token string">'host'</span> IDENTIFIED BY <span class="token string">'password'</span><span class="token punctuation">;</span>- username：创建的用户名- host：指定该用户在哪个主机上可以登陆，为<span class="token string">"localhost"</span>指该用户只能在本地登录，将<span class="token string">"localhost"</span>改为<span class="token string">"%"</span>，表示在任何一台电脑上都可以登录<span class="token punctuation">;</span>也可以指定某台机器可以远程登录<span class="token punctuation">;</span>- password:用户的密码。<span class="token comment" spellcheck="true">#例：</span>CREATE USER <span class="token string">'dog'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'123456'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="CURD"><a href="#CURD" class="headerlink" title="CURD"></a>CURD</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#查询语句</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sys_user <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#更新语句</span><span class="token keyword">update</span> sys_user <span class="token keyword">set</span> name<span class="token operator">=</span><span class="token string">'admin'</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#给表A的name字段添加唯一索引</span><span class="token keyword">alter</span> <span class="token keyword">table</span> A <span class="token keyword">add</span> <span class="token keyword">unique</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式锁的场景与实现</title>
      <link href="/2019/01/08/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%9C%BA%E6%99%AF%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/01/08/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%9C%BA%E6%99%AF%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>首先，我们看这样一个场景：客户下单的时候，我们调用库存中心进行减库存，那我们一般的操作都是：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">update</span> store <span class="token keyword">set</span> num <span class="token operator">=</span> $num <span class="token keyword">where</span> id <span class="token operator">=</span> $id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这种通过设置库存的修改方式，我们知道在并发量高的时候会存在数据库的丢失更新，比如 a, b 当前两个事务，查询出来的库存都是 5，a 买了 3 个单子要把库存设置为 2，而 b 买了 1 个单子要把库存设置为 4，那这个时候就会出现 a 会覆盖 b 的更新，所以我们更多的都是会加个条件：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">update</span> store <span class="token keyword">set</span> num <span class="token operator">=</span> $num <span class="token keyword">where</span> id <span class="token operator">=</span> $id <span class="token operator">and</span> num <span class="token operator">=</span> $query_num<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>即乐观锁的方式来处理，当然也可以通过版本号来处理乐观锁，都是一样的，但是这是更新一个表，如果我们牵扯到多个表呢，我们希望和这个单子关联的所有的表同一时间只能被一个线程来处理更新，多个线程按照不同的顺序去更新同一个单子关联的不同数据，出现死锁的概率比较大。对于非敏感的数据，我们也没有必要去都加乐观锁处理，我们的服务都是多机器部署的，要保证多进程多线程同时只能有一个进程的一个线程去处理，这个时候我们就需要用到分布式锁。分布式锁的实现方式有很多，我们今天分别通过数据库，Zookeeper, Redis 以及 Tair 的实现逻辑。</p><h2 id="数据库实现"><a href="#数据库实现" class="headerlink" title="数据库实现"></a>数据库实现</h2><h3 id="加-xx-锁"><a href="#加-xx-锁" class="headerlink" title="加 xx 锁"></a>加 xx 锁</h3><p>更新一个单子关联的所有的数据，先查询出这个单子，并加上排他锁，在进行一系列的更新操作</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">begin</span> <span class="token keyword">transaction</span>；<span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">for</span> <span class="token keyword">update</span>；doSomething<span class="token punctuation">(</span><span class="token punctuation">)</span>；<span class="token keyword">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种处理主要依靠排他锁来阻塞其他线程，不过这个需要注意几点：</p><ol><li>查询的数据一定要在数据库里存在，如果不存在的话，数据库会加 gap 锁，而 gap 锁之间是兼容的，这种如果两个线程都加了 gap 锁，另一个再更新的话会出现死锁。不过一般能更新的数据都是存在的</li><li>后续的处理流程需要尽可能的时间短，即在更新的时候提前准备好数据，保证事务处理的时间足够的短，流程足够的短，因为开启事务是一直占着连接的，如果流程比较长会消耗过多的数据库连接的</li></ol><h3 id="唯一键"><a href="#唯一键" class="headerlink" title="唯一键"></a>唯一键</h3><p>通过在一张表里创建唯一键来获取锁，比如执行 saveStore 这个方法</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">table</span> lock_store <span class="token punctuation">(</span><span class="token string">'method_name'</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>$method_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中 <code>method_name</code> 是个唯一键，通过这种方式也可以做到，解锁的时候直接删除改行记录就行。不过这种方式，锁就不会是阻塞式的，因为插入数据是立马可以得到返回结果的。</p><p>那针对以上数据库实现的两种分布式锁，存在什么样的优缺点呢？</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>简单，方便，快速实现</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>基于数据库，开销比较大，性能可能会存在影响</li><li>基于数据库的当前读来实现，数据库会在底层做优化，可能用到索引，可能不用到索引，这个依赖于查询计划的分析</li></ul><h2 id="Zookeeper-实现"><a href="#Zookeeper-实现" class="headerlink" title="Zookeeper 实现"></a>Zookeeper 实现</h2><h3 id="获取锁"><a href="#获取锁" class="headerlink" title="获取锁"></a>获取锁</h3><ol><li>先有一个锁跟节点，lockRootNode，这可以是一个永久的节点</li><li>客户端获取锁，先在 lockRootNode 下创建一个顺序的瞬时节点，保证客户端断开连接，节点也自动删除</li><li>调用 lockRootNode 父节点的 getChildren() 方法，获取所有的节点，并从小到大排序，如果创建的最小的节点是当前节点，则返回 true, 获取锁成功，否则，关注比自己序号小的节点的释放动作 (exist watch)，这样可以保证每一个客户端只需要关注一个节点，不需要关注所有的节点，避免羊群效应。</li><li>如果有节点释放操作，重复步骤 3</li></ol><h3 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h3><p>只需要删除步骤 2 中创建的节点即可</p><p>使用 Zookeeper 的分布式锁存在什么样的优缺点呢？</p><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>客户端如果出现宕机故障的话，锁可以马上释放</li><li>可以实现阻塞式锁，通过 watcher 监听，实现起来也比较简单</li><li>集群模式，稳定性比较高</li></ul><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li>一旦网络有任何的抖动，Zookeeper 就会认为客户端已经宕机，就会断掉连接，其他客户端就可以获取到锁。当然 Zookeeper 有重试机制，这个就比较依赖于其重试机制的策略了</li><li>性能上不如缓存</li></ul><h2 id="Redis-实现"><a href="#Redis-实现" class="headerlink" title="Redis 实现"></a>Redis 实现</h2><p>我们先举个例子，比如现在我要更新产品的信息，产品的唯一键就是 productId</p><h3 id="简单实现-1"><a href="#简单实现-1" class="headerlink" title="简单实现 1"></a>简单实现 1</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lock</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> V v<span class="token punctuation">,</span> <span class="token keyword">int</span> expireTime<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> retry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取锁失败最多尝试10次</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>retry <span class="token operator">&lt;</span> failRetryTimes<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取锁</span>            Boolean result <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">setNx</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> v<span class="token punctuation">,</span> expireTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取锁失败间隔一段时间重试</span>                TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>sleepInterval<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">unlock</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> redis<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Integer productId <span class="token operator">=</span> <span class="token number">324324</span><span class="token punctuation">;</span>        RedisLock<span class="token operator">&lt;</span>Integer<span class="token operator">></span> redisLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisLock</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span>productId<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">,</span> productId<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个简单的实现，存在的问题：</p><ol><li>可能会导致当前线程的锁误被其他线程释放，比如 a 线程获取到了锁正在执行，但是由于内部流程处理超时或者 gc 导致锁过期，这个时候 b 线程获取到了锁，a 和 b 线程处理的是同一个 productId，b 还在处理的过程中，这个时候 a 处理完了，a 去释放锁，可能就会导致 a 把 b 获取的锁释放了。</li><li>不能实现可重入</li><li>客户端如果第一次已经设置成功，但是由于超时返回失败，此后客户端尝试会一直失败</li></ol><p>针对以上问题我们改进下：</p><ol><li>v 传 requestId，然后我们在释放锁的时候判断一下，如果是当前 requestId，那就可以释放，否则不允许释放</li><li>加入 count 的锁计数，在获取锁的时候查询一次，如果是当前线程已经持有的锁，那锁技术加 1，直接返回 true</li></ol><h3 id="简单实现-2"><a href="#简单实现-2" class="headerlink" title="简单实现 2"></a>简单实现 2</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lock</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> V v<span class="token punctuation">,</span> <span class="token keyword">int</span> expireTime<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> retry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取锁失败最多尝试10次</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>retry <span class="token operator">&lt;</span> failRetryTimes<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.先获取锁,如果是当前线程已经持有，则直接返回</span>        <span class="token comment" spellcheck="true">//2.防止后面设置锁超时，其实是设置成功，而网络超时导致客户端返回失败，所以获取锁之前需要查询一下</span>        V value <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果当前锁存在，并且属于当前线程持有，则锁计数+1，直接返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> value <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            count <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果锁已经被持有了，那需要等待锁的释放</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null <span class="token operator">||</span> count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取锁</span>            Boolean result <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">setNx</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> v<span class="token punctuation">,</span> expireTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>                count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取锁失败间隔一段时间重试</span>            TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>sleepInterval<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">unlock</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String requestId<span class="token punctuation">)</span><span class="token punctuation">{</span>    String value <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Strings<span class="token punctuation">.</span><span class="token function">isNullOrEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判断当前锁的持有者是否是当前线程，如果是的话释放锁，不是的话返回false</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>requestId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            count <span class="token operator">--</span> <span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span> delete <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delete<span class="token punctuation">)</span><span class="token punctuation">{</span>            count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> delete<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Integer productId <span class="token operator">=</span> <span class="token number">324324</span><span class="token punctuation">;</span>    RedisLock<span class="token operator">&lt;</span>String<span class="token operator">></span> redisLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisLock</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String requestId <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    redisLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span>productId<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">,</span> requestId<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种实现基本解决了误释放和可重入的问题，这里说明几点：</p><ol><li>引入 count 实现重入的话，看业务需要，并且在释放锁的时候，其实也可以直接就把锁删除了，一次释放搞定，不需要在通过 count 数量释放多次，看业务需要吧</li><li>关于要考虑设置锁超时，所以需要在设置锁的时候查询一次，可能会有性能的考量，看具体业务吧</li><li>目前获取锁失败的等待时间是在代码里面设置的，可以提出来，修改下等待的逻辑即可</li></ol><h3 id="错误实现"><a href="#错误实现" class="headerlink" title="# 错误实现"></a><a href="#错误实现">#</a> 错误实现</h3><p>获取到锁之后要检查下锁的过期时间，如果锁过期了要重新设置下时间, 大致代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock2</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">int</span> expireTime<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> expires <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> expireTime<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取锁</span>    Boolean result <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">setNx</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> expires<span class="token punctuation">,</span> expireTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    V value <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Long<span class="token punctuation">)</span>value <span class="token operator">&lt;</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 锁已经过期</span>        String oldValue <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">getSet</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> expireTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldValue <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> oldValue<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种实现存在的问题，过度依赖当前服务器的时间了，如果在大量的并发请求下，都判断出了锁过期，而这个时候再去设置锁的时候，最终是会只有一个线程，但是可能会导致不同服务器根据自身不同的时间覆盖掉最终获取锁的那个线程设置的时间。</p><h2 id="Tair-实现"><a href="#Tair-实现" class="headerlink" title="Tair 实现"></a>Tair 实现</h2><p>通过 Tair 来实现分布式锁和 Redis 的实现核心差不多，不过 Tair 有个很方便的 api，感觉是实现分布式锁的最佳配置，就是 Put api 调用的时候需要传入一个 version，就和数据库的乐观锁一样，修改数据之后，版本会自动累加，如果传入的版本和当前数据版本不一致，就不允许修改。</p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java规范</title>
      <link href="/2019/01/08/Java%E8%A7%84%E8%8C%83/"/>
      <url>/2019/01/08/Java%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="1-目的"><a href="#1-目的" class="headerlink" title="1 目的"></a>1 目的</h2><p>编码规范对于程序员而言尤为首要，有以下几个原因：</p><blockquote><ul><li>一个软件的生命周期中，80％的花费在于维护。</li><li>几乎没有任何一个软件，在其全部生命周期中，均由最初的开辟人员来维护。编码规范可以改良软件的可读性，可以让程序员尽快而彻底地懂得新的代码。</li></ul></blockquote><p>最佳实践主要是包括编码习惯、禁忌等，能有效避免常见问题，提高代码质量。</p><h2 id="2-适用范围"><a href="#2-适用范围" class="headerlink" title="2 适用范围"></a>2 适用范围</h2><p>本规范适用于Java开发人员。</p><h2 id="3-术语"><a href="#3-术语" class="headerlink" title="3 术语"></a>3 术语</h2><p>强制：编程时强制必须遵守的原则。</p><p>推荐：编程时必须加以考虑的习惯、写法等。参考：编程时无法用代码量化的原则或描述。说明：对此规范或建议进行必要的解释。</p><p>正例、反例：对此规范或建议从正、反两个方面给出例子。</p><h2 id="4-总体原则"><a href="#4-总体原则" class="headerlink" title="4 总体原则"></a>4 总体原则</h2><p>简单、易读、易实施执行</p><h1 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h1><h2 id="1-基本原则"><a href="#1-基本原则" class="headerlink" title="1 基本原则"></a>1 基本原则</h2><p>命名力求做到<strong>统一、达意、简洁</strong>。</p><ul><li>统一</li></ul><blockquote><p>统一即对于同一个概念，在程序中用同一种表示方法，比如对于供应商，既可以用supplier，也可以用provider，但是我们只能选定一个使用，至少在一个Java项目中保持统一。</p><p>说明:如果对同一概念有不同的表示方法，会使代码混乱难以理解。即使不能取得好的名称，但是只要统一，阅读起来也不会太困难，因为阅读者只要理解一次。</p></blockquote><ul><li>达意</li></ul><blockquote><p>达意是指，标识符能准确的表达出它所代表的意义，比如：newSupplier,OrderPaymentGatewayService等；而supplier1,service2，idtts等则不是好的命名方式。</p><p>说明:准确有两成含义，一是正确，二是丰富。如果给一个代表供应商的变量起名是order，显然没有正确表达。同样的，supplier1远没有targetSupplier意义丰富。</p></blockquote><ul><li>简洁</li></ul><blockquote><p>简 洁 是 指 ， 在 统 一 和 达 意 的 前 提 下 ， 用 尽 量 少 的 标 识 符 。 如 果 不 能 达 意 ， 宁 愿 不 要 简 洁 。 比 如 ： theOrderNameOfTheTargetSupplierWhichIsTransfered太长， transferedTargetSupplierOrderName则较好，但是transTgtSplOrdNm就不好了。注意：杜绝完全不规范的缩写,避免望文不知义。</p><p>反例: AbstractClass”缩写”命名成AbsClass;condition”缩写”命名成condi,此类随意缩写严重降低了代码的可阅读性。</p></blockquote><h2 id="2-通用命名规范"><a href="#2-通用命名规范" class="headerlink" title="2 通用命名规范"></a>2 通用命名规范</h2><p>【强制】代码中所有命名必须以英文开头，名称只能由英文字母、数字、下划线、”-“符号组成。严禁使用拼音与英文混合的方式,更不允许直接使用中文的方式。如下表：</p><p>说明:正确的英文拼写和语法可以让阅读者易于理解,避免歧义。注意,即使纯拼音命名方式也要尽量避免采用。</p><table><thead><tr><th>类型</th><th>规范</th><th>示例</th></tr></thead><tbody><tr><td>项目名</td><td>工程名或模块名全部小写，多个英文单词以”- “连接。应用名与模块名，采用英文单词，不建议使用3个以上的单词，禁止使用特殊字符与数字</td><td>lx-web-vaclient lx-dubbo-user</td></tr><tr><td>文件</td><td>跟类名保持一致</td><td>PayController.java</td></tr><tr><td>包</td><td>包名只允许使用小写字母和数字，并且单词之间点分隔符连接（不允许使用下划线）</td><td>com.iflytek.cbg.lx. web.user.controller</td></tr><tr><td>类 接口</td><td>类名、接口名使用UpperCamelCase风格,必须遵从驼峰形式，类名如果有复数含义,可以使用复数形式。另类名通常使用名词或名词短语</td><td>PayController UserService</td></tr><tr><td>方 法 名 参 数 名 成员变量局部变量</td><td>方法名、参数名、成员变量、局部变量都统一使用lowerCamelCase 风格,必须遵从驼峰形式。另方法名通常使用动词、动词短语、形容词 在单测方法中可以含有下划线，通常用来指定特定场景：test&lt;测试方法名&gt;_&lt;场景&gt;，比如：testPop_emptyStack。对于测试方法的命名没有强制性要求，也可以采用其他的命名方式</td><td>getScore userId</td></tr><tr><td>常量</td><td>常量命名全部大写,单词间用下划线隔开,力求语义表达完整清楚,不要嫌名字长</td><td>MAX_PAY_TIMEOUT</td></tr></tbody></table><h2 id="3-类命名"><a href="#3-类命名" class="headerlink" title="3 类命名"></a>3 类命名</h2><p>类名往往用不同的前缀或后缀表达额外的意思。如下表：</p><table><thead><tr><th>前缀/后缀</th><th>意义</th><th>要求</th></tr></thead><tbody><tr><td>xxxController</td><td>直接处理页面请求、管理页面逻辑类、Http请求处理类</td><td>【强制】</td></tr><tr><td>xxxService</td><td>表明这个类是个服务类，里面包含了给其他类提同业务服务的方法</td><td>【强制】</td></tr><tr><td>xxxDao</td><td>这个类封装了数据访问方法</td><td>【强制】</td></tr><tr><td>xxxEntity<br>xxxDTO<br>xxxVO<br>xxxReq<br>xxxResp<br></td><td>不同用处的POJO类，VO，DTO中不要出现@Entity注解数据传输对象：xxxDTO，xxx 为业务领域相关的名称展示对象：xxxVO，xxx 一般为网页名称</td><td>【推荐】</td></tr><tr><td>xxxEnum</td><td>枚举类</td><td>【强制】</td></tr><tr><td>Ixxx</td><td>这个类是一个接口</td><td>【强制】</td></tr><tr><td>xxxImpl</td><td>这个类是一个实现类，而不是接口</td><td>【强制】</td></tr><tr><td>Abstractxxx</td><td>抽象类</td><td>【强制】</td></tr><tr><td>xxxBase</td><td>其他类的基类</td><td>【推荐】</td></tr><tr><td>xxxFactory<br>xxxProxy<br>xxxAdapter<br>xxxObserver</td><td>如果使用到了设计模式,建议通过后缀在类名中体现出具体模式</td><td>【推荐】</td></tr><tr><td>xxxWrapper</td><td>这是一个包装类，为了给某个类提供没有的能力</td><td>【推荐】</td></tr><tr><td>xxxListener<br>xxxEvent</td><td>响应某种事件相关的类</td><td>【推荐】</td></tr><tr><td>xxxJob</td><td>某种按时间运行的任务</td><td>【推荐】</td></tr><tr><td>xxxUtils</td><td>工具类</td><td>【推荐】</td></tr><tr><td>xxxException</td><td>异常类</td><td>【强制】</td></tr><tr><td>xxxTest</td><td>测试类</td><td>【强制】</td></tr></tbody></table><h2 id="4-方法命名"><a href="#4-方法命名" class="headerlink" title="4 方法命名"></a>4 方法命名</h2><p>方法名往往用不同的前缀表达特定的含义，如下表：</p><table><thead><tr><th>前缀/后缀</th><th>意义</th><th>要求</th></tr></thead><tbody><tr><td>getxxx()</td><td>获取单个对象</td><td>【推荐】</td></tr><tr><td>listxxx()</td><td>获取多个对象</td><td>【推荐】</td></tr><tr><td>countxxx()</td><td>计数，获取统计值</td><td>【推荐】</td></tr><tr><td>savexxx()</td><td>插入</td><td>【推荐】</td></tr><tr><td>removexxx()</td><td>删除</td><td>【推荐】</td></tr><tr><td>updatexxx()</td><td>更新</td><td>【推荐】</td></tr><tr><td>findxxx()<br>searchxxx()</td><td>搜索、查询</td><td>【推荐】</td></tr><tr><td>doxxx()<br>executexxx()</td><td>执行某个过程或者流程</td><td>【推荐】</td></tr><tr><td>initxxx()</td><td>初始化</td><td>【推荐】</td></tr><tr><td>checkxxx()<br>validatexxx()</td><td>校验合法性</td><td>【推荐】</td></tr></tbody></table><h1 id="排版规范"><a href="#排版规范" class="headerlink" title="排版规范"></a>排版规范</h1><h2 id="1-源文件结构"><a href="#1-源文件结构" class="headerlink" title="1 源文件结构"></a>1 源文件结构</h2><p>1.【强制】所有源文件必须使用utf-8编码。</p><p>2.【强制】所有未使用的import语句应该被删除。</p><p>3.【强制】禁止使用通配符import。</p><p>说明：Eclipse中可以通过快捷键将不需要的引入包去掉。快捷键：Ctrl + Shift + O。 IntelliJ IDEA自动导入包去除星号：</p><p>打开File&gt; Settings&gt;Editor&gt;Code Style&gt;Java&gt;Scheme Default&gt;Imports </p><ol><li>将Class count to use import with “<em>“改为99（导入同一个包的类超过这个数值自动变为 </em> ） </li><li>将Names count to use static import with “*”改为99（同上，但这是静态导入的） </li><li>将Package to Use import with “<em>“删掉默认的这两个包（不管使用多少个类，只要在这个列表里都会变为 </em> ）</li></ol><p>自动删除没有用到的导入包：</p><p>打开File&gt; Settings&gt;Editor&gt; General &gt; Auto Import</p><p>勾上 <img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsED41.tmp.jpg" alt="img">                                               </p><p>4.【推荐】同名的构造函数或方法之间禁止插入其他成员，例如重载的方法必须放在一起；不建议把新添加的方法一律放在最后，而是应该插入到合适的地方。</p><p>说明:当一个类有多个构造方法,或者多个同名方法，或者类似方法,这些方法应该按顺序放置在一起,便于阅读。</p><p>5.【推荐】类内定义顺序依次是:常量&gt;公共变量或保护变量&gt;私有变量&gt;构造方法&gt;静态公共方法&gt;静态私有方法&gt;公有方法或保护方法&gt;getter/setter方法&gt;main方法。</p><p>引入lombok插件，IDEA中安装lombok插件使POJO类代码更加简洁，省去写getter/setter，构造函数的方法。具体参考：<a href="https://yq.aliyun.com/articles/59972" target="_blank" rel="noopener">https://yq.aliyun.com/articles/59972</a>, <a href="https://www.projectlombok.org/" target="_blank" rel="noopener">https://www.projectlombok.org/</a></p><h2 id="2-代码格式"><a href="#2-代码格式" class="headerlink" title="2 代码格式"></a>2 代码格式</h2><p>【强制】代码格式规范主要是缩进、空格、换行、空行的运用。具体规范如下表：</p><p>说明:合理的运用缩进、空格、换行、空行，对代码的结构、可读性有非常大影响；另外，可以直接使用IDE自带的格式化快捷键进行全局或局部代码格式化。</p><table><thead><tr><th>分类</th><th>规范解释</th><th>其他描述</th></tr></thead><tbody><tr><td>行长度</td><td>单行字符数限制不超过120个,超出需要换行， 换行时遵循换行原则；</td><td>设置IDE单行字符数配置</td></tr><tr><td>缩进</td><td>1. 缩进采用4个空格,禁止使用tab字符；<br>2. 方法体的开始、类的定义、以及if、 for、do、while、switch、case语句中的代码都要采用缩进方式；<br>3. 由于列宽限制需要缩进的情况遵循换行原则；</td><td>设置IDE Tab键相关配置</td></tr><tr><td>空格</td><td>1. 左小括号和字符之间不出现空格;同样,右小括号和字符之间也不出现空格；2. if/for/while/switch/do等保留字与括号之间都必须加空格；<br>3. 任何二目、三目运算符的左右两边都需要加一个空格；一元操作符如”!”、” ~”、” ++”、” –”等前后不加空格；<br>4. 方法参数在定义和传入时,多个参数逗号后边必须加空格；5. 强制转型后必须跟一个空格;</td><td>在if、else、for、do和while语句中，即使没有语句或者只有一行，也不得省略花括号。</td></tr><tr><td>换行</td><td>1、每行最多只能写一条语句，每条语句之后都要换行。 <br>2、单行字符数超过120个限制需换行： 第二行相对第一行缩进,从第三行开始,不再继续缩进；运算符与下文一起换行；方法调用的点符号与下文一起换行；在多个参数超长,在逗号后换行；在括号前不要换行；<br>3、大括号：如果是大括号内为空,则简洁地写成{}即可,不需要换行;如果是非空代码块则:左大括号前不换行；左大括号后换行； 右大括号前换行；右大括号后还有else等代码则不换行;表示终止的右大括号后必须换行；</td><td></td></tr><tr><td>空行</td><td>空行可以表达代码在语义逻辑上的分割，注释的作用范围，等等。将类似操作，或一组操作放在一起不用空行隔开，而用空行隔开不同组的代码。例如： 1、在类的不同的成员间增加空行，包括：成员变量、构造函数、方法、内部类、静态初始化块、实例初始化块等； 2、方法体内，按需增加空行，以便从逻辑上对语句进行分组；执行语句组、变量的定义语句组、不同的业务逻辑之间或者不同的语义之间插入一个空行。相同业务逻辑和语义之间不需要插入空行； 3、注释与其上面的代码用空行隔开；</td><td>说明:超过十行的代码如果还不用空行分割， 就会增加阅读困难。另外，没有必要插入多个空行进行隔开。</td></tr></tbody></table><p>正例:</p><p><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsED99.tmp.png" alt="img"> </p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><h2 id="1-基本原则-1"><a href="#1-基本原则-1" class="headerlink" title="1 基本原则"></a>1 基本原则</h2><ul><li>注释力求精简准确、表达到位。</li></ul><blockquote><ol><li>能够准确反应设计思想和代码逻辑;</li><li>能够描述业务含义,使别的程序员能够迅速了解到代码背后的信息。好的命名、代码结构是自解释的,往往不需要或者只需要很少注释，就可以让人读懂；相反，不能正确表达代码意义的注释，只会损害代码的可读性。</li></ol></blockquote><ul><li>注释宜少而精，不宜多而滥，更不能误导，过多的注释会成为后期维护的负担。</li></ul><blockquote><p>防止过多过滥的注释，没必要的重复注释，或对显而易见的代码添加注释。</p></blockquote><ul><li><p>代码混乱，再多的注释都不能弥补，所以，应当先在代码本身下功夫。</p></li><li><p>注释要和代码同步。代码修改的同时,注释也要进行相应的修改,尤其是参数、返回值、异常、核心逻辑等的修改。</p></li></ul><blockquote><p>说明:代码与注释更新不同步,就像路网与导航软件更新不同步一样,如果导航软件严重滞后,就失去了导航的意义。</p></blockquote><ul><li>注释不是用来管理代码版本的，如果有代码不要了，直接删除，svn会有记录的，不要注释掉，否则以后没人知道那段注释掉的代码该不该删除。</li></ul><h2 id="2-Javadoc说明"><a href="#2-Javadoc说明" class="headerlink" title="2 Javadoc说明"></a>2 Javadoc说明</h2><p>Java程序有两类注释：实现注释和文档注释。</p><p>实现注释是那些在C++中见过的，应用/…/和//界定的注释。文档注释是Java独有的（即Javadoc），由/*…/界定,文档注释可以经由Javadoc工具转换成HTML文件。 Javadoc注释是给类的使用者来看的，主要介绍是什么功能，什么含义，怎么用等信息。凡是类的使用者需要知道，都要用Javadoc来写。Javadoc注释只负责描述类(class)、接口(interface)、方法(method)、构造器(constructor)、成员字段(field)。相应地，文档注释必须写在类、接口、方法、构造器、成员字段前面，而写在其他位置，比如函数内部，是无效的文档注释。</p><p>非Javadoc的注释往往是给代码的维护者看的，用以注释代码或者实现细节，着重告述读者功能以及逻辑，特殊或者复杂的逻辑可以注释说明为什么这样写，如何修改，注意什么问题等。 Javadoc说明可参考文档：<a href="http://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html" target="_blank" rel="noopener">http://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html</a> <a href="http://blog.csdn.net/garfielder007/article/details/54959597" target="_blank" rel="noopener">http://blog.csdn.net/garfielder007/article/details/54959597</a></p><p><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEDBF.tmp.png" alt="img">正例:</p><h2 id="3-Javadoc规范"><a href="#3-Javadoc规范" class="headerlink" title="3 Javadoc规范"></a>3 Javadoc规范</h2><p>下面规范要求不包括符合”注释-基本原则”中代码能自解释的例外情况。</p><ol><li><p>【强制】所有的类都必须添加类功能描述、创建者和创建日期。</p></li><li><p>【推荐】类公共属性、类公共方法需要增加Javadoc注释,即使用/*内容/格式,不得使用//xxx方式。</p></li><li><p>【强制】所有对外暴露的服务(RPC..)中类、方法、输入参数、输出参数必须添加Javadoc注释。</p></li><li><p>【强制】项目组内通用类库或者开发的可复用的类库中对使用者暴露的类、方法、属性必须增加Javadoc注释。</p></li><li><p>【强制】所有抽象类和接口必须要用Javadoc注释；另外，子类中override的方法和接口的实现类对应的方法实现大部分情况下不需要添加注释。</p></li><li><p>【强制】对已经不推荐使用的类和方法需要注明@Deprecated，并说明替代的类或者方法。</p></li><li><p>【推荐】枚举类和常量类字段尽量要有注释, 说明每个字段的含义。说明：字段命名能自解释的除外。</p></li><li><p>【推荐】特殊注释标记,请注明标记人与标记时间。注意及时处理这些标记,通过标记扫描,经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。</p><pre class="line-numbers language-Java"><code class="language-Java">待办事宜(TODO):(标记人,标记时间,[预计处理时间])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>表示需要实现,但目前还未实现的功能。这实际上是一个 Javadoc 的标签,目前的 Javadoc还没有实现,但已经被广泛使用。只能应用于类,接口和方法(因为它是一个 Javadoc 标签)。</p><pre class="line-numbers language-java"><code class="language-java">错误<span class="token punctuation">,</span>不能工作<span class="token punctuation">(</span>FIXME<span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span>标记人<span class="token punctuation">,</span>标记时间<span class="token punctuation">,</span><span class="token punctuation">[</span>预计处理时间<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在注释中用 FIXME 标记某代码是错误的,而且不能工作,需要及时纠正的情况。</p><p>9.【强制】注释的双斜线与注释内容之间有且仅有一个空格。 正例：// 注释内容，注意在<code>//</code>和<code>注释内容</code>之间有一个空格。</p><h1 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h1><h2 id="1-声明、赋值等语句"><a href="#1-声明、赋值等语句" class="headerlink" title="1 声明、赋值等语句"></a>1 声明、赋值等语句</h2><ol><li>【强制】一行只声明一个变量，不允许一行声明多个变量；在需要时声明变量，声明后尽快初始化，即初始化和被使用尽量放在一起。</li><li>【强制】不允许把多个短语句写在一行中，即一行只写一条语句。</li><li>【强制】避免在一个语句中执行多种操作，例如：给多个变量赋雷同的值，或赋值运算符与相等关系运算符混合使用，它很难读懂。</li></ol><p><span style="color: #ff0000">反例:</span> </p><pre class="line-numbers language-c"><code class="language-c">fooBar<span class="token punctuation">.</span>fChar <span class="token operator">=</span> barFoo<span class="token punctuation">.</span>lchar <span class="token operator">=</span> <span class="token string">"c"</span><span class="token punctuation">;</span><span class="token keyword">if</span> （c<span class="token operator">++</span> <span class="token operator">=</span> d<span class="token operator">++</span>） <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//TODO</span><span class="token punctuation">}</span>d <span class="token operator">=</span> （a <span class="token operator">=</span> b <span class="token operator">+</span> c） <span class="token operator">+</span> r<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>【强制】所有的相同类型的包装类对象之间值的比较,全部使用equals方法比较。另外equals方法容易抛空指针异常,应使用常量或确定有值的对象来调用equals。 说明:对于Integer var = ?在-128至127范围内的赋值,Integer对象是在IntegerCache.cache产生,会复用已有对象,这个区间内的Integer值可以直接使用==进行判断,但是这个区间之外的所有数据,都会在堆上产生,并不会复用已有对象,这是一个大坑。 正例: “test”.equals(object); 反例: object.equals(“test”); </li><li>【强制】定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性默认值。 反例：POJO 类的 gmtCreate 默认值为 new Date();但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。 </li><li>【强制】序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败；如果完全不兼容升级，避免反序列化混乱，那么请修改 serialVersionUID 值。 说明：注意 serialVersionUID 不一致会抛出序列化运行时异常。 </li><li>【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。</li><li>【推荐】当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起， 便于阅读。 </li><li>【推荐】 类内方法定义顺序依次是：公有方法或保护方法 &gt; 私有方法 &gt; getter/setter 方法。 说明：公有方法是类的调用者和维护者最关心的方法，首屏展示最好；保护方法虽然只是子类关心，也可能是”模板设计模式”下的核心方法；而私有方法外部一般不需要特别关心，是一个 黑盒实现；因为承载的信息价值较低，所有Service 和 DAO 的 getter/setter 方法放在类体最后。</li></ol><h2 id="2-控制语句、程序结构"><a href="#2-控制语句、程序结构" class="headerlink" title="2 控制语句、程序结构"></a>2 控制语句、程序结构</h2><ol><li>【强制】在一个switch块内,每个case要么通过break/return等来终止,要么注释说明程序将继续执行到哪一个case为止;在一个switch块内,都必须包含一个default语句并且放在最后,即使它什么代码也没有。</li><li>【强制】在if/else/for/while/do语句中必须使用大括号，即使只有一行代码,避免使用单行的形式:if (condition) statements。</li><li>【强制】不要在if语句中使用等号=进行赋值操作。</li><li>【强制】不要在条件判断中执行其它复杂的语句,将复杂逻辑判断的结果赋值给一个有意义的布尔变量名,提高可读性。</li></ol><blockquote><p>说明:很多if语句内的逻辑相当复杂,阅读者需要分析条件表达式的最终结果,才能明确什么样的条件执行什么样的语句,那么,如果阅读者分析逻辑表达式错误呢?</p></blockquote><p>正例:<br><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEDE2.tmp.png" alt="img"> </p><p>反例:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.【推荐】代码嵌套层次不要超过3层。<br>说明:代码嵌套层次达3层以上时，一般人理解起来都会困难。减少嵌套的方法有很多：合并条件、利用return以省略后面的else、利用子方法(将嵌套的程序提取出来放到另外的方法里)等。</p><p>6.【推荐】类超过2000行的程序难以阅读，应该尽量避免出现超过2000行的程序；</p><p>7.【推荐】注意运算符的优先级，避免使用默认优先级。一般而言，在含有多种运算符的表达式中应用圆括号来明确表达式的操作顺序，是个好办法。</p><blockquote><p>说明：防止阅读程序时产生误解，防止因默认的优先级与设计思想不符而导致程序出错。</p></blockquote><p>8.【推荐】可以通过return语句减少嵌套层次: if (condition) {</p><p>… return obj;</p><p>}</p><p>// 接着写 else 的业务逻辑代码;</p><h2 id="3-常量"><a href="#3-常量" class="headerlink" title="3 常量"></a>3 常量</h2><p>1.【推荐】魔法值(未经定义的常量)尽量不要直接出现在代码中，代之以有名字的static final静态常量或者enum值。</p><p>说明：魔法值使代码的可读性大大下降，而且，如果同样的数值多次出现时，到底这些数值是不是带有同样的含义呢，谁也说不清楚。另一方面， 如果本来应该使用相同数值的地方，一旦用错了，也很难发现，修改维护也不方便。因此，需要注意以下几点，极力避免使用魔法数值。</p><p>反例:</p><p>String key = “Id#taobao_” + tradeId; cache.put(key, value);</p><p>2.【推荐】不要使用一个常量类维护所有常量,应该按常量功能进行归类分开维护。如:缓存相关的常量放在类:CacheConsts下;系统配置相关的常量放在类:ConfigConsts 下。</p><p>说明:大而全的常量类,非得使用查找功能才能定位到修改的常量,不利于理解和维护。</p><p>3.【推荐】常量的复用层次有五层:跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。</p><p>4.【推荐】如果变量值仅在一个范围内变化,且带有名称之外的延伸属性,定义为枚举类。下面正例中的数字就是延伸信息,表示星期几。正例:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> WeekEnum<span class="token punctuation">{</span><span class="token function">MONDAY</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">TUESDAY</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">WEDNESDAY</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">THURSDAY</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">FRIDAY</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SATURDAY</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SUNDAY</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.【推荐】避免使用不易理解的数字，用有意义的标识来替代。涉及物理状态或者含有物理意义的常量，不应直接使用数字，用有意义的静态变量来代替更好。</p><p>反例：如下的程序可读性差。 </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>state <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// program code</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正例:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> TRUNK_IDLE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> TRUNK_BUSY <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> TRUNK_UNKNOWN <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> TRUNK_IDLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>state <span class="token operator">=</span> TRUNK_BUSY<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// program code</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-并发、线程、性能"><a href="#4-并发、线程、性能" class="headerlink" title="4 并发、线程、性能"></a>4 并发、线程、性能</h2><ol><li>【强制】获取单例对象需要保证线程安全，其中的方法也要保证线程安全。说明：资源驱动类、工具类、单例工厂类都需要注意。</li><li>【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。正例：</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimerTaskThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token function">TimerTaskThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"TimerTaskThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。 说明：使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资 源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者 “过度切换”的问题。</p></li><li><p>【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样 的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</p></li></ol><p>说明：Executors 返回的线程池对象的弊端如下：</p><blockquote><p>FixedThreadPool 和 SingleThreadPool:</p></blockquote><p>允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。</p><blockquote><p>CachedThreadPool 和 ScheduledThreadPool:</p></blockquote><p>允许的创建线程数量为Integer.MAX_VALUE，可能会创建大量的线程，从而导致OOM。</p><ol start="5"><li>【强制】SimpleDateFormat是线程不安全的类,一般不要定义为static变量,如果定义为static,必须加锁,或者使用JodaTime。</li><li>【强制】在使用正则表达式时,利用好其预编译功能,可以有效加快正则匹配速度。说明:不要在方法体内定义:Pattern pattern = Pattern.compile(规则);</li><li>【推荐】避免Random实例被多线程使用,虽然共享该实例是线程安全的,但会因竞争同一seed导致的性能下降。说明:Random实例包括java.util.Random的实例或者Math.random()的方式。</li><li>【推荐】注意Math.random()这个方法返回是double类型,注意取值的范围0≤x&lt;1(能够 取到零值,注意除零异常),如果想获取整数类型的随机数, 不要将x放大10的若干倍然后取整,直接使用Random对象的nextInt或者nextLong法。</li><li>【强制】并发修改同一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存加 锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。</li></ol><blockquote><p>说明:如果每次访问冲突概率小于20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次 数不得小于3次。 </p></blockquote><p>10.【强制】多线程并行处理定时任务时，Timer 运行多个 TimeTask 时，只要其中之一没有捕获 抛出的异常，其它任务便会自动终止运行，使用ScheduledExecutorService 则没有这个问题。</p><p>11.【推荐】循环体中的语句要考量性能,循环体是最容易发生性能问题的地方。以下操作尽量移至循环体外处理,如定义对象、变量、获取数据库连接,进行不必要的try-catch 操作(这个try-catch是否可以移至循环体外)。</p><p>12.【强制】循环体内字符串的连接方式,使用StringBuilder的append方法进行扩展。</p><p>说明:反编译出的字节码文件显示每次循环都会new出一个StringBuilder对象,然后进行append操作,最后通过toString方法返回String对象,造成内存资源浪费。</p><p>反例:</p><pre class="line-numbers language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token string">"start"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   str <span class="token operator">=</span> str <span class="token operator">+</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>13.【推荐】任何数据结构的构造或初始化,都应指定大小,避免数据结构无限增长吃光内存。</p><p>14.【推荐】<a href="http://www.cnblogs.com/DreamDrive/p/5422175.html" target="_blank" rel="noopener">在明确的场景下,为集合指定初始容量</a>。</p><p>说明:集合有默认大小，首先每次新增时都会判断是否达到临界点，且当长度不足时动态扩展严重影响性能。</p><p>15.【强制】使用entrySet遍历Map类集合KV,而不是keySet方式进行遍历。</p><p>说明:keySet其实是遍历了2次,一次是转为Iterator对象,另一次是从hashMap中取出key所对应的value。而entrySet只是遍历了一次就把key和value 都放到了 entry中,效率更高。</p><p>\16. 【推荐】高度注意 Map 类集合 K/V 能不能存储 null 值的情况，如下表格：</p><table><thead><tr><th>集合类</th><th>Key</th><th>Value</th><th>Super</th><th>说明</th></tr></thead><tbody><tr><td>Hashtable</td><td>不允许为null</td><td>不允许为null</td><td>Dictionary</td><td>线程安全</td></tr><tr><td>ConcurrentHashMap</td><td>不允许为 null</td><td>不允许为 nul</td><td>AbstractMap</td><td>锁分段技术</td></tr><tr><td>TreeMap</td><td>不允许为 nul</td><td>允许为 null</td><td>AbstractMap</td><td>线程不安全</td></tr><tr><td>HashMap</td><td>允许为 null</td><td>允许为 null</td><td>AbstractMap</td><td>线程不安全</td></tr></tbody></table><p>反例： 由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，而事实上， 存储 null 值时会抛出 NPE 异常。</p><h2 id="5-日志"><a href="#5-日志" class="headerlink" title="5 日志"></a>5 日志</h2><p>1.【强制】不允许使用System.out.print，也不可直接使用日志系统(Log4j、Logback)中的API,而应依赖使用日志框架SLF4J中的API,使用门面模式的日志框架,有利于维护和各个类的日志处理方式统一和更换日志系统。</p><p>说明：日志框架可以设定级别，可以控制输出到哪里，容易区分是在代码的什么地方打印的，而System.out.print则不行。而且System.out.print的速度很慢。所以，除非是有意的，否则都要用日志框架。至少在提交到版本库之前把System.out.print换成日志框架。</p><p>正例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Abc<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.【强制】避免重复打印日志,浪费磁盘空间,务必在log4j.xml或logback.xml中设置 additivity=false。正例:</p><logger name="com.iflytek.lx.config" additivity="false"><p>3.【强制】生产环境禁止输出debug、trace和其他调试日志；相应的，生产环境一定要记录下错误日志和异常异常，利于现网故障或用户投诉时排查问题。</p><p>说明：谨慎地根据需要配置日志级别。例如测试环境可以打开info日志，性能测试需要关闭debug和其他调试日志，保持与生存环境一致。日志的级别由高到低分别为：ERROR &gt;&gt; WARN &gt;&gt; INFO &gt;&gt; DEBUG &gt;&gt; TRACE。</p><ul><li>Error：用于记录影响系统正常运行的一切信息，包括：Throwable、Error、Exception、与其他系统通讯错误，例如：SQL执行异常、其他系统返回的错误信息；</li></ul><ul><li>Warn：用于记录不影响系统正常运行，但需要注意需要及时解决，例如：某个信息；                                        Info：通常生产环境的最低级别，用于记录这种重要的提示信息，例如：各种通讯信息，关键的提示信息，以及这种需要在生产环境下提示的信息；</li><li>Debug： 记录一些详细的数据，比如我们想知道一个方法的多个入参值，那么在生产环境中，一般不会打印出来，在开发阶段和调试阶段，建议使用debug进行记录查看。在生产环境中将不会出现此类信息（当然可能在某些特定情况下，通过特殊手段某一时间段打开用于生产环境调试）。</li><li>Trace：用于代替System.out.println()和System.err.println()，供开发阶段调试用。</li></ul><p>4.【推荐】在生产环境中配置日志框架自动加载刷新，即不重启应用就可以调整日志的配置。例如在logback.xml的配置中开源加上：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">scan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">scanPeriod</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60 seconds<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-异常"><a href="#6-异常" class="headerlink" title="6 异常"></a>6 异常</h2><p>1.【强制】不允许使用printStackTrace打印异常日志。</p><p>2.【强制】记录异常日志时不要只保存exception.getMessage()，记录整个异常堆栈信息。</p><p>3.【强制】捕获异常是为了处理它,不要捕获了却什么都不处理而抛弃之,如果不想处理它,请将该异常抛给它的调用者。另外自己抛出的异常必须要填写详细的描述信息，且必须保留原来的异常，便于问题定位，例如：throw new IOException(“Writing data error! Data: “ + data. toString(), e)。</p><p>4.【强制】不能在finally块中使用return,finally块中的return返回后方法结束执行,不会再执行try块中的return语句。</p><p>5.【强制】finally块必须对资源对象、流对象进行关闭，例如数据库操作、IO操作,且有异常也要进行try-catch，因为finally块中如果发生异常, 不会再执行try块中的return语句。</p><p>6.【推荐】防止NullPointerException,IndexOutOfBoundsException是程序员的基本修养,代码中可以通过预先检查进行规避,而不应该通过catch来处理。</p><p>正例:</p><p>if (obj != null) {</p><p>…</p><p>}</p><p>反例: try {</p><p>obj.method();</p><p>} catch (NullPointerException e) {</p><p>…</p><p>}</p><h2 id="7-其他"><a href="#7-其他" class="headerlink" title="7 其他"></a>7 其他</h2><p>1.【强制】关于hashCode和equals的处理,遵循如下规则:</p><p>** 只要重写equals,就必须重写 hashCode。</p><p>** 因为Set存储的是不重复的对象,依据hashCode和equals进行判断,所以Set存储的对象必须重写这两个方法。</p><p>** 如果自定义对象做为Map的键,那么必须重写hashCode和equals。</p><p>说明:String重写了hashCode和equals方法,所以我们可以非常愉快地使用String 对象作为key来使用。2.【强制】所有的覆写方法,必须加@Override注解。</p><p>3.【强制】不能使用过时的类或方法。       4.【推荐】慎用Object的clone方法来拷贝对象。</p><p>说明:对象的clone方法默认是浅拷贝,若想实现深拷贝需要重写clone方法实现属性对象的拷贝。                                       5.【推荐】POJO类重写toString方法。使用 IDE 的中工具：source&gt; generate toString 时，如果继承了另一个 POJO 类，注意在前面加一下super.toString。</p><p>说明：在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排查问题。或者使用lombok插件，自动生成toString()方法。使用lomok可以防止在getter/setter加入业务逻辑。</p><p>6.【强制】不要在foreach循环里进行集合元素的remove/add操作。remove 元素请使用 Iterator 方式，如果并发操作，需要对 Iterator 对象加锁。</p><p>7.【推荐】使用索引访问用String的split方法得到的数组时,做边界检查,否则会有抛IndexOutOfBoundsException的风险。</p><p>8.【强制】禁止在代码中显示调用System.gc()。</p><p>9.【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法,无谓增加编译器解析成本,直接用类名来访问即可。正例：</p><p>Foo.aStaticMethod(); // good反例：</p><p>Foo aFoo = …; aFoo.aStaticMethod();</p><p>somethingThatYieldsAFoo().aStaticMethod();</p><p>10.【推荐】类成员与方法访问控制从严，不是必须使用public属性的，请使用protected，不是必须使用protected,请使用private。</p><p><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEE18.tmp.png" alt="img"><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEE28.tmp.png" alt="img">如果不允许外部直接通过new来创建对象,那么构造方法必须是private。</p><p>** 工具类不允许有public或default构造方法。</p><p>** 类非static成员变量并且与子类共享,必须是protected。</p><p>** 类非static成员变量并且仅在本类使用,必须是private。</p><p>** 类static成员变量如果仅在本类使用,必须是private。</p><p>** 若是 static 成员变量,必须考虑是否为final。</p><p>** 类成员方法只供类内部调用,必须是private。</p><p><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEE29.tmp.png" alt="img">类成员方法只对继承类公开,那么限制为protected。</p><p>说明:良好的程序设计应该尽可能减小类与类之间耦合，所遵循的经验法则是：尽量限制成员函数的可见性。</p><p>11.【强制】在一个项目组内开发环境、测试环境、生产环境使用统一版本的JDK。</p><p>说明:不同版本的JDK编译出来的class不一样，可能存在冲突，不同版本的JDK也会带来莫名奇妙的问题且很难定位，所以一开始就要求必须统一。</p><p>12.【推荐】避免出现重复的代码(Don’t Repeat Yourself),即DRY原则。</p><p>说明:随意复制和粘贴代码,必然会导致代码的重复,在以后需要修改时,需要修改所有的副本,容易遗漏。必要时抽取共性方法,或者抽象公共类,甚至是共用模块。</p><p>13.【推荐】在代码中使用”抛异常”还是”返回错误码”,对于公司外的 http/api 开放接口必须使用”错误码”;而应用内部推荐异常抛出;跨应用间RPC 调用优先考虑使用Result方式,封装isSuccess()方法、”错误码”、”错误简短信息”。</p><p>说明:关于RPC方法返回方式使用Result方式的理由:</p><p><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEE3A.tmp.png" alt="img">使用抛异常返回方式,调用方如果没有捕获到就会产生运行时错误。</p><p><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEE3B.tmp.png" alt="img">如果不加栈信息,只是new自定义异常,加入自己的理解的error message,对于调用端解决问题的帮助不会太多。如果加了栈信息,在频繁调用出错的情况下,数据序列化和传输的性能损耗也是问题。</p><p>14.【推荐】logback比log4j性能要好很多，但是logback和log4j互斥，只能使用其中之一。因此，使用logback需要排除掉log4j依赖所有相关jar 包依赖，且为了兼容一些二方库、三方库（可能使用了log4j），需要引入引入log4j-over-slf4j.jar; 15.【推荐】对于”明确停止使用的代码和配置”,如方法、变量、类、配置文件、动态配置属性等要坚决从程序中清理出去,避免造成过多垃圾。</p><h1 id="系统工程"><a href="#系统工程" class="headerlink" title="系统工程"></a>系统工程</h1><h2 id="1-工程化"><a href="#1-工程化" class="headerlink" title="1 工程化"></a>1 工程化</h2><p>1.【推荐】针对业务形态，工程分为以下几种情况：</p><p><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEE3C.tmp.png" alt="img">Web工程</p><p><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEE4D.tmp.png" alt="img"><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEE4E.tmp.png" alt="img">web-应用名，以”web-“前缀开头。Dubbo工程</p><p><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEE4F.tmp.png" alt="img"><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEE5F.tmp.png" alt="img">service-应用名，以”service-“前缀开头。Interface工程</p><p><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEE60.tmp.png" alt="img"><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEE71.tmp.png" alt="img">interface-应用名，以”interface-“前缀开头。工具或者任务</p><p><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEE72.tmp.png" alt="img"><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEE73.tmp.png" alt="img">tool-应用名，以”tool-“前缀开头，或以”job-“前缀开头。Java公共Jar包</p><p><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEE84.tmp.png" alt="img">common-模块名，以”common-“前缀开头。</p><p><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEE85.tmp.jpg" alt="img">2.【推荐】J2SE项目工程结构</p><p>说明：J2SE项目有两种情况：</p><p>一个是小工具，可以独立运行，处理一些简单的业务，打包为zip包。</p><p>另一个是公共开发包，打包为jar包。以API方式提供给其它应用程序，以专业专注的精神进行分包，例如：通信协议包，常用工具包，加密解密包等等。公共开发包可能无法独立运行，所有的服务API都需要进行单元测试，并要保证线程安全。</p><h2 id="2-包管理、版本管理"><a href="#2-包管理、版本管理" class="headerlink" title="2 包管理、版本管理"></a>2 包管理、版本管理</h2><p>1.【推荐】Maven定义GAV遵从以下规则:</p><p>* GroupID格式:com.{公司}.{部门}.业务线.[子业务线],最多4级。</p><p>* 正例:com.iflytek.cbg.lx 或 com.iflytek.cgb.kuyin</p><p><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEE86.tmp.png" alt="img"><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEE96.tmp.png" alt="img">ArtifactID格式:产品线名-模块名。语义不重复不遗漏,先到中央仓库去查证一下。正例:lx-web-user/lx-dubbo-user/lx-common</p><p>* Version:详细规定参考下方。</p><p>2.【推荐】二方库版本号命名方式:主版本号.次版本号.修订号</p><p><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEE97.tmp.png" alt="img"><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEE98.tmp.png" alt="img">主版本号:当做了不兼容的API修改,或者增加了能改变产品方向的新功能。次版本号:当做了向下兼容的功能性新增(新增类、接口等)。</p><p><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEEA9.tmp.png" alt="img">修订号:修复bug,没有修改方法签名的功能加强,保持API兼容性。</p><p>说明:正式发布的类库必须先去中央仓库进行查证,使版本号有延续性,正式版本号不允许覆盖升级。如当前版本:1.3.3,那么下一个合理的版本号: 1.3.4或1.4.0或2.0.0</p><p>3.【推荐】线上应用不要依赖SNAPSHOT版本(安全包除外)。</p><p>说明:不依赖SNAPSHOT版本是保证应用发布的幂等性。另外,也可以加快编译时的打包构建。</p><p>4.【推荐】上传代码至svn时，项目相关的配置文件（.settings、.classpath、.project）不要上传本地调试文件，仅上传src文件夹、pom.xml或bin文件夹。</p><p>5.【推荐】Maven工程需要在POM配置仓库地址，避免在本地maven setting中配置，其他组员check out后无法下载或者需要从远程仓库下载；</p><h2 id="3-安全性"><a href="#3-安全性" class="headerlink" title="3 安全性"></a>3 安全性</h2><p>【备注】公司已经有大量项目被恶意攻击历史，所以研发必须提高安全意识和相关技术、方法、手段。</p><p>1.【强制】对外提供的Http Api，必须进行签名、加密。</p><p>2.【强制】用户敏感数据禁止直接展示,必须对展示数据进行脱敏。接口对敏感数据也必须加密，例如：用户密码。显示成<em>**</em></p><p>3.【强制】隶属于用户个人的页面或者功能必须进行权限控制校验。</p><p>说明：防止没有做水平权限校验就可随意访问、修改、删除别人的数据，比如查看他人的私信内容、修改他人的订单。</p><p>3.【参考】用户请求传入的任何参数必须做有效性验证。说明:忽略参数校验可能导致:</p><p>page size过大导致内存溢出</p><p>恶意order by导致数据库慢查询任意重定向</p><p>SQL注入</p><p>4.【参考】表单、AJAX请求必须执行CSRF安全过滤。</p><p>说明:CSRF(Cross-site request forgery)跨站请求伪造是一类常见编程漏洞。对于存在CSRF漏洞的应用/网站,攻击者可以事先构造好 URL,只要受害者用户一访问,后台便在用户不知情情况下对数据库中用户参数进行相应修改。</p><p>5.【参考】在使用平台资源,譬如短信、邮件、电话、下单、支付,必须实现正确的防重放限制,如数量限制、疲劳度控制、验证码校验,避免被滥刷、资损。</p><p>说明:如注册时发送验证码到手机,如果没有限制次数和频率,那么可以利用此功能骚扰到其它用户,并造成短信平台资源浪费。</p><p>6.【参考】活动类需求，尤其是中奖类活动，必须实现防刷策略。</p><h2 id="4-系统、服务器"><a href="#4-系统、服务器" class="headerlink" title="4 系统、服务器"></a>4 系统、服务器</h2><p>1.【推荐】高并发服务器建议调小TCP协议的time_wait超时时间。</p><p>说明:操作系统默认240秒后,才会关闭处于time_wait状态的连接,在高并发访问下,服务器端会因为处于time_wait的连接数太多,可能无法建立新的连接,所以需要在服务器上调小此等待值。</p><p>正例:在 linux服务器上请通过变更/etc/sysctl.conf文件去修改该缺省值(秒): net.ipv4.tcp_fin_timeout = 30</p><p>2.【推荐】调大服务器所支持的最大文件句柄数(File Descriptor,简写为fd)。</p><p>说明:主流操作系统的设计是将TCP/UDP连接采用与文件一样的方式去管理,即一个连接对应于一个fd。主流的linux服务器默认所支持最大fd数量为1024,当并发连接数很大时很容易因为fd不足而出现”open too many files”错误,导致新的连接无法建立。建议将linux服务器所支持的最大句柄数调高数倍(与服务器的内存数量相关)。</p><p>3.【推荐】给JVM设置-XX:+HeapDumpOnOutOfMemoryError 参数,让JVM碰到OOM场景时输出dump信息。</p><p>说明:OOM的发生是有概率的,甚至有规律地相隔数月才出现一例,出现时的现场信息对查错 非常有价值。</p><p>4.【推荐】当生产环境组件异常、无响应、假死时，务必使用jstack dump线程堆栈，使用jstat –gcutil查看下gc信息，方便后期定位、分析问题。</p><h1 id="七、MySql数据库"><a href="#七、MySql数据库" class="headerlink" title="七、MySql数据库"></a>七、MySql数据库</h1><h2 id="1-建表"><a href="#1-建表" class="headerlink" title="1 建表"></a>1 建表</h2><p>1.【推荐】使用InnoDB存储引擎、UTF-8(utf8mb4)字符集。</p><p>2.【强制】表要有主键。</p><p>3.【推荐】若业务上非实时一致性要求，禁止使用外键，由程序保证最终一致性。说明:外键会导致表与表之间耦合，影响sql性能，高并发下有可能会导致死锁。</p><p>4.【推荐】表名、字段名必须使用小写字母或数字,禁止出现数字开头,禁止两个下划线中间只出现数字。数据库字段名的修改代价很大,因为无法进行预发布,所以字段名称需要慎重考虑。</p><p>正例:getter_admin,task_config,level3_name反例:GetterAdmin,taskConfig,level_3_name</p><p>5.【推荐】表名最好不使用复数名词。</p><p>说明:表名应该仅仅表示表里面的实体内容,不应该表示实体数量。6.【推荐】表的命名最好是加上”模块名称_表名”。</p><p>正例:score_rule / score_user /score_log</p><p>7.【强制】千万不要使用mysql中关键字命名，例如：desc, order等；</p><p>8.【推荐】如果修改字段含义或对字段表示的状态追加时,需要及时更新字段注释。</p><p>9.【强制】主键索引名为pk_字段名;唯一索引名为uk_字段名;普通索引名则为idx_字段名。说明:pk_即 primary key;uk_即unique key;idx_即index的简称。</p><p>10.【强制】所有字段定义为Not Null。说明：</p><p><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEEAA.tmp.png" alt="img"><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEEBA.tmp.png" alt="img"><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEEBB.tmp.png" alt="img"><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEEBC.tmp.png" alt="img">null列影响索引。                     MySql内部需要对null进行特殊处理,会影响性能null需要更多的存储空间 null查询必须使用is 或is not,不能使用=、in等</p><p>11.【强制】禁止使用ENUM类型。</p><p>说明：增加新的枚举值时，需要DDL操作。</p><p>12.【推荐】小数类型为decimal,禁止使用float和double。</p><p>说明:float和double在存储的时候,存在精度损失的问题,很可能在值的比较时,得到不 正确的结果。如果存储的数据范围超过decimal的范围,建议将数据拆成整数和小数分开存储。</p><p>13.【推荐】如果存储的字符串长度几乎相等,使用char定长字符串类型。                                                         varchar是可变长字符串,不预先分配存储空间,长度不要超过5000,如果存储长度大于此值,定义字段类型为text,独立出来一张表,用主键来对应,避免影响其它字段索引效率。</p><p>14.【推荐】字段允许适当冗余,以提高查询性能,但必须考虑数据一致。冗余字段应遵循:</p><p><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEECD.tmp.png" alt="img">不是频繁修改的字段。</p><p><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEECE.tmp.png" alt="img">不是varchar超长字段,更不能是text字段。</p><p>正例:商品类目名称使用频率高,字段长度短,名称基本一成不变,可在相关联的表中冗余存储类目名称,避免关联查询。</p><p>15.【参考】合适的字符存储长度,不但节约数据库表空间、节约索引存储,更重要的是提升检索速度。</p><h2 id="2-索引"><a href="#2-索引" class="headerlink" title="2 索引"></a>2 索引</h2><p>说明：务必用explain确认SQL语句是否走了索引。</p><p>1.【参考】创建索引时避免有如下极端误解:</p><p><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEECF.tmp.png" alt="img">宁滥勿缺。误认为一个查询就需要建一个索引。</p><p><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEEE0.tmp.png" alt="img">宁缺勿滥。误认为索引会消耗空间、严重拖慢更新和新增速度。</p><p><img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEEE1.tmp.png" alt="img">抵制惟一索引。误认为业务的惟一性一律需要在应用层通过”先查后插”方式解决。</p><p>2.【强制】业务上具有唯一特性的字段,即使是多个字段的组合,也必须建成唯一索引。</p><p>说明:不要以为唯一索引影响了insert速度,这个速度损耗可以忽略,但提高查找速度是明显的;另外,即使在应用层做了非常完善的校验控制,只要没有唯一索引,根据墨菲定律,必然有脏数据产生。</p><p>3.【参考】建立组合索引，必须根据业务上的查询需求使用合理顺序。</p><p>说明:联合索引左前缀原则：(a,b,c)只有查询条件为a|(a,b)|(a,b,c)才会走该组合索引，但跟条件顺序无关，例如：ba、bac、bca、cab都会走索引，而bc、ac不会走索引。</p><p>4.【参考】负向查询(!=、not in、not exists)、前导模糊查询(like <img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEEE2.tmp.jpg" alt="img">xxx’)、在查询条件属性上进行函数计算、字段类型需强制转换都不会走索引。</p><p>反例：</p><p>select <em> from score where status!=2 select </em> from score where name like <img src="file:///C:\Users\Admin\AppData\Local\Temp\ksohtml\wpsEEF2.tmp.jpg" alt="img">XX’</p><p>select <em> from score where YEAR(create_time) &lt;= ‘2017’ select </em> from user where phone=13800001234</p><p>6.【推荐】数据区分度不大的字段不宜使用索引，效果不明显。</p><p>说明：”状态”、”性别”这种区分度不大的属性，建立索引是没有什么意义的，不能有效过滤数据，性能与全表扫描类似。反例：select * from user whre sex=1</p><p>7.【推荐】OR查询最好改为IN查询。</p><p>说明：InnoDB引擎中OR查询不能命中索引，MyISAM能命中索引，但会耗费更多的CPU。</p><p>8.【推荐】超过三个表不要使用join。需要join的字段,数据类型必须绝对一致;多表关联查询时,保证被关联的字段需要有索引。说明:即使双表join也要注意表索引、SQL性能。</p><p>9.【推荐】如果有order by的场景,请注意利用索引的有序性。order by最后的字段是组合 索引的一部分,并且放在索引组合顺序的最后,避免出现file_sort的情况,影响查询性能。</p><p>正例:where a=? and b=? order by c; 索引:a_b_c</p><p>反例:索引中有范围查找,那么索引有序性无法利用,如:WHERE a&gt;10 ORDER BY b;索引a_b无法排序。10.建组合索引的时候,区分度最高的在最左边。</p><p>正例:如果where a=? and b=? ,a列的几乎接近于唯一值,那么只需要单建 idx_a索引即可。</p><p>说明:存在非等号和等号混合判断条件时,在建索引时,请把等号条件的列前置。如:where a&gt;? and b=?那么即使a的区分度更高,也必须把b放在索引的最前列。</p><h2 id="3-SQL语句"><a href="#3-SQL语句" class="headerlink" title="3 SQL语句"></a>3 SQL语句</h2><p>1.【推荐】尽量不要使用select *。</p><p>2.【推荐】禁止大表使用join，禁止大表使用子查询。</p><p>3.【推荐】不要使用count(列名)或count(常量)来替代count,count(<em>)是SQL92定义的标准统计行数的语法,跟数据库无关,跟NULL和非NULL无关。说明:count(</em>)会统计值为NULL的行,而count(列名)不会统计此列为NULL值的行。</p><p>4.【强制】使用ISNULL()来判断是否为NULL值。注意:NULL与任何值的直接比较都为NULL。</p><blockquote><p>说明:</p><p>NULL&lt;&gt;NULL的返回结果是NULL,而不是false。</p><p>NULL=NULL的返回结果是NULL,而不是true。</p><p>* NULL&lt;&gt;1的返回结果是NULL,而不是true。</p></blockquote><p>5.【推荐】在代码中写分页查询逻辑时,若count为0应直接返回,避免执行后面的分页语句。</p><p>6.【推荐】不要使用存储过程,存储过程难以调试和扩展,更没有移植性。</p><h2 id="4其他"><a href="#4其他" class="headerlink" title="4其他"></a>4其他</h2><p>1.【强制】不要使用BLOB相关类型存储大文件或者大照片。说明：文件应使用文件系统存储，数据库存文件的URI</p><p>2.【推荐】把计算尽量放到业务层(代码层)而不是数据库层，可以节省数据库服务的CPU资源，还可以根据场景在业务层进行缓存等优化，减少数据库压力。</p></logger>]]></content>
      
      
      <categories>
          
          <category> Java规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Session一致性</title>
      <link href="/2019/01/08/Session%E4%B8%80%E8%87%B4%E6%80%A7/"/>
      <url>/2019/01/08/Session%E4%B8%80%E8%87%B4%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="session的概念"><a href="#session的概念" class="headerlink" title="session的概念"></a>session的概念</h2><h3 id="什么是session？"><a href="#什么是session？" class="headerlink" title="什么是session？"></a>什么是session？</h3><p>服务器为每个用户创建一个会话，存储用户的相关信息，以便多次请求能够定位到同一个上下文。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当用户请求来自应用程序的 Web 页时，如果该用户还没有会话，则 Web 服务器将自动创建一个 Session 对象。当会话过期或被放弃后，服务器将终止该会话。</p><p>Web开发中，web-server可以自动为同一个浏览器的访问用户自动创建session，提供数据存储功能。最常见的，会把用户的登录信息、用户信息存储在session中，以保持登录状态。</p><h3 id="什么是session一致性问题？"><a href="#什么是session一致性问题？" class="headerlink" title="什么是session一致性问题？"></a>什么是session一致性问题？</h3><p>只要用户不重启浏览器，每次http短连接请求，理论上服务端都能定位到session，保持会话。</p><h3 id="分布式session"><a href="#分布式session" class="headerlink" title="分布式session"></a>分布式session</h3><p>单服务器web应用中，session信息只需存在该服务器中，这是我们前几年最常接触的方式，但是近几年随着分布式系统的流行，单系统已经不能满足日益增长的百万级用户的需求，集群方式部署服务器已在很多公司运用起来，当高并发量的请求到达服务端的时候通过负载均衡的方式分发到集群中的某个服务器，这样就有可能导致同一个用户的多次请求被分发到集群的不同服务器上，就会出现取不到session数据的情况，于是session的共享就成了一个问题。</p><p><img src="/images/926638-20171117190525546-1072349257.png" alt></p><p>如上图，假设用户包含登录信息的session都记录在第一台web-server上，反向代理如果将请求路由到另一台web-server上，可能就找不到相关信息，而导致用户需要重新登录。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="Session同步"><a href="#Session同步" class="headerlink" title="Session同步"></a>Session同步</h3><p><img src="/images/道/926638-20171117190609421-1278140860.png" alt></p><ul><li><p>简介</p><blockquote><p>多台应用服务器之间相互同步复制Session，这样每个服务器都有全部的Session</p></blockquote></li><li><p>优点</p><blockquote><p>应用程序不需要修改代码。</p></blockquote></li><li><p>缺点</p><blockquote><ul><li>Session同步占用内网带宽，而且有延迟。</li></ul><ul><li>每台机器包含所有的Session会受到内存的限制。</li></ul></blockquote></li></ul><h3 id="客户端存储法"><a href="#客户端存储法" class="headerlink" title="客户端存储法"></a>客户端存储法</h3><p><img src="/images/道/926638-20171117191245265-301978953.png" alt></p><ul><li><p>简介</p><blockquote><p>服务端存储所有用户的session，内存占用较大，可以将session存储到浏览器cookie中，每个端只要存储一个用户的数据了。</p></blockquote></li><li><p>优点</p><blockquote><p>服务端不需要存储</p></blockquote></li><li><p>缺点</p><blockquote><ul><li>每次http请求都携带session，占<strong>外网带宽</strong></li><li>数据存储在端上，并在网络传输，存在泄漏、篡改、窃取等安全隐患</li><li>session存储的数据大小受cookie限制</li></ul></blockquote><h3 id="反向代理hash一致性"><a href="#反向代理hash一致性" class="headerlink" title="反向代理hash一致性"></a>反向代理hash一致性</h3></li></ul><p><img src="/images/道/926638-20171117191245265-301978953.png" alt></p><ul><li><p>简介</p><blockquote><p>web-server为了保证高可用，有多台冗余，反向代理层能不能做一些事情，让同一个用户的请求保证落在一台web-server上呢？</p><ul><li>反向代理层使用用户ip来做hash，以保证同一个ip的请求落在同一个web-server上</li><li>反向代理使用http协议中的某些业务属性来做hash，例如sid，city_id，user_id等，能够更加灵活的实施hash策略，以保证同一个浏览器用户的请求落在同一个web-server上</li></ul></blockquote></li><li><p>优点</p><blockquote><ul><li>只需要改nginx配置，不需要修改应用代码</li><li>负载均衡，只要hash属性是均匀的，多台web-server的负载是均衡的</li><li>可以支持web-server水平扩展（session同步法是不行的，受内存限制）</li></ul></blockquote></li><li><p>缺点</p><blockquote><ul><li>如果web-server重启，一部分session会丢失，产生业务影响，例如部分用户重新登录</li><li>如果web-server水平扩展，<strong>rehash</strong>后session重新分布，也会有一部分用户路由不到正确的session</li></ul><p>session一般是有有效期的，所有不足中的两点，可以认为等同于部分session失效，一般问题不大。</p><p>对于四层hash还是七层hash，个人推荐前者：<strong>让专业的软件做专业的事情</strong>，反向代理就负责转发，尽量不要引入应用层业务属性，除非不得不这么做（例如，有时候多机房多活需要按照业务属性路由到不同机房的web-server）。</p></blockquote></li></ul><h3 id="后端统一集中存储"><a href="#后端统一集中存储" class="headerlink" title="后端统一集中存储"></a>后端统一集中存储</h3><p><img src="/images/道/926638-20171117190914734-312299182.png" alt></p><ul><li><p>简介</p><blockquote><p>将session存储在web-server后端的存储层，数据库或者缓存</p></blockquote></li><li><p>优点</p><blockquote><ul><li>没有安全隐患</li><li>可以水平扩展，数据库/缓存水平切分即可</li><li>web-server重启或者扩容都不会有session丢失</li></ul></blockquote></li><li><p>缺点</p><blockquote><p>增加了一次网络调用，并且需要修改应用代码。对于db存储还是cache，个人推荐后者：session读取的频率会很高，数据库压力会比较大。如果有session高可用需求，cache可以做高可用，但大部分情况下session可以丢失，一般也不需要考虑高可用。</p></blockquote></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>保证session一致性</strong>的架构设计常见方法：</p><ul><li><strong>session同步法</strong>：多台web-server相互同步数据</li><li><strong>客户端存储法：</strong>一个用户只存储自己的数据</li><li><strong>反向代理hash一致性：</strong>四层hash和七层hash都可以做，保证一个用户的请求落在一台web-server上</li><li><strong>后端统一存储：</strong>web-server重启和扩容，session也不会丢失</li></ul><p>对于方案3和方案4，个人建议推荐后者：</p><ul><li><strong>web层、service层无状态是大规模分布式系统设计原则之一</strong>，session属于状态，不宜放在web层</li><li><strong>让专业的软件做专业的事情</strong>，web-server存session？还是让cache去做这样的事情吧。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Session </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置 MyBatis Redis 二级缓存</title>
      <link href="/2019/01/02/%E9%85%8D%E7%BD%AEMyBatis%20Redis%20%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98/"/>
      <url>/2019/01/02/%E9%85%8D%E7%BD%AEMyBatis%20Redis%20%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>注：由于之前的文章已经配置过 Redis 这里不再赘述</p><h3 id="MyBatis-缓存介绍"><a href="#MyBatis-缓存介绍" class="headerlink" title="MyBatis 缓存介绍"></a><a href="#MyBatis-缓存介绍" title="MyBatis 缓存介绍"></a>MyBatis 缓存介绍</h3><h4 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a><a href="#一级缓存" title="一级缓存"></a>一级缓存</h4><p>MyBatis 会在表示会话的 <code>SqlSession</code> 对象中建立一个简单的缓存，将每次查询到的结果结果缓存起来，当下次查询的时候，如果判断先前有个完全一样的查询，会直接从缓存中直接将结果取出，返回给用户，不需要再进行一次数据库查询了。</p><p>一级缓存是 <code>SqlSession</code> 级别的缓存。在操作数据库时需要构造 sqlSession 对象，在对象中有一个（内存区域）数据结构（HashMap）用于存储缓存数据。不同的 sqlSession 之间的缓存数据区域（HashMap）是互相不影响的。其作用域是同一个 SqlSession，在同一个 sqlSession 中两次执行相同的 sql 语句，第一次执行完毕会将数据库中查询的数据写到缓存（内存），第二次会从缓存中获取数据将不再从数据库查询，从而提高查询效率。当一个 sqlSession 结束后该 sqlSession 中的一级缓存也就不存在了。Mybatis 默认开启一级缓存。</p><h4 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a><a href="#二级缓存" title="二级缓存"></a>二级缓存</h4><p>二级缓存是 mapper 级别的缓存，多个 <code>SqlSession</code> 去操作同一个 Mapper 的 sql 语句，多个 SqlSession 去操作数据库得到数据会存在二级缓存区域，多个 SqlSession 可以共用二级缓存，二级缓存是跨 SqlSession 的。其作用域是 mapper 的同一个 <code>namespace</code>，不同的 sqlSession 两次执行相同 namespace 下的 sql 语句且向 sql 中传递参数也相同即最终执行相同的 sql 语句，第一次执行完毕会将数据库中查询的数据写到缓存（内存），第二次会从缓存中获取数据将不再从数据库查询，从而提高查询效率。Mybatis 默认没有开启二级缓存需要在 setting 全局参数中配置开启二级缓存。</p><h3 id="配置-MyBatis-二级缓存"><a href="#配置-MyBatis-二级缓存" class="headerlink" title="配置 MyBatis 二级缓存"></a><a href="#配置-MyBatis-二级缓存" title="配置 MyBatis 二级缓存"></a>配置 MyBatis 二级缓存</h3><h4 id="开启-MyBatis-二级缓存"><a href="#开启-MyBatis-二级缓存" class="headerlink" title="开启 MyBatis 二级缓存"></a><a href="#开启-MyBatis-二级缓存" title="开启 MyBatis 二级缓存"></a>开启 MyBatis 二级缓存</h4><p>在 Spring Boot 配置文件中开启 MyBatis 二级缓存，配置代码如下：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token key atrule">cache-enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实体类实现序列化接口并声明序列号"><a href="#实体类实现序列化接口并声明序列号" class="headerlink" title="实体类实现序列化接口并声明序列号"></a><a href="#实体类实现序列化接口并声明序列号" title="实体类实现序列化接口并声明序列号"></a>实体类实现序列化接口并声明序列号</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 8289770415244673535L<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="IDEA-提示生成序列号"><a href="#IDEA-提示生成序列号" class="headerlink" title="IDEA 提示生成序列号"></a><a href="#IDEA-提示生成序列号" title="IDEA 提示生成序列号"></a>IDEA 提示生成序列号</h5><p>默认情况下 Intellij IDEA 不会提示继承了 Serializable 接口的类生成 serialVersionUID 的警告。如果需要生成 serialVersionUID，需要手动配置。</p><p>File -&gt; Settings -&gt; Inspections -&gt; Serialization issues -&gt; Serialization class without ‘serialVersionUID’</p><p><img src="https://note.youdao.com/yws/public/resource/f453eedf1eaa47d8bf912acaf4ba0e3e/xmlnote/CC89940C2A364B6EBD88A3366C6821BA/3353" alt></p><h4 id="创建相关工具类"><a href="#创建相关工具类" class="headerlink" title="创建相关工具类"></a><a href="#创建相关工具类" title="创建相关工具类"></a>创建相关工具类</h4><h5 id="实现-Spring-ApplicationContextAware-接口，用于手动注入-Bean"><a href="#实现-Spring-ApplicationContextAware-接口，用于手动注入-Bean" class="headerlink" title="实现 Spring ApplicationContextAware 接口，用于手动注入 Bean"></a><a href="#实现-Spring-ApplicationContextAware-接口，用于手动注入-Bean" title="实现 Spring ApplicationContextAware 接口，用于手动注入 Bean"></a>实现 Spring ApplicationContextAware 接口，用于手动注入 Bean</h5><p>创建一个名为 <code>ApplicationContextHolder</code> 的工具类，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>funtl<span class="token punctuation">.</span>itoken<span class="token punctuation">.</span>common<span class="token punctuation">.</span>context<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>Validate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>BeansException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>DisposableBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContextAware<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextHolder</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span><span class="token punctuation">,</span> DisposableBean <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ApplicationContextHolder<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ApplicationContext applicationContext<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取存储在静态变量中的 ApplicationContext     *     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ApplicationContext <span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">assertContextInjected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> applicationContext<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 从静态变量 applicationContext 中获取 Bean，自动转型成所赋值对象的类型     *     * @param name     * @param &lt;T>     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">assertContextInjected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 从静态变量 applicationContext 中获取 Bean，自动转型成所赋值对象的类型     *     * @param clazz     * @param &lt;T>     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">assertContextInjected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 实现 DisposableBean 接口，在 Context 关闭时清理静态变量     *     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"清除 SpringContext 中的 ApplicationContext: {}"</span><span class="token punctuation">,</span> applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        applicationContext <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 实现 ApplicationContextAware 接口，注入 Context 到静态变量中     *     * @param applicationContext     * @throws BeansException     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span>ApplicationContext applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        ApplicationContextHolder<span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 断言 Context 已经注入     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">assertContextInjected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Validate<span class="token punctuation">.</span><span class="token function">validState</span><span class="token punctuation">(</span>applicationContext <span class="token operator">!=</span> null<span class="token punctuation">,</span> <span class="token string">"applicationContext 属性未注入，请在 spring-context.xml 配置中定义 ApplicationContextHolder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实现-MyBatis-Cache-接口，用于自定义缓存为-Redis"><a href="#实现-MyBatis-Cache-接口，用于自定义缓存为-Redis" class="headerlink" title="实现 MyBatis Cache 接口，用于自定义缓存为 Redis"></a><a href="#实现-MyBatis-Cache-接口，用于自定义缓存为-Redis" title="实现 MyBatis Cache 接口，用于自定义缓存为 Redis"></a>实现 MyBatis Cache 接口，用于自定义缓存为 Redis</h5><p>创建一个名为 <code>RedisCache</code> 的工具类，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>funtl<span class="token punctuation">.</span>itoken<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>funtl<span class="token punctuation">.</span>itoken<span class="token punctuation">.</span>common<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContextHolder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>Cache<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisCallback<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ValueOperations<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReadWriteLock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantReadWriteLock<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Redis 缓存工具类 * &lt;p>Title: RedisCache&lt;/p> * &lt;p>Description: &lt;/p> * * @author Lusifer * @version 1.0.0 * @date 2018/8/13 6:03 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisCache</span> <span class="token keyword">implements</span> <span class="token class-name">Cache</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>RedisCache<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ReadWriteLock readWriteLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String id<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// cache instance id</span>    <span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> EXPIRE_TIME_IN_MINUTES <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// redis过期时间</span>    <span class="token keyword">public</span> <span class="token function">RedisCache</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Cache instances require an ID"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Put query result to redis     *     * @param key     * @param value     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">putObject</span><span class="token punctuation">(</span>Object key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            RedisTemplate redisTemplate <span class="token operator">=</span> <span class="token function">getRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ValueOperations opsForValue <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            opsForValue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> EXPIRE_TIME_IN_MINUTES<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Put query result to redis"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Redis put failed"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Get cached query result from redis     *     * @param key     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">getObject</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            RedisTemplate redisTemplate <span class="token operator">=</span> <span class="token function">getRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ValueOperations opsForValue <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Get cached query result from redis"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            System.out.println("****" + opsForValue.get(key).toString());</span>            <span class="token keyword">return</span> opsForValue<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Redis get failed, fail over to db"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Remove cached query result from redis     *     * @param key     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">removeObject</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            RedisTemplate redisTemplate <span class="token operator">=</span> <span class="token function">getRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Remove cached query result from redis"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Redis remove failed"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Clears this cache instance     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        RedisTemplate redisTemplate <span class="token operator">=</span> <span class="token function">getRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span>RedisCallback<span class="token punctuation">)</span> connection <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            connection<span class="token punctuation">.</span><span class="token function">flushDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Clear all the cached query result from redis"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * This method is not used     *     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ReadWriteLock <span class="token function">getReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> readWriteLock<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> RedisTemplate <span class="token function">getRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>redisTemplate <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            redisTemplate <span class="token operator">=</span> ApplicationContextHolder<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"redisTemplate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Mapper-接口中增加注解"><a href="#Mapper-接口中增加注解" class="headerlink" title="Mapper 接口中增加注解"></a><a href="#Mapper-接口中增加注解" title="Mapper 接口中增加注解"></a>Mapper 接口中增加注解</h4><p>在 Mapper 接口中增加注解，声明需要使用二级缓存</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>funtl<span class="token punctuation">.</span>itoken<span class="token punctuation">.</span>common<span class="token punctuation">.</span>mapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>funtl<span class="token punctuation">.</span>itoken<span class="token punctuation">.</span>common<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>TbSysUser<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>funtl<span class="token punctuation">.</span>itoken<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>RedisCache<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>CacheNamespace<span class="token punctuation">;</span><span class="token keyword">import</span> tk<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>MyMapper<span class="token punctuation">;</span><span class="token annotation punctuation">@CacheNamespace</span><span class="token punctuation">(</span>implementation <span class="token operator">=</span> RedisCache<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TbSysUserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">MyMapper</span><span class="token operator">&lt;</span>TbSysUser<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 配置 MyBatis Redis 二级缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML工具类</title>
      <link href="/2019/01/02/XML%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2019/01/02/XML%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul><li>将 Object 转换为 xml 格式字符串</li><li>将 xml 格式的 String 字符串转换为 Object</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * xml工具类 * @author AsiaCui */</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>StringReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>StringWriter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>JAXBContext<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>Marshaller<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>Unmarshaller<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 将javabean转换为xml格式字符串     * @param obj     * @return     */</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">toXmlString</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String result<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                JAXBContext context <span class="token operator">=</span> JAXBContext<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Marshaller marshaller <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createMarshaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                StringWriter writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                marshaller<span class="token punctuation">.</span><span class="token function">marshal</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> writer<span class="token punctuation">)</span><span class="token punctuation">;</span>                result <span class="token operator">=</span> writer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**      * 将xml格式的String字符串转换为javabeen      * @param input xml格式字符串      * @param claaz      * @return      */</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">parseObject</span><span class="token punctuation">(</span>String input<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> claaz<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object result<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                JAXBContext context <span class="token operator">=</span> JAXBContext<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>claaz<span class="token punctuation">)</span><span class="token punctuation">;</span>                Unmarshaller unmarshaller <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createUnmarshaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                result <span class="token operator">=</span> unmarshaller<span class="token punctuation">.</span><span class="token function">unmarshal</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> XML工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JNI 加载本地dll类库</title>
      <link href="/2018/12/31/JNI-%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0dll%E7%B1%BB%E5%BA%93/"/>
      <url>/2018/12/31/JNI-%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0dll%E7%B1%BB%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 加载本地dll类库，调用实例&lt;code>Library.load("IESNlp.dll");&lt;/code> * try { *         JniLibrary.loadLibrary("IESNlp.dll","2018-03-13"); * } finally { *      System.out.println("Loading " + "IESNlp.dll"); * } */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JniLibrary</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> String SEPARATOR<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        SEPARATOR <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"file.separator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * &lt;p>     * 重jar文件中抽取出dll文件     * &lt;/p>     *      * @param fileName     *            ：抽取文件名，包含路径     * @param mappedName     *            ： dll文件名     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">extract</span><span class="token punctuation">(</span>String fileName<span class="token punctuation">,</span> String mappedName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        FileOutputStream os <span class="token operator">=</span> null<span class="token punctuation">;</span>        InputStream is <span class="token operator">=</span> null<span class="token punctuation">;</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果文件存在则先进行删除操作</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 从jar文件中读取dll文件</span>            is <span class="token operator">=</span> JniLibrary<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"/resources/"</span> <span class="token operator">+</span> mappedName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>is <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> read<span class="token punctuation">;</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>read <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>os <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>is <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">load</span><span class="token punctuation">(</span>String libName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>libName<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>SEPARATOR<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>libName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsatisfiedLinkError</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">extract</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String libName <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 尝试从系统临时目录加载该文件</span>        String path <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.io.tmpdir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//$NON-NLS-1$</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>path <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建jni文件夹</span>            path <span class="token operator">=</span> path <span class="token operator">+</span> <span class="token string">"jni"</span><span class="token punctuation">;</span>            File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            path <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 文件夹是否存在</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsatisfiedLinkError</span><span class="token punctuation">(</span><span class="token string">"创建文件夹"</span> <span class="token operator">+</span> path <span class="token operator">+</span> <span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            String fileName <span class="token operator">=</span> path <span class="token operator">+</span> SEPARATOR <span class="token operator">+</span> libName<span class="token punctuation">;</span>            file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">extract</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> libName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 加载类库     *      * @param name: dll名称     * @param expdate: dll最后修改日期.格式为:yyyy-MM-dd.如:2009-06-11     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loadLibrary</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String expdate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String libName <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 尝试从系统临时目录加载该文件</span>        String path <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.io.tmpdir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//$NON-NLS-1$</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>path <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建jni文件夹</span>            path <span class="token operator">=</span> path <span class="token operator">+</span> <span class="token string">"jni"</span><span class="token punctuation">;</span>            File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            path <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 文件夹是否存在</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsatisfiedLinkError</span><span class="token punctuation">(</span><span class="token string">"创建文件夹"</span> <span class="token operator">+</span> path <span class="token operator">+</span> <span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            String fileName <span class="token operator">=</span> path <span class="token operator">+</span> SEPARATOR <span class="token operator">+</span> libName<span class="token punctuation">;</span>            file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 判断文件是否存在，不存在进行重新生成</span>            Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String modifyDate <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>modifyDate<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>expdate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">extract</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> libName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">load</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">load</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 加载失败，从临时目录和jar文件都都没有找到该文件</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsatisfiedLinkError</span><span class="token punctuation">(</span><span class="token string">"no "</span> <span class="token operator">+</span> libName <span class="token operator">+</span> <span class="token string">" in java.io.tmpdir or the jar file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JNI 加载本地dll类库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日期时间工具类</title>
      <link href="/2018/12/31/%E6%9C%9F%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2018/12/31/%E6%9C%9F%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 日期时间工具类 * @type {{dateFormat}} */</span><span class="token keyword">var</span> DateTime <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> patterns <span class="token operator">=</span> <span class="token punctuation">{</span>        PATTERN_ERA<span class="token punctuation">:</span> <span class="token string">'G'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// Era 标志符 Era strings. For example: "AD" and "BC"</span>        PATTERN_YEAR<span class="token punctuation">:</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 年</span>        PATTERN_MONTH<span class="token punctuation">:</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 月份</span>        PATTERN_DAY_OF_MONTH<span class="token punctuation">:</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 月份的天数</span>        PATTERN_HOUR_OF_DAY1<span class="token punctuation">:</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 一天中的小时数（1-24）</span>        PATTERN_HOUR_OF_DAY0<span class="token punctuation">:</span> <span class="token string">'H'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 24 小时制，一天中的小时数（0-23）</span>        PATTERN_MINUTE<span class="token punctuation">:</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 小时中的分钟数</span>        PATTERN_SECOND<span class="token punctuation">:</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 秒</span>        PATTERN_MILLISECOND<span class="token punctuation">:</span> <span class="token string">'S'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 毫秒</span>        PATTERN_DAY_OF_WEEK<span class="token punctuation">:</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 一周中对应的星期，如星期一，周一</span>        PATTERN_DAY_OF_YEAR<span class="token punctuation">:</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 一年中的第几天</span>        PATTERN_DAY_OF_WEEK_IN_MONTH<span class="token punctuation">:</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 一月中的第几个星期(会把这个月总共过的天数除以7,不够准确，推荐用W)</span>        PATTERN_WEEK_OF_YEAR<span class="token punctuation">:</span> <span class="token string">'w'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 一年中的第几个星期</span>        PATTERN_WEEK_OF_MONTH<span class="token punctuation">:</span> <span class="token string">'W'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 一月中的第几星期(会根据实际情况来算)</span>        PATTERN_AM_PM<span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 上下午标识</span>        PATTERN_HOUR1<span class="token punctuation">:</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 12 小时制 ，am/pm 中的小时数（1-12）</span>        PATTERN_HOUR0<span class="token punctuation">:</span> <span class="token string">'K'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 和 h 类型</span>        PATTERN_ZONE_NAME<span class="token punctuation">:</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 时区名</span>        PATTERN_ZONE_VALUE<span class="token punctuation">:</span> <span class="token string">'Z'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 时区值</span>        PATTERN_WEEK_YEAR<span class="token punctuation">:</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 和 y 类型</span>        PATTERN_ISO_DAY_OF_WEEK<span class="token punctuation">:</span> <span class="token string">'u'</span><span class="token punctuation">,</span>        PATTERN_ISO_ZONE<span class="token punctuation">:</span> <span class="token string">'X'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> week <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'ch'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"0"</span><span class="token punctuation">:</span> <span class="token string">"\u65e5"</span><span class="token punctuation">,</span>            <span class="token string">"1"</span><span class="token punctuation">:</span> <span class="token string">"\u4e00"</span><span class="token punctuation">,</span>            <span class="token string">"2"</span><span class="token punctuation">:</span> <span class="token string">"\u4e8c"</span><span class="token punctuation">,</span>            <span class="token string">"3"</span><span class="token punctuation">:</span> <span class="token string">"\u4e09"</span><span class="token punctuation">,</span>            <span class="token string">"4"</span><span class="token punctuation">:</span> <span class="token string">"\u56db"</span><span class="token punctuation">,</span>            <span class="token string">"5"</span><span class="token punctuation">:</span> <span class="token string">"\u4e94"</span><span class="token punctuation">,</span>            <span class="token string">"6"</span><span class="token punctuation">:</span> <span class="token string">"\u516d"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'en'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"0"</span><span class="token punctuation">:</span> <span class="token string">"Sunday"</span><span class="token punctuation">,</span>            <span class="token string">"1"</span><span class="token punctuation">:</span> <span class="token string">"Monday"</span><span class="token punctuation">,</span>            <span class="token string">"2"</span><span class="token punctuation">:</span> <span class="token string">"Tuesday"</span><span class="token punctuation">,</span>            <span class="token string">"3"</span><span class="token punctuation">:</span> <span class="token string">"Wednesday"</span><span class="token punctuation">,</span>            <span class="token string">"4"</span><span class="token punctuation">:</span> <span class="token string">"Thursday"</span><span class="token punctuation">,</span>            <span class="token string">"5"</span><span class="token punctuation">:</span> <span class="token string">"Friday"</span><span class="token punctuation">,</span>            <span class="token string">"6"</span><span class="token punctuation">:</span> <span class="token string">"Saturday"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取当前时间     * @returns {string}     */</span>    <span class="token keyword">var</span> handlerGetCurrentTime <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> year <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> month <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> day <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> hours <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> minutes <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> seconds <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> timeString <span class="token operator">=</span> year <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> hours <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> minutes <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> seconds<span class="token punctuation">;</span>        <span class="token keyword">return</span> timeString<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 比较时间大小     * time1 > time2 return 1     * time1 &lt; time2 return -1     * time1 == time2 return 0     * @param time1     * @param time2     * @returns {number}     */</span>    <span class="token keyword">var</span> handlerCompareTime <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>time1<span class="token punctuation">,</span> time2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>time1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/-/g</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>time2<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/-/g</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>time1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/-/g</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>time2<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/-/g</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>time1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/-/g</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>time2<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/-/g</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 是否闰年     * @param year     * @returns {boolean}     */</span>    <span class="token keyword">var</span> handlerIsLeapYear <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>year<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取某个月的天数，从 0 开始     * @param year     * @param month     * @returns {*}     */</span>    <span class="token keyword">var</span> handlerGetDaysOfMonth <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isLeapYear</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">29</span> <span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">[</span>month<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取某个月的天数，从 0 开始     * @param year     * @param month     * @returns {number}     */</span>    <span class="token keyword">var</span> handlerGetDaysOfMonth2 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将天置为 0，会获取其上个月的最后一天</span>        month <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 距离现在几天的日期：负数表示今天之前的日期，0 表示今天，整数表示未来的日期     * 如 -1 表示昨天的日期，0 表示今天，2 表示后天     * @param days     * @returns {string}     */</span>    <span class="token keyword">var</span> handlerFromToday <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>days<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        today<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> days<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> date <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> today<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> date<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 格式化日期时间     * @param dateTime 需要格式化的日期时间     * @param pattern 格式化的模式，如 yyyy-MM-dd hh(HH):mm:ss.S a k K E D F w W z Z     * @returns {*}     */</span>    <span class="token keyword">var</span> handlerFormat <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>dateTime<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>dateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pattern <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> pattern<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> date<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pattern<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/([a-z])\1*/ig</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>matchStr<span class="token punctuation">,</span> group1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> replacement <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>group1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> patterns<span class="token punctuation">.</span>PATTERN_ERA<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//G</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> patterns<span class="token punctuation">.</span>PATTERN_WEEK_YEAR<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//Y</span>                <span class="token keyword">case</span> patterns<span class="token punctuation">.</span>PATTERN_YEAR<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//y</span>                    replacement <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> patterns<span class="token punctuation">.</span>PATTERN_MONTH<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//M</span>                    <span class="token keyword">var</span> month <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    replacement <span class="token operator">=</span> <span class="token punctuation">(</span>month <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> matchStr<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> month <span class="token punctuation">:</span> month<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> patterns<span class="token punctuation">.</span>PATTERN_DAY_OF_MONTH<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//d</span>                    <span class="token keyword">var</span> days <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    replacement <span class="token operator">=</span> <span class="token punctuation">(</span>days <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> matchStr<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> days <span class="token punctuation">:</span> days<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> patterns<span class="token punctuation">.</span>PATTERN_HOUR_OF_DAY1<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//k(1~24)</span>                    <span class="token keyword">var</span> hours24 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    replacement <span class="token operator">=</span> hours24<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> patterns<span class="token punctuation">.</span>PATTERN_HOUR_OF_DAY0<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//H(0~23)</span>                    <span class="token keyword">var</span> hours24 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    replacement <span class="token operator">=</span> <span class="token punctuation">(</span>hours24 <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> matchStr<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> hours24 <span class="token punctuation">:</span> hours24<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> patterns<span class="token punctuation">.</span>PATTERN_MINUTE<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//m</span>                    <span class="token keyword">var</span> minutes <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    replacement <span class="token operator">=</span> <span class="token punctuation">(</span>minutes <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> matchStr<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> minutes <span class="token punctuation">:</span> minutes<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> patterns<span class="token punctuation">.</span>PATTERN_SECOND<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//s</span>                    <span class="token keyword">var</span> seconds <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    replacement <span class="token operator">=</span> <span class="token punctuation">(</span>seconds <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> matchStr<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> seconds <span class="token punctuation">:</span> seconds<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> patterns<span class="token punctuation">.</span>PATTERN_MILLISECOND<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//S</span>                    <span class="token keyword">var</span> milliSeconds <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    replacement <span class="token operator">=</span> milliSeconds<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> patterns<span class="token punctuation">.</span>PATTERN_DAY_OF_WEEK<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//E</span>                    <span class="token keyword">var</span> day <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    replacement <span class="token operator">=</span> week<span class="token punctuation">[</span><span class="token string">'ch'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>day<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> patterns<span class="token punctuation">.</span>PATTERN_DAY_OF_YEAR<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//D</span>                    replacement <span class="token operator">=</span> <span class="token function">dayOfTheYear</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> patterns<span class="token punctuation">.</span>PATTERN_DAY_OF_WEEK_IN_MONTH<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//F</span>                    <span class="token keyword">var</span> days <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    replacement <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>days <span class="token operator">/</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> patterns<span class="token punctuation">.</span>PATTERN_WEEK_OF_YEAR<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//w</span>                    <span class="token keyword">var</span> days <span class="token operator">=</span> <span class="token function">dayOfTheYear</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>                    replacement <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>days <span class="token operator">/</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> patterns<span class="token punctuation">.</span>PATTERN_WEEK_OF_MONTH<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//W</span>                    <span class="token keyword">var</span> days <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    replacement <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>days <span class="token operator">/</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> patterns<span class="token punctuation">.</span>PATTERN_AM_PM<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//a</span>                    <span class="token keyword">var</span> hours24 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    replacement <span class="token operator">=</span> hours24 <span class="token operator">&lt;</span> <span class="token number">12</span> <span class="token operator">?</span> <span class="token string">"\u4e0a\u5348"</span> <span class="token punctuation">:</span> <span class="token string">"\u4e0b\u5348"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> patterns<span class="token punctuation">.</span>PATTERN_HOUR1<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//h(1~12)</span>                    <span class="token keyword">var</span> hours12 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">12</span> <span class="token operator">||</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//0转为12</span>                    replacement <span class="token operator">=</span> <span class="token punctuation">(</span>hours12 <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> matchStr<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> hours12 <span class="token punctuation">:</span> hours12<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> patterns<span class="token punctuation">.</span>PATTERN_HOUR0<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//K(0~11)</span>                    <span class="token keyword">var</span> hours12 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">12</span><span class="token punctuation">;</span>                    replacement <span class="token operator">=</span> hours12<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> patterns<span class="token punctuation">.</span>PATTERN_ZONE_NAME<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//z</span>                    replacement <span class="token operator">=</span> <span class="token function">handlerGetZoneNameValue</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> patterns<span class="token punctuation">.</span>PATTERN_ZONE_VALUE<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//Z</span>                    replacement <span class="token operator">=</span> <span class="token function">handlerGetZoneNameValue</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> patterns<span class="token punctuation">.</span>PATTERN_ISO_DAY_OF_WEEK<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//u</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> patterns<span class="token punctuation">.</span>PATTERN_ISO_ZONE<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//X</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> replacement<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 计算一个日期是当年的第几天     * @param date     * @returns {number}     */</span>    <span class="token keyword">var</span> handlerDayOfTheYear <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> year <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> month <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//从0开始</span>        <span class="token keyword">var</span> days <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> daysArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isLeapYear</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">29</span> <span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> month<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            days <span class="token operator">+</span><span class="token operator">=</span> daysArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> days<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获得时区名和值     * @param dateObj     * @returns {{name: string, value: string}}     */</span>    <span class="token keyword">var</span> handlerGetZoneNameValue <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>dateObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>dateObj<span class="token punctuation">)</span><span class="token punctuation">;</span>        date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">UTC</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> arr <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/([A-Z]+)([-+]\d+:?\d+)/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'name'</span><span class="token punctuation">:</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'value'</span><span class="token punctuation">:</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        getCurrentTime<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">handlerGetCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        compareTime<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>time1<span class="token punctuation">,</span> time2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">handlerCompareTime</span><span class="token punctuation">(</span>time1<span class="token punctuation">,</span> time2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        isLeapYear<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>year<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">handlerIsLeapYear</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        getDaysOfMonth<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">handlerGetDaysOfMonth</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        getDaysOfMonth2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">handlerGetDaysOfMonth2</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        fromToday<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>days<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">handlerFromToday</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        format<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>dateTime<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">handlerFormat</span><span class="token punctuation">(</span>dateTime<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        dayOfTheYear<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">handlerDayOfTheYear</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        getZoneNameValue<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>dateObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">handlerGetZoneNameValue</span><span class="token punctuation">(</span>dateObj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 日期时间工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Js工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot默认配置源码</title>
      <link href="/2018/12/30/Spring-Boot%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E6%BA%90%E7%A0%81/"/>
      <url>/2018/12/30/Spring-Boot%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h3 id="源码位置"><a href="#源码位置" class="headerlink" title="源码位置"></a>源码位置</h3><p><code>Spring Boot</code> 默认自动配置绑定在 <code>ServerProperties</code> 类上，源码中所在位置如下：</p><pre><code>|-- spring-boot-project    |-- spring-boot-autoconfigure        |-- src/main/java            |-- org.springframework.boot.autoconfigure                |-- web                    |-- ServerProperties  </code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring Boot默认配置源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub搭建Hexo</title>
      <link href="/2018/12/29/GitHub%E6%90%AD%E5%BB%BAHexo/"/>
      <url>/2018/12/29/GitHub%E6%90%AD%E5%BB%BAHexo/</url>
      
        <content type="html"><![CDATA[<h3 id="安装简介"><a href="#安装简介" class="headerlink" title="安装简介"></a>安装简介</h3><ul><li>Git</li><li>Node.js</li><li>hexo-cli</li></ul><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>Git 各平台安装包下载地址为：<a href="http://git-scm.com/downloads" target="_blank" rel="noopener">http://git-scm.com/downloads</a></p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><ul><li>windows安装node.js</li></ul><p>Node.js 安装包及源码下载地址为：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></p><p>安装完毕测试：</p><pre class="line-numbers language-bash"><code class="language-bash">$ node -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装hexo-cli客户端"><a href="#安装hexo-cli客户端" class="headerlink" title="安装hexo-cli客户端"></a>安装hexo-cli客户端</h3><p><code>hexo-cli</code> 客户端可以执行 <code>hexo</code> 命令。</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建博客目录"><a href="#创建博客目录" class="headerlink" title="创建博客目录"></a>创建博客目录</h3><p>创建一个 <code>hexo</code> 文件夹，进入到该目录中初始化。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#初始化</span>$ hexo init<span class="token comment" spellcheck="true">#清理项目</span>$ hexo clean<span class="token comment" spellcheck="true">#生成文章</span>$ hexo g<span class="token comment" spellcheck="true">#启动hexo</span>$ hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="博客安装主题"><a href="#博客安装主题" class="headerlink" title="博客安装主题"></a>博客安装主题</h3><p>进入到 <code>hexo</code> 的 <code>theme</code> 目录中，使用 <code>gitbash</code> 执行命令</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#git下载主题</span>$ <span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下载完毕后修改 <code>hexo</code> 目录下的  <code>_config.yml</code> 配置，把 <code>theme</code> 的值修改为主题文件夹的名称</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">theme</span><span class="token punctuation">:</span> hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>matery<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>代码高亮安装<a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">hexo-prism-plugin</a>插件</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> i -S hexo-prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后修改<code>hexo</code> 目录下的  <code>_config.yml</code>的值<code>highlight.enable</code>为<code>false</code>，并添加<code>prism</code>插件如下：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#修改为false</span><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment" spellcheck="true">#添加插件配置</span><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> preprocess  <span class="token key atrule">theme</span><span class="token punctuation">:</span> base16<span class="token punctuation">-</span>ateliersulphurpool.light <span class="token comment" spellcheck="true">#代码高亮主题</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false    </span><span class="token comment" spellcheck="true"># default false</span>  <span class="token key atrule">custom_css</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中支持的代码高亮主题有如下几种：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">theme</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> default  <span class="token punctuation">-</span> coy  <span class="token punctuation">-</span> dark  <span class="token punctuation">-</span> funky  <span class="token punctuation">-</span> okaidia  <span class="token punctuation">-</span> solarizedlight  <span class="token punctuation">-</span> tomorrow  <span class="token punctuation">-</span> twilight  <span class="token punctuation">-</span> atom<span class="token punctuation">-</span>dark  <span class="token punctuation">-</span> base16<span class="token punctuation">-</span>ateliersulphurpool.light  <span class="token punctuation">-</span> cb  <span class="token punctuation">-</span> duotone<span class="token punctuation">-</span>dark  <span class="token punctuation">-</span> duotone<span class="token punctuation">-</span>earth  <span class="token punctuation">-</span> duotone<span class="token punctuation">-</span>forest  <span class="token punctuation">-</span> duotone<span class="token punctuation">-</span>light  <span class="token punctuation">-</span> duotone<span class="token punctuation">-</span>sea  <span class="token punctuation">-</span> duotone<span class="token punctuation">-</span>space  <span class="token punctuation">-</span> ghcolors  <span class="token punctuation">-</span> hopscotch  <span class="token punctuation">-</span> pojoaque  <span class="token punctuation">-</span> vs  <span class="token punctuation">-</span> xonokai<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装搜索插件"><a href="#安装搜索插件" class="headerlink" title="安装搜索插件"></a>安装搜索插件</h3><p>使用Hexo插件 <code>hexo-generator-search</code> 搜索内容，安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在 <code>hexo</code> 目录下的 <code>_config.yml</code> 添加配置，如下所示：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="安装Hexo-admin插件"><a href="#安装Hexo-admin插件" class="headerlink" title="安装Hexo-admin插件"></a>安装Hexo-admin插件</h3><p>本地安装完，只能在本地使用，上传github访问不到</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#安装</span>$ <span class="token function">npm</span> <span class="token function">install</span> --save hexo-admin<span class="token comment" spellcheck="true">#启动</span>$ hexo server -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>访问 <code>http://localhost:4000/admin</code>即可。</p><h3 id="GitHub发布"><a href="#GitHub发布" class="headerlink" title="GitHub发布"></a>GitHub发布</h3><h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><p>在github创建一个仓库 <code>asiacuityz/asiacuityz.github.io</code>，注意 <code>/</code> 前后的<code>asiacuityz</code> 一定要保持一致，加个后缀<code>.github.io</code>即可。</p><h4 id="SSH生成添加"><a href="#SSH生成添加" class="headerlink" title="SSH生成添加"></a>SSH生成添加</h4><p><a href="https://help.github.com/articles/connecting-to-github-with-ssh/" target="_blank" rel="noopener">GithubSSH文档</a><br>根据邮箱生成SSH，然后会提示输入密码之类的操作，具体命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#生成SSH</span>$ ssh-keygen -t rsa -b 4096 -C <span class="token string">"your_email@example.com"</span><span class="token comment" spellcheck="true">#添加SSH</span>$ ssh-add ~/.ssh/id_rsa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行完命令，窗口会显示key文件生成目录在<code>.ssh</code>下，然后把文件<code>id_rsa.pub</code>里的内容添加到GitHub账户中。添加完毕之后在<code>_config.yml</code>配置如下：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>asiacuityz/asiacuityz.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后就可以执行<code>hexo d</code>发布到GitHub，访问路径<code>https://asiacuityz.github.io/</code>就可以看到页面了。</p><h3 id="安装出现问题"><a href="#安装出现问题" class="headerlink" title="安装出现问题"></a>安装出现问题</h3><ul><li><p>centos32位出现问题</p><p>执行<code>npm install -g hexo</code>命令出现如下错误</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> ERR<span class="token operator">!</span> Error: CERT_UNTRUSTED<span class="token function">npm</span> ERR<span class="token operator">!</span>    at SecurePair.<span class="token operator">&lt;</span>anonymous<span class="token operator">></span> <span class="token punctuation">(</span>tls.js:1430:32<span class="token punctuation">)</span><span class="token function">npm</span> ERR<span class="token operator">!</span>    at SecurePair.emit <span class="token punctuation">(</span>events.js:92:17<span class="token punctuation">)</span><span class="token function">npm</span> ERR<span class="token operator">!</span>    at SecurePair.maybeInitFinished <span class="token punctuation">(</span>tls.js:1029:10<span class="token punctuation">)</span><span class="token function">npm</span> ERR<span class="token operator">!</span>    at CleartextStream.read <span class="token punctuation">[</span>as _read<span class="token punctuation">]</span> <span class="token punctuation">(</span>tls.js:521:13<span class="token punctuation">)</span><span class="token function">npm</span> ERR<span class="token operator">!</span>    at CleartextStream.Readable.read <span class="token punctuation">(</span>_stream_readable.js:341:10<span class="token punctuation">)</span><span class="token function">npm</span> ERR<span class="token operator">!</span>    at EncryptedStream.write <span class="token punctuation">[</span>as _write<span class="token punctuation">]</span> <span class="token punctuation">(</span>tls.js:418:25<span class="token punctuation">)</span><span class="token function">npm</span> ERR<span class="token operator">!</span>    at doWrite <span class="token punctuation">(</span>_stream_writable.js:226:10<span class="token punctuation">)</span><span class="token function">npm</span> ERR<span class="token operator">!</span>    at writeOrBuffer <span class="token punctuation">(</span>_stream_writable.js:216:5<span class="token punctuation">)</span><span class="token function">npm</span> ERR<span class="token operator">!</span>    at EncryptedStream.Writable.write <span class="token punctuation">(</span>_stream_writable.js:183:11<span class="token punctuation">)</span><span class="token function">npm</span> ERR<span class="token operator">!</span>    at <span class="token function">write</span> <span class="token punctuation">(</span>_stream_readable.js:602:24<span class="token punctuation">)</span><span class="token function">npm</span> ERR<span class="token operator">!</span> If you need help, you may report this log at:<span class="token function">npm</span> ERR<span class="token operator">!</span>    <span class="token operator">&lt;</span>http://github.com/isaacs/npm/issues<span class="token operator">></span><span class="token function">npm</span> ERR<span class="token operator">!</span> or email it to:<span class="token function">npm</span> ERR<span class="token operator">!</span>    <span class="token operator">&lt;</span>npm-@googlegroups.com<span class="token operator">></span><span class="token function">npm</span> ERR<span class="token operator">!</span> System Linux 2.6.32-696.18.7.el6.x86_64<span class="token function">npm</span> ERR<span class="token operator">!</span> <span class="token function">command</span> <span class="token string">"node"</span> <span class="token string">"/usr/bin/npm"</span> <span class="token string">"install"</span> <span class="token string">"-g"</span> <span class="token string">"hexo"</span><span class="token function">npm</span> ERR<span class="token operator">!</span> cwd /root/github/kingty.github.io<span class="token function">npm</span> ERR<span class="token operator">!</span> node -v v0.10.48<span class="token function">npm</span> ERR<span class="token operator">!</span> <span class="token function">npm</span> -v 1.3.6<span class="token function">npm</span> ERR<span class="token operator">!</span> <span class="token function">npm</span> ERR<span class="token operator">!</span> Additional logging details can be found in:<span class="token function">npm</span> ERR<span class="token operator">!</span>    /root/github/kingty.github.io/npm-debug.log<span class="token function">npm</span> ERR<span class="token operator">!</span> not ok code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>这是因为npm用https导致的，解决办法是：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> strict-ssl <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行hexo init 出现如下错误：</p><pre class="line-numbers language-bash"><code class="language-bash">/usr/lib/node_modules/hexo/node_modules/hexo-cli/lib/hexo.js:13class HexoNotFoundError extends Error <span class="token punctuation">{</span><span class="token punctuation">}</span>^^^^^SyntaxError: Unexpected reserved word    at Module._compile <span class="token punctuation">(</span>module.js:439:25<span class="token punctuation">)</span>    at Object.Module._extensions<span class="token punctuation">..</span>js <span class="token punctuation">(</span>module.js:474:10<span class="token punctuation">)</span>    at Module.load <span class="token punctuation">(</span>module.js:356:32<span class="token punctuation">)</span>    at Function.Module._load <span class="token punctuation">(</span>module.js:312:12<span class="token punctuation">)</span>    at Module.require <span class="token punctuation">(</span>module.js:364:17<span class="token punctuation">)</span>    at require <span class="token punctuation">(</span>module.js:380:17<span class="token punctuation">)</span>    at Object.<span class="token operator">&lt;</span>anonymous<span class="token operator">></span> <span class="token punctuation">(</span>/usr/lib/node_modules/hexo/bin/hexo:5:1<span class="token punctuation">)</span>    at Module._compile <span class="token punctuation">(</span>module.js:456:26<span class="token punctuation">)</span>    at Object.Module._extensions<span class="token punctuation">..</span>js <span class="token punctuation">(</span>module.js:474:10<span class="token punctuation">)</span>    at Module.load <span class="token punctuation">(</span>module.js:356:32<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原因是<code>node</code>的版本过低，需要update 一下<code>node</code>到最新版</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">npm</span> cache clean -f<span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> -g n<span class="token comment" spellcheck="true">#装哪个版本就v版本号</span><span class="token function">sudo</span> n v9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> GitHub搭建Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新建分类示例</title>
      <link href="/2018/12/29/%E7%A4%BA%E4%BE%8B/"/>
      <url>/2018/12/29/%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p>categories页是用来展示所有分类的页面，如果在你的博客source目录下还没有categories/index.md文件，那么你就需要新建一个，命令如下：</p><p>hexo new page “categories”<br>编辑你刚刚新建的页面文件/source/categories/index.md，至少需要以下内容：</p><pre class="line-numbers language-yml"><code class="language-yml">---title: categoriesdate: 2018-09-30 17:25:30type: "categories"layout: "categories"---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h2><p>tags页是用来展示所有标签的页面，如果在你的博客source目录下还没有tags/index.md文件，那么你就需要新建一个，命令如下：</p><p>hexo new page “tags”<br>编辑你刚刚新建的页面文件/source/tags/index.md，至少需要以下内容：</p><pre class="line-numbers language-yml"><code class="language-yml">---title: tagsdate: 2018-09-30 18:23:38type: "tags"layout: "tags"---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h1><p>about页是用来展示关于我和我的博客信息的页面，如果在你的博客source目录下还没有about/index.md文件，那么你就需要新建一个，命令如下：</p><p>hexo new page “about”<br>编辑你刚刚新建的页面文件/source/about/index.md，至少需要以下内容：</p><pre class="line-numbers language-yml"><code class="language-yml">---title: aboutdate: 2018-09-30 17:25:30type: "about"layout: "about"---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="代码语法高亮标识"><a href="#代码语法高亮标识" class="headerlink" title="代码语法高亮标识"></a>代码语法高亮标识</h1><ul><li>.properties - properties</li><li>6502 Assembly - asm6502</li><li>ABAP - abap</li><li>ActionScript - actionscript</li><li>Ada - ada</li><li>Apache Configuration - apacheconf</li><li>APL - apl</li><li>AppleScript - applescript</li><li>Arduino - arduino</li><li>ARFF - arff</li><li>AsciiDoc - asciidoc</li><li>ASP.NET (C#) - aspnet</li><li>AutoHotkey - autohotkey</li><li>AutoIt - autoit</li><li>Bash - bash, shell</li><li>BASIC - basic</li><li>Batch - batch</li><li>Bison - bison</li><li>Brainfuck - brainfuck</li><li>Bro - bro</li><li>C - c</li><li>C# - csharp, dotnet</li><li>C++ - cpp</li><li>CIL - cil</li><li>C-like - clike</li><li>Clojure - clojure</li><li>CoffeeScript - coffeescript</li><li>Content-Security-Policy - csp</li><li>Crystal - crystal</li><li>CSS - css</li><li>CSS Extras - css-extras</li><li>D - d</li><li>Dart - dart</li><li>Diff - diff</li><li>Django/Jinja2 - django, jinja2</li><li>Docker - docker, dockerfile</li><li>Eiffel - eiffel</li><li>Elixir - elixir</li><li>Elm - elm</li><li>ERB - erb</li><li>Erlang - erlang</li><li>F# - fsharp</li><li>Flow - flow</li><li>Fortran - fortran</li><li>GameMaker Language - gml, gamemakerlanguage</li><li>G-code - gcode</li><li>GEDCOM - gedcom</li><li>Gherkin - gherkin</li><li>Git - git</li><li>GLSL - glsl</li><li>Go - go</li><li>GraphQL - graphql</li><li>Groovy - groovy</li><li>Haml - haml</li><li>Handlebars - handlebars</li><li>Haskell - haskell</li><li>Haxe - haxe</li><li>HCL - hcl</li><li>HTTP - http</li><li>HTTP Public-Key-Pins - hpkp</li><li>HTTP Strict-Transport-Security - hsts</li><li>IchigoJam - ichigojam</li><li>Icon - icon</li><li>Inform 7 - inform7</li><li>Ini - ini</li><li>Io - io</li><li>J - j</li><li>Java - java</li><li>Java stack trace - javastacktrace</li><li>JavaScript - javascript, js</li><li>Jolie - jolie</li><li>JSON - json, jsonp</li><li>Julia - julia</li><li>Keyman - keyman</li><li>Kotlin - kotlin</li><li>LaTeX - latex</li><li>Less - less</li><li>Liquid - liquid</li><li>Lisp - lisp, emacs, elisp, emacs-lisp</li><li>LiveScript - livescript</li><li>LOLCODE - lolcode</li><li>Lua - lua</li><li>Makefile - makefile</li><li>Markdown - markdown</li><li>Markup - markup, html, xml, svg, mathml</li><li>Markup templating - markup-templating</li><li>MATLAB - matlab</li><li>MEL - mel</li><li>Mizar - mizar</li><li>Monkey - monkey</li><li>N4JS - n4js, n4jsd</li><li>NASM - nasm</li><li>nginx - nginx</li><li>Nim - nim</li><li>Nix - nix</li><li>NSIS - nsis</li><li>Objective-C - objectivec</li><li>OCaml - ocaml</li><li>OpenCL - opencl</li><li>Oz - oz</li><li>PARI/GP - parigp</li><li>Parser - parser</li><li>Pascal - pascal, objectpascal</li><li>Perl - perl</li><li>PHP - php</li><li>PHP Extras - php-extras</li><li>PL/SQL - plsql</li><li>PowerShell - powershell</li><li>Processing - processing</li><li>Prolog - prolog</li><li>Protocol Buffers - protobuf</li><li>Pug - pug</li><li>Puppet - puppet</li><li>Pure - pure</li><li>Python - python</li><li>Q (kdb+ database) - q</li><li>Qore - qore</li><li>R - r</li><li>React JSX - jsx</li><li>React TSX - tsx</li><li>Reason - reason</li><li>Ren’py - renpy</li><li>reST (reStructuredText) - rest</li><li>Rip - rip</li><li>Roboconf - roboconf</li><li>Ruby - ruby</li><li>Rust - rust</li><li>SAS - sas</li><li>Sass (Sass) - sass</li><li>Sass (Scss) - scss</li><li>Scala - scala</li><li>Scheme - scheme</li><li>Smalltalk - smalltalk</li><li>Smarty - smarty</li><li>Soy (Closure Template) - soy</li><li>SQL - sql</li><li>Stylus - stylus</li><li>Swift - swift</li><li>TAP - tap</li><li>Tcl - tcl</li><li>Template Toolkit 2 - tt2</li><li>Textile - textile</li><li>TOML - toml</li><li>Twig - twig</li><li>TypeScript - typescript, ts</li><li>Vala - vala</li><li>VB.Net - vbnet</li><li>Velocity - velocity</li><li>Verilog - verilog</li><li>VHDL - vhdl</li><li>vim - vim</li><li>Visual Basic - visual-basic, vb</li><li>WebAssembly - wasm</li><li>Wiki markup - wiki</li><li>Xeora - xeora, xeoracube</li><li>Xojo (REALbasic) - xojo</li><li>XQuery - xquery</li><li>YAML - yaml</li></ul>]]></content>
      
      
      <categories>
          
          <category> 新建文章格式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
